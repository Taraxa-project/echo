import 'dart:convert';

typedef Bool = bool;
typedef int32 = int;
typedef int53 = int;
typedef int64 = String;
typedef vector<T> = List<T>;
typedef bytes = String;
typedef string = String;

extension BoolMap on bool {
  bool toMap({skipNulls: true}) => this;
}

extension IntMap on int {
  int toMap({skipNulls: true}) => this;
}

extension DoubleMap on double {
  double toMap({skipNulls: true}) => this;
}

extension StringMap on String {
  String toMap({skipNulls: true}) => this;
}

extension ListMap on List {
  List toMap({skipNulls: true}) => this;
}

abstract class TlObject {
  // String get tlType;

  TlObject();
  TlObject.fromMap(Map<String, dynamic> map);

  Map<String, dynamic> toMap({skipNulls: true});

  String toJson({skipNulls = true}) {
    return jsonEncode(toMap(skipNulls: skipNulls));
  }

  String toString({skipNulls = false}) {
    return toJson(skipNulls: skipNulls);
  }
}

abstract class TdObject extends TlObject {}

abstract class TdFunction extends TlObject {
  Type get tdReturnType;
}

class Error extends TdObject {
  String get tlType => 'error';

  string? extra;
  int? client_id;
  int32? code;
  string? message;

  Error({
    string? this.extra,
    int? this.client_id,
    int32? this.code,
    string? this.message,
  });

  Error.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code = map.containsKey('code') ? map['code'] : null;
    message = map.containsKey('message') ? map['message'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code': code?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Ok extends TdObject {
  String get tlType => 'ok';

  string? extra;
  int? client_id;

  Ok({
    string? this.extra,
    int? this.client_id,
  });

  Ok.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TdlibParameters extends TdObject {
  String get tlType => 'tdlibParameters';

  string? extra;
  int? client_id;
  Bool? use_test_dc;
  string? database_directory;
  string? files_directory;
  Bool? use_file_database;
  Bool? use_chat_info_database;
  Bool? use_message_database;
  Bool? use_secret_chats;
  int32? api_id;
  string? api_hash;
  string? system_language_code;
  string? device_model;
  string? system_version;
  string? application_version;
  Bool? enable_storage_optimizer;
  Bool? ignore_file_names;

  TdlibParameters({
    string? this.extra,
    int? this.client_id,
    Bool? this.use_test_dc,
    string? this.database_directory,
    string? this.files_directory,
    Bool? this.use_file_database,
    Bool? this.use_chat_info_database,
    Bool? this.use_message_database,
    Bool? this.use_secret_chats,
    int32? this.api_id,
    string? this.api_hash,
    string? this.system_language_code,
    string? this.device_model,
    string? this.system_version,
    string? this.application_version,
    Bool? this.enable_storage_optimizer,
    Bool? this.ignore_file_names,
  });

  TdlibParameters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    use_test_dc = map.containsKey('use_test_dc') ? map['use_test_dc'] : null;
    database_directory = map.containsKey('database_directory')
        ? map['database_directory']
        : null;
    files_directory =
        map.containsKey('files_directory') ? map['files_directory'] : null;
    use_file_database =
        map.containsKey('use_file_database') ? map['use_file_database'] : null;
    use_chat_info_database = map.containsKey('use_chat_info_database')
        ? map['use_chat_info_database']
        : null;
    use_message_database = map.containsKey('use_message_database')
        ? map['use_message_database']
        : null;
    use_secret_chats =
        map.containsKey('use_secret_chats') ? map['use_secret_chats'] : null;
    api_id = map.containsKey('api_id') ? map['api_id'] : null;
    api_hash = map.containsKey('api_hash') ? map['api_hash'] : null;
    system_language_code = map.containsKey('system_language_code')
        ? map['system_language_code']
        : null;
    device_model = map.containsKey('device_model') ? map['device_model'] : null;
    system_version =
        map.containsKey('system_version') ? map['system_version'] : null;
    application_version = map.containsKey('application_version')
        ? map['application_version']
        : null;
    enable_storage_optimizer = map.containsKey('enable_storage_optimizer')
        ? map['enable_storage_optimizer']
        : null;
    ignore_file_names =
        map.containsKey('ignore_file_names') ? map['ignore_file_names'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'use_test_dc': use_test_dc?.toMap(skipNulls: skipNulls),
      'database_directory': database_directory?.toMap(skipNulls: skipNulls),
      'files_directory': files_directory?.toMap(skipNulls: skipNulls),
      'use_file_database': use_file_database?.toMap(skipNulls: skipNulls),
      'use_chat_info_database':
          use_chat_info_database?.toMap(skipNulls: skipNulls),
      'use_message_database': use_message_database?.toMap(skipNulls: skipNulls),
      'use_secret_chats': use_secret_chats?.toMap(skipNulls: skipNulls),
      'api_id': api_id?.toMap(skipNulls: skipNulls),
      'api_hash': api_hash?.toMap(skipNulls: skipNulls),
      'system_language_code': system_language_code?.toMap(skipNulls: skipNulls),
      'device_model': device_model?.toMap(skipNulls: skipNulls),
      'system_version': system_version?.toMap(skipNulls: skipNulls),
      'application_version': application_version?.toMap(skipNulls: skipNulls),
      'enable_storage_optimizer':
          enable_storage_optimizer?.toMap(skipNulls: skipNulls),
      'ignore_file_names': ignore_file_names?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthenticationCodeTypeTelegramMessage extends AuthenticationCodeType {
  String get tlType => 'authenticationCodeTypeTelegramMessage';

  string? extra;
  int? client_id;
  int32? length;

  AuthenticationCodeTypeTelegramMessage({
    string? this.extra,
    int? this.client_id,
    int32? this.length,
  });

  AuthenticationCodeTypeTelegramMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    length = map.containsKey('length') ? map['length'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthenticationCodeTypeSms extends AuthenticationCodeType {
  String get tlType => 'authenticationCodeTypeSms';

  string? extra;
  int? client_id;
  int32? length;

  AuthenticationCodeTypeSms({
    string? this.extra,
    int? this.client_id,
    int32? this.length,
  });

  AuthenticationCodeTypeSms.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    length = map.containsKey('length') ? map['length'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthenticationCodeTypeCall extends AuthenticationCodeType {
  String get tlType => 'authenticationCodeTypeCall';

  string? extra;
  int? client_id;
  int32? length;

  AuthenticationCodeTypeCall({
    string? this.extra,
    int? this.client_id,
    int32? this.length,
  });

  AuthenticationCodeTypeCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    length = map.containsKey('length') ? map['length'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthenticationCodeTypeFlashCall extends AuthenticationCodeType {
  String get tlType => 'authenticationCodeTypeFlashCall';

  string? extra;
  int? client_id;
  string? pattern;

  AuthenticationCodeTypeFlashCall({
    string? this.extra,
    int? this.client_id,
    string? this.pattern,
  });

  AuthenticationCodeTypeFlashCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    pattern = map.containsKey('pattern') ? map['pattern'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'pattern': pattern?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthenticationCodeTypeMissedCall extends AuthenticationCodeType {
  String get tlType => 'authenticationCodeTypeMissedCall';

  string? extra;
  int? client_id;
  string? phone_number_prefix;
  int32? length;

  AuthenticationCodeTypeMissedCall({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number_prefix,
    int32? this.length,
  });

  AuthenticationCodeTypeMissedCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number_prefix = map.containsKey('phone_number_prefix')
        ? map['phone_number_prefix']
        : null;
    length = map.containsKey('length') ? map['length'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number_prefix': phone_number_prefix?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthenticationCodeInfo extends TdObject {
  String get tlType => 'authenticationCodeInfo';

  string? extra;
  int? client_id;
  string? phone_number;
  AuthenticationCodeType? type;
  AuthenticationCodeType? next_type;
  int32? timeout;

  AuthenticationCodeInfo({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number,
    AuthenticationCodeType? this.type,
    AuthenticationCodeType? this.next_type,
    int32? this.timeout,
  });

  AuthenticationCodeInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as AuthenticationCodeType
        : null;
    next_type = map.containsKey('next_type')
        ? TlMap.fromMap(map['next_type']) as AuthenticationCodeType
        : null;
    timeout = map.containsKey('timeout') ? map['timeout'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'next_type': next_type?.toMap(skipNulls: skipNulls),
      'timeout': timeout?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EmailAddressAuthenticationCodeInfo extends TdObject {
  String get tlType => 'emailAddressAuthenticationCodeInfo';

  string? extra;
  int? client_id;
  string? email_address_pattern;
  int32? length;

  EmailAddressAuthenticationCodeInfo({
    string? this.extra,
    int? this.client_id,
    string? this.email_address_pattern,
    int32? this.length,
  });

  EmailAddressAuthenticationCodeInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    email_address_pattern = map.containsKey('email_address_pattern')
        ? map['email_address_pattern']
        : null;
    length = map.containsKey('length') ? map['length'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'email_address_pattern':
          email_address_pattern?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntity extends TdObject {
  String get tlType => 'textEntity';

  string? extra;
  int? client_id;
  int32? offset;
  int32? length;
  TextEntityType? type;

  TextEntity({
    string? this.extra,
    int? this.client_id,
    int32? this.offset,
    int32? this.length,
    TextEntityType? this.type,
  });

  TextEntity.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    length = map.containsKey('length') ? map['length'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as TextEntityType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntities extends TdObject {
  String get tlType => 'textEntities';

  string? extra;
  int? client_id;
  vector<TextEntity>? entities;

  TextEntities({
    string? this.extra,
    int? this.client_id,
    vector<TextEntity>? this.entities,
  });

  TextEntities.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('entities') && map['entities'] != null) {
      entities = [];
      var someValues = map['entities'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as TextEntity;
        entities?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'entities': entities?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FormattedText extends TdObject {
  String get tlType => 'formattedText';

  string? extra;
  int? client_id;
  string? text;
  vector<TextEntity>? entities;

  FormattedText({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    vector<TextEntity>? this.entities,
  });

  FormattedText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    if (map.containsKey('entities') && map['entities'] != null) {
      entities = [];
      var someValues = map['entities'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as TextEntity;
        entities?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'entities': entities?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TermsOfService extends TdObject {
  String get tlType => 'termsOfService';

  string? extra;
  int? client_id;
  FormattedText? text;
  int32? min_user_age;
  Bool? show_popup;

  TermsOfService({
    string? this.extra,
    int? this.client_id,
    FormattedText? this.text,
    int32? this.min_user_age,
    Bool? this.show_popup,
  });

  TermsOfService.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
    min_user_age = map.containsKey('min_user_age') ? map['min_user_age'] : null;
    show_popup = map.containsKey('show_popup') ? map['show_popup'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'min_user_age': min_user_age?.toMap(skipNulls: skipNulls),
      'show_popup': show_popup?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateWaitTdlibParameters extends AuthorizationState {
  String get tlType => 'authorizationStateWaitTdlibParameters';

  string? extra;
  int? client_id;

  AuthorizationStateWaitTdlibParameters({
    string? this.extra,
    int? this.client_id,
  });

  AuthorizationStateWaitTdlibParameters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateWaitEncryptionKey extends AuthorizationState {
  String get tlType => 'authorizationStateWaitEncryptionKey';

  string? extra;
  int? client_id;
  Bool? is_encrypted;

  AuthorizationStateWaitEncryptionKey({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_encrypted,
  });

  AuthorizationStateWaitEncryptionKey.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_encrypted = map.containsKey('is_encrypted') ? map['is_encrypted'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_encrypted': is_encrypted?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateWaitPhoneNumber extends AuthorizationState {
  String get tlType => 'authorizationStateWaitPhoneNumber';

  string? extra;
  int? client_id;

  AuthorizationStateWaitPhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  AuthorizationStateWaitPhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateWaitCode extends AuthorizationState {
  String get tlType => 'authorizationStateWaitCode';

  string? extra;
  int? client_id;
  AuthenticationCodeInfo? code_info;

  AuthorizationStateWaitCode({
    string? this.extra,
    int? this.client_id,
    AuthenticationCodeInfo? this.code_info,
  });

  AuthorizationStateWaitCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code_info = map.containsKey('code_info')
        ? TlMap.fromMap(map['code_info']) as AuthenticationCodeInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code_info': code_info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateWaitOtherDeviceConfirmation extends AuthorizationState {
  String get tlType => 'authorizationStateWaitOtherDeviceConfirmation';

  string? extra;
  int? client_id;
  string? link;

  AuthorizationStateWaitOtherDeviceConfirmation({
    string? this.extra,
    int? this.client_id,
    string? this.link,
  });

  AuthorizationStateWaitOtherDeviceConfirmation.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    link = map.containsKey('link') ? map['link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateWaitRegistration extends AuthorizationState {
  String get tlType => 'authorizationStateWaitRegistration';

  string? extra;
  int? client_id;
  TermsOfService? terms_of_service;

  AuthorizationStateWaitRegistration({
    string? this.extra,
    int? this.client_id,
    TermsOfService? this.terms_of_service,
  });

  AuthorizationStateWaitRegistration.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    terms_of_service = map.containsKey('terms_of_service')
        ? TlMap.fromMap(map['terms_of_service']) as TermsOfService
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'terms_of_service': terms_of_service?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateWaitPassword extends AuthorizationState {
  String get tlType => 'authorizationStateWaitPassword';

  string? extra;
  int? client_id;
  string? password_hint;
  Bool? has_recovery_email_address;
  string? recovery_email_address_pattern;

  AuthorizationStateWaitPassword({
    string? this.extra,
    int? this.client_id,
    string? this.password_hint,
    Bool? this.has_recovery_email_address,
    string? this.recovery_email_address_pattern,
  });

  AuthorizationStateWaitPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    password_hint =
        map.containsKey('password_hint') ? map['password_hint'] : null;
    has_recovery_email_address = map.containsKey('has_recovery_email_address')
        ? map['has_recovery_email_address']
        : null;
    recovery_email_address_pattern =
        map.containsKey('recovery_email_address_pattern')
            ? map['recovery_email_address_pattern']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'password_hint': password_hint?.toMap(skipNulls: skipNulls),
      'has_recovery_email_address':
          has_recovery_email_address?.toMap(skipNulls: skipNulls),
      'recovery_email_address_pattern':
          recovery_email_address_pattern?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateReady extends AuthorizationState {
  String get tlType => 'authorizationStateReady';

  string? extra;
  int? client_id;

  AuthorizationStateReady({
    string? this.extra,
    int? this.client_id,
  });

  AuthorizationStateReady.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateLoggingOut extends AuthorizationState {
  String get tlType => 'authorizationStateLoggingOut';

  string? extra;
  int? client_id;

  AuthorizationStateLoggingOut({
    string? this.extra,
    int? this.client_id,
  });

  AuthorizationStateLoggingOut.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateClosing extends AuthorizationState {
  String get tlType => 'authorizationStateClosing';

  string? extra;
  int? client_id;

  AuthorizationStateClosing({
    string? this.extra,
    int? this.client_id,
  });

  AuthorizationStateClosing.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AuthorizationStateClosed extends AuthorizationState {
  String get tlType => 'authorizationStateClosed';

  string? extra;
  int? client_id;

  AuthorizationStateClosed({
    string? this.extra,
    int? this.client_id,
  });

  AuthorizationStateClosed.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PasswordState extends TdObject {
  String get tlType => 'passwordState';

  string? extra;
  int? client_id;
  Bool? has_password;
  string? password_hint;
  Bool? has_recovery_email_address;
  Bool? has_passport_data;
  EmailAddressAuthenticationCodeInfo? recovery_email_address_code_info;
  int32? pending_reset_date;

  PasswordState({
    string? this.extra,
    int? this.client_id,
    Bool? this.has_password,
    string? this.password_hint,
    Bool? this.has_recovery_email_address,
    Bool? this.has_passport_data,
    EmailAddressAuthenticationCodeInfo? this.recovery_email_address_code_info,
    int32? this.pending_reset_date,
  });

  PasswordState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    has_password = map.containsKey('has_password') ? map['has_password'] : null;
    password_hint =
        map.containsKey('password_hint') ? map['password_hint'] : null;
    has_recovery_email_address = map.containsKey('has_recovery_email_address')
        ? map['has_recovery_email_address']
        : null;
    has_passport_data =
        map.containsKey('has_passport_data') ? map['has_passport_data'] : null;
    recovery_email_address_code_info =
        map.containsKey('recovery_email_address_code_info')
            ? TlMap.fromMap(map['recovery_email_address_code_info'])
                as EmailAddressAuthenticationCodeInfo
            : null;
    pending_reset_date = map.containsKey('pending_reset_date')
        ? map['pending_reset_date']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'has_password': has_password?.toMap(skipNulls: skipNulls),
      'password_hint': password_hint?.toMap(skipNulls: skipNulls),
      'has_recovery_email_address':
          has_recovery_email_address?.toMap(skipNulls: skipNulls),
      'has_passport_data': has_passport_data?.toMap(skipNulls: skipNulls),
      'recovery_email_address_code_info':
          recovery_email_address_code_info?.toMap(skipNulls: skipNulls),
      'pending_reset_date': pending_reset_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RecoveryEmailAddress extends TdObject {
  String get tlType => 'recoveryEmailAddress';

  string? extra;
  int? client_id;
  string? recovery_email_address;

  RecoveryEmailAddress({
    string? this.extra,
    int? this.client_id,
    string? this.recovery_email_address,
  });

  RecoveryEmailAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    recovery_email_address = map.containsKey('recovery_email_address')
        ? map['recovery_email_address']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'recovery_email_address':
          recovery_email_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TemporaryPasswordState extends TdObject {
  String get tlType => 'temporaryPasswordState';

  string? extra;
  int? client_id;
  Bool? has_password;
  int32? valid_for;

  TemporaryPasswordState({
    string? this.extra,
    int? this.client_id,
    Bool? this.has_password,
    int32? this.valid_for,
  });

  TemporaryPasswordState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    has_password = map.containsKey('has_password') ? map['has_password'] : null;
    valid_for = map.containsKey('valid_for') ? map['valid_for'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'has_password': has_password?.toMap(skipNulls: skipNulls),
      'valid_for': valid_for?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LocalFile extends TdObject {
  String get tlType => 'localFile';

  string? extra;
  int? client_id;
  string? path;
  Bool? can_be_downloaded;
  Bool? can_be_deleted;
  Bool? is_downloading_active;
  Bool? is_downloading_completed;
  int32? download_offset;
  int32? downloaded_prefix_size;
  int32? downloaded_size;

  LocalFile({
    string? this.extra,
    int? this.client_id,
    string? this.path,
    Bool? this.can_be_downloaded,
    Bool? this.can_be_deleted,
    Bool? this.is_downloading_active,
    Bool? this.is_downloading_completed,
    int32? this.download_offset,
    int32? this.downloaded_prefix_size,
    int32? this.downloaded_size,
  });

  LocalFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    path = map.containsKey('path') ? map['path'] : null;
    can_be_downloaded =
        map.containsKey('can_be_downloaded') ? map['can_be_downloaded'] : null;
    can_be_deleted =
        map.containsKey('can_be_deleted') ? map['can_be_deleted'] : null;
    is_downloading_active = map.containsKey('is_downloading_active')
        ? map['is_downloading_active']
        : null;
    is_downloading_completed = map.containsKey('is_downloading_completed')
        ? map['is_downloading_completed']
        : null;
    download_offset =
        map.containsKey('download_offset') ? map['download_offset'] : null;
    downloaded_prefix_size = map.containsKey('downloaded_prefix_size')
        ? map['downloaded_prefix_size']
        : null;
    downloaded_size =
        map.containsKey('downloaded_size') ? map['downloaded_size'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'path': path?.toMap(skipNulls: skipNulls),
      'can_be_downloaded': can_be_downloaded?.toMap(skipNulls: skipNulls),
      'can_be_deleted': can_be_deleted?.toMap(skipNulls: skipNulls),
      'is_downloading_active':
          is_downloading_active?.toMap(skipNulls: skipNulls),
      'is_downloading_completed':
          is_downloading_completed?.toMap(skipNulls: skipNulls),
      'download_offset': download_offset?.toMap(skipNulls: skipNulls),
      'downloaded_prefix_size':
          downloaded_prefix_size?.toMap(skipNulls: skipNulls),
      'downloaded_size': downloaded_size?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoteFile extends TdObject {
  String get tlType => 'remoteFile';

  string? extra;
  int? client_id;
  string? id;
  string? unique_id;
  Bool? is_uploading_active;
  Bool? is_uploading_completed;
  int32? uploaded_size;

  RemoteFile({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.unique_id,
    Bool? this.is_uploading_active,
    Bool? this.is_uploading_completed,
    int32? this.uploaded_size,
  });

  RemoteFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    unique_id = map.containsKey('unique_id') ? map['unique_id'] : null;
    is_uploading_active = map.containsKey('is_uploading_active')
        ? map['is_uploading_active']
        : null;
    is_uploading_completed = map.containsKey('is_uploading_completed')
        ? map['is_uploading_completed']
        : null;
    uploaded_size =
        map.containsKey('uploaded_size') ? map['uploaded_size'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'unique_id': unique_id?.toMap(skipNulls: skipNulls),
      'is_uploading_active': is_uploading_active?.toMap(skipNulls: skipNulls),
      'is_uploading_completed':
          is_uploading_completed?.toMap(skipNulls: skipNulls),
      'uploaded_size': uploaded_size?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class File extends TdObject {
  String get tlType => 'file';

  string? extra;
  int? client_id;
  int32? id;
  int32? size;
  int32? expected_size;
  LocalFile? local;
  RemoteFile? remote;

  File({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    int32? this.size,
    int32? this.expected_size,
    LocalFile? this.local,
    RemoteFile? this.remote,
  });

  File.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    size = map.containsKey('size') ? map['size'] : null;
    expected_size =
        map.containsKey('expected_size') ? map['expected_size'] : null;
    local = map.containsKey('local')
        ? TlMap.fromMap(map['local']) as LocalFile
        : null;
    remote = map.containsKey('remote')
        ? TlMap.fromMap(map['remote']) as RemoteFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'size': size?.toMap(skipNulls: skipNulls),
      'expected_size': expected_size?.toMap(skipNulls: skipNulls),
      'local': local?.toMap(skipNulls: skipNulls),
      'remote': remote?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputFileId extends InputFile {
  String get tlType => 'inputFileId';

  string? extra;
  int? client_id;
  int32? id;

  InputFileId({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
  });

  InputFileId.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputFileRemote extends InputFile {
  String get tlType => 'inputFileRemote';

  string? extra;
  int? client_id;
  string? id;

  InputFileRemote({
    string? this.extra,
    int? this.client_id,
    string? this.id,
  });

  InputFileRemote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputFileLocal extends InputFile {
  String get tlType => 'inputFileLocal';

  string? extra;
  int? client_id;
  string? path;

  InputFileLocal({
    string? this.extra,
    int? this.client_id,
    string? this.path,
  });

  InputFileLocal.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    path = map.containsKey('path') ? map['path'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'path': path?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputFileGenerated extends InputFile {
  String get tlType => 'inputFileGenerated';

  string? extra;
  int? client_id;
  string? original_path;
  string? conversion;
  int32? expected_size;

  InputFileGenerated({
    string? this.extra,
    int? this.client_id,
    string? this.original_path,
    string? this.conversion,
    int32? this.expected_size,
  });

  InputFileGenerated.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    original_path =
        map.containsKey('original_path') ? map['original_path'] : null;
    conversion = map.containsKey('conversion') ? map['conversion'] : null;
    expected_size =
        map.containsKey('expected_size') ? map['expected_size'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'original_path': original_path?.toMap(skipNulls: skipNulls),
      'conversion': conversion?.toMap(skipNulls: skipNulls),
      'expected_size': expected_size?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PhotoSize extends TdObject {
  String get tlType => 'photoSize';

  string? extra;
  int? client_id;
  string? type;
  File? photo;
  int32? width;
  int32? height;
  vector<int32>? progressive_sizes;

  PhotoSize({
    string? this.extra,
    int? this.client_id,
    string? this.type,
    File? this.photo,
    int32? this.width,
    int32? this.height,
    vector<int32>? this.progressive_sizes,
  });

  PhotoSize.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type') ? map['type'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as File : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    if (map.containsKey('progressive_sizes') &&
        map['progressive_sizes'] != null) {
      progressive_sizes = [];
      var someValues = map['progressive_sizes'];
      for (var someValue in someValues) {
        progressive_sizes?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'progressive_sizes': progressive_sizes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Minithumbnail extends TdObject {
  String get tlType => 'minithumbnail';

  string? extra;
  int? client_id;
  int32? width;
  int32? height;
  bytes? data;

  Minithumbnail({
    string? this.extra,
    int? this.client_id,
    int32? this.width,
    int32? this.height,
    bytes? this.data,
  });

  Minithumbnail.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ThumbnailFormatJpeg extends ThumbnailFormat {
  String get tlType => 'thumbnailFormatJpeg';

  string? extra;
  int? client_id;

  ThumbnailFormatJpeg({
    string? this.extra,
    int? this.client_id,
  });

  ThumbnailFormatJpeg.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ThumbnailFormatPng extends ThumbnailFormat {
  String get tlType => 'thumbnailFormatPng';

  string? extra;
  int? client_id;

  ThumbnailFormatPng({
    string? this.extra,
    int? this.client_id,
  });

  ThumbnailFormatPng.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ThumbnailFormatWebp extends ThumbnailFormat {
  String get tlType => 'thumbnailFormatWebp';

  string? extra;
  int? client_id;

  ThumbnailFormatWebp({
    string? this.extra,
    int? this.client_id,
  });

  ThumbnailFormatWebp.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ThumbnailFormatGif extends ThumbnailFormat {
  String get tlType => 'thumbnailFormatGif';

  string? extra;
  int? client_id;

  ThumbnailFormatGif({
    string? this.extra,
    int? this.client_id,
  });

  ThumbnailFormatGif.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ThumbnailFormatTgs extends ThumbnailFormat {
  String get tlType => 'thumbnailFormatTgs';

  string? extra;
  int? client_id;

  ThumbnailFormatTgs({
    string? this.extra,
    int? this.client_id,
  });

  ThumbnailFormatTgs.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ThumbnailFormatMpeg4 extends ThumbnailFormat {
  String get tlType => 'thumbnailFormatMpeg4';

  string? extra;
  int? client_id;

  ThumbnailFormatMpeg4({
    string? this.extra,
    int? this.client_id,
  });

  ThumbnailFormatMpeg4.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Thumbnail extends TdObject {
  String get tlType => 'thumbnail';

  string? extra;
  int? client_id;
  ThumbnailFormat? format;
  int32? width;
  int32? height;
  File? file;

  Thumbnail({
    string? this.extra,
    int? this.client_id,
    ThumbnailFormat? this.format,
    int32? this.width,
    int32? this.height,
    File? this.file,
  });

  Thumbnail.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    format = map.containsKey('format')
        ? TlMap.fromMap(map['format']) as ThumbnailFormat
        : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    file = map.containsKey('file') ? TlMap.fromMap(map['file']) as File : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'format': format?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'file': file?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MaskPointForehead extends MaskPoint {
  String get tlType => 'maskPointForehead';

  string? extra;
  int? client_id;

  MaskPointForehead({
    string? this.extra,
    int? this.client_id,
  });

  MaskPointForehead.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MaskPointEyes extends MaskPoint {
  String get tlType => 'maskPointEyes';

  string? extra;
  int? client_id;

  MaskPointEyes({
    string? this.extra,
    int? this.client_id,
  });

  MaskPointEyes.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MaskPointMouth extends MaskPoint {
  String get tlType => 'maskPointMouth';

  string? extra;
  int? client_id;

  MaskPointMouth({
    string? this.extra,
    int? this.client_id,
  });

  MaskPointMouth.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MaskPointChin extends MaskPoint {
  String get tlType => 'maskPointChin';

  string? extra;
  int? client_id;

  MaskPointChin({
    string? this.extra,
    int? this.client_id,
  });

  MaskPointChin.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MaskPosition extends TdObject {
  String get tlType => 'maskPosition';

  string? extra;
  int? client_id;
  MaskPoint? point;
  double? x_shift;
  double? y_shift;
  double? scale;

  MaskPosition({
    string? this.extra,
    int? this.client_id,
    MaskPoint? this.point,
    double? this.x_shift,
    double? this.y_shift,
    double? this.scale,
  });

  MaskPosition.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    point = map.containsKey('point')
        ? TlMap.fromMap(map['point']) as MaskPoint
        : null;
    x_shift = map.containsKey('x_shift') ? map['x_shift'] : null;
    y_shift = map.containsKey('y_shift') ? map['y_shift'] : null;
    scale = map.containsKey('scale') ? map['scale'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'point': point?.toMap(skipNulls: skipNulls),
      'x_shift': x_shift?.toMap(skipNulls: skipNulls),
      'y_shift': y_shift?.toMap(skipNulls: skipNulls),
      'scale': scale?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ClosedVectorPath extends TdObject {
  String get tlType => 'closedVectorPath';

  string? extra;
  int? client_id;
  vector<VectorPathCommand>? commands;

  ClosedVectorPath({
    string? this.extra,
    int? this.client_id,
    vector<VectorPathCommand>? this.commands,
  });

  ClosedVectorPath.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('commands') && map['commands'] != null) {
      commands = [];
      var someValues = map['commands'];
      for (var someValue in someValues) {
        commands?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'commands': commands?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PollOption extends TdObject {
  String get tlType => 'pollOption';

  string? extra;
  int? client_id;
  string? text;
  int32? voter_count;
  int32? vote_percentage;
  Bool? is_chosen;
  Bool? is_being_chosen;

  PollOption({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    int32? this.voter_count,
    int32? this.vote_percentage,
    Bool? this.is_chosen,
    Bool? this.is_being_chosen,
  });

  PollOption.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    voter_count = map.containsKey('voter_count') ? map['voter_count'] : null;
    vote_percentage =
        map.containsKey('vote_percentage') ? map['vote_percentage'] : null;
    is_chosen = map.containsKey('is_chosen') ? map['is_chosen'] : null;
    is_being_chosen =
        map.containsKey('is_being_chosen') ? map['is_being_chosen'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'voter_count': voter_count?.toMap(skipNulls: skipNulls),
      'vote_percentage': vote_percentage?.toMap(skipNulls: skipNulls),
      'is_chosen': is_chosen?.toMap(skipNulls: skipNulls),
      'is_being_chosen': is_being_chosen?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PollTypeRegular extends PollType {
  String get tlType => 'pollTypeRegular';

  string? extra;
  int? client_id;
  Bool? allow_multiple_answers;

  PollTypeRegular({
    string? this.extra,
    int? this.client_id,
    Bool? this.allow_multiple_answers,
  });

  PollTypeRegular.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    allow_multiple_answers = map.containsKey('allow_multiple_answers')
        ? map['allow_multiple_answers']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'allow_multiple_answers':
          allow_multiple_answers?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PollTypeQuiz extends PollType {
  String get tlType => 'pollTypeQuiz';

  string? extra;
  int? client_id;
  int32? correct_option_id;
  FormattedText? explanation;

  PollTypeQuiz({
    string? this.extra,
    int? this.client_id,
    int32? this.correct_option_id,
    FormattedText? this.explanation,
  });

  PollTypeQuiz.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    correct_option_id =
        map.containsKey('correct_option_id') ? map['correct_option_id'] : null;
    explanation = map.containsKey('explanation')
        ? TlMap.fromMap(map['explanation']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'correct_option_id': correct_option_id?.toMap(skipNulls: skipNulls),
      'explanation': explanation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Animation extends TdObject {
  String get tlType => 'animation';

  string? extra;
  int? client_id;
  int32? duration;
  int32? width;
  int32? height;
  string? file_name;
  string? mime_type;
  Bool? has_stickers;
  Minithumbnail? minithumbnail;
  Thumbnail? thumbnail;
  File? animation;

  Animation({
    string? this.extra,
    int? this.client_id,
    int32? this.duration,
    int32? this.width,
    int32? this.height,
    string? this.file_name,
    string? this.mime_type,
    Bool? this.has_stickers,
    Minithumbnail? this.minithumbnail,
    Thumbnail? this.thumbnail,
    File? this.animation,
  });

  Animation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    file_name = map.containsKey('file_name') ? map['file_name'] : null;
    mime_type = map.containsKey('mime_type') ? map['mime_type'] : null;
    has_stickers = map.containsKey('has_stickers') ? map['has_stickers'] : null;
    minithumbnail = map.containsKey('minithumbnail')
        ? TlMap.fromMap(map['minithumbnail']) as Minithumbnail
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as File
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'file_name': file_name?.toMap(skipNulls: skipNulls),
      'mime_type': mime_type?.toMap(skipNulls: skipNulls),
      'has_stickers': has_stickers?.toMap(skipNulls: skipNulls),
      'minithumbnail': minithumbnail?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Audio extends TdObject {
  String get tlType => 'audio';

  string? extra;
  int? client_id;
  int32? duration;
  string? title;
  string? performer;
  string? file_name;
  string? mime_type;
  Minithumbnail? album_cover_minithumbnail;
  Thumbnail? album_cover_thumbnail;
  File? audio;

  Audio({
    string? this.extra,
    int? this.client_id,
    int32? this.duration,
    string? this.title,
    string? this.performer,
    string? this.file_name,
    string? this.mime_type,
    Minithumbnail? this.album_cover_minithumbnail,
    Thumbnail? this.album_cover_thumbnail,
    File? this.audio,
  });

  Audio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    performer = map.containsKey('performer') ? map['performer'] : null;
    file_name = map.containsKey('file_name') ? map['file_name'] : null;
    mime_type = map.containsKey('mime_type') ? map['mime_type'] : null;
    album_cover_minithumbnail = map.containsKey('album_cover_minithumbnail')
        ? TlMap.fromMap(map['album_cover_minithumbnail']) as Minithumbnail
        : null;
    album_cover_thumbnail = map.containsKey('album_cover_thumbnail')
        ? TlMap.fromMap(map['album_cover_thumbnail']) as Thumbnail
        : null;
    audio =
        map.containsKey('audio') ? TlMap.fromMap(map['audio']) as File : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'performer': performer?.toMap(skipNulls: skipNulls),
      'file_name': file_name?.toMap(skipNulls: skipNulls),
      'mime_type': mime_type?.toMap(skipNulls: skipNulls),
      'album_cover_minithumbnail':
          album_cover_minithumbnail?.toMap(skipNulls: skipNulls),
      'album_cover_thumbnail':
          album_cover_thumbnail?.toMap(skipNulls: skipNulls),
      'audio': audio?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Document extends TdObject {
  String get tlType => 'document';

  string? extra;
  int? client_id;
  string? file_name;
  string? mime_type;
  Minithumbnail? minithumbnail;
  Thumbnail? thumbnail;
  File? document;

  Document({
    string? this.extra,
    int? this.client_id,
    string? this.file_name,
    string? this.mime_type,
    Minithumbnail? this.minithumbnail,
    Thumbnail? this.thumbnail,
    File? this.document,
  });

  Document.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_name = map.containsKey('file_name') ? map['file_name'] : null;
    mime_type = map.containsKey('mime_type') ? map['mime_type'] : null;
    minithumbnail = map.containsKey('minithumbnail')
        ? TlMap.fromMap(map['minithumbnail']) as Minithumbnail
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
    document = map.containsKey('document')
        ? TlMap.fromMap(map['document']) as File
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_name': file_name?.toMap(skipNulls: skipNulls),
      'mime_type': mime_type?.toMap(skipNulls: skipNulls),
      'minithumbnail': minithumbnail?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'document': document?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Photo extends TdObject {
  String get tlType => 'photo';

  string? extra;
  int? client_id;
  Bool? has_stickers;
  Minithumbnail? minithumbnail;
  vector<PhotoSize>? sizes;

  Photo({
    string? this.extra,
    int? this.client_id,
    Bool? this.has_stickers,
    Minithumbnail? this.minithumbnail,
    vector<PhotoSize>? this.sizes,
  });

  Photo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    has_stickers = map.containsKey('has_stickers') ? map['has_stickers'] : null;
    minithumbnail = map.containsKey('minithumbnail')
        ? TlMap.fromMap(map['minithumbnail']) as Minithumbnail
        : null;
    if (map.containsKey('sizes') && map['sizes'] != null) {
      sizes = [];
      var someValues = map['sizes'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PhotoSize;
        sizes?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'has_stickers': has_stickers?.toMap(skipNulls: skipNulls),
      'minithumbnail': minithumbnail?.toMap(skipNulls: skipNulls),
      'sizes': sizes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Sticker extends TdObject {
  String get tlType => 'sticker';

  string? extra;
  int? client_id;
  int64? set_id;
  int32? width;
  int32? height;
  string? emoji;
  Bool? is_animated;
  Bool? is_mask;
  MaskPosition? mask_position;
  vector<ClosedVectorPath>? outline;
  Thumbnail? thumbnail;
  File? sticker;

  Sticker({
    string? this.extra,
    int? this.client_id,
    int64? this.set_id,
    int32? this.width,
    int32? this.height,
    string? this.emoji,
    Bool? this.is_animated,
    Bool? this.is_mask,
    MaskPosition? this.mask_position,
    vector<ClosedVectorPath>? this.outline,
    Thumbnail? this.thumbnail,
    File? this.sticker,
  });

  Sticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    set_id = map.containsKey('set_id') ? map['set_id'] : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
    is_animated = map.containsKey('is_animated') ? map['is_animated'] : null;
    is_mask = map.containsKey('is_mask') ? map['is_mask'] : null;
    mask_position = map.containsKey('mask_position')
        ? TlMap.fromMap(map['mask_position']) as MaskPosition
        : null;
    if (map.containsKey('outline') && map['outline'] != null) {
      outline = [];
      var someValues = map['outline'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ClosedVectorPath;
        outline?.add(obj);
      }
    }
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as File
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'set_id': set_id?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
      'is_animated': is_animated?.toMap(skipNulls: skipNulls),
      'is_mask': is_mask?.toMap(skipNulls: skipNulls),
      'mask_position': mask_position?.toMap(skipNulls: skipNulls),
      'outline': outline?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Video extends TdObject {
  String get tlType => 'video';

  string? extra;
  int? client_id;
  int32? duration;
  int32? width;
  int32? height;
  string? file_name;
  string? mime_type;
  Bool? has_stickers;
  Bool? supports_streaming;
  Minithumbnail? minithumbnail;
  Thumbnail? thumbnail;
  File? video;

  Video({
    string? this.extra,
    int? this.client_id,
    int32? this.duration,
    int32? this.width,
    int32? this.height,
    string? this.file_name,
    string? this.mime_type,
    Bool? this.has_stickers,
    Bool? this.supports_streaming,
    Minithumbnail? this.minithumbnail,
    Thumbnail? this.thumbnail,
    File? this.video,
  });

  Video.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    file_name = map.containsKey('file_name') ? map['file_name'] : null;
    mime_type = map.containsKey('mime_type') ? map['mime_type'] : null;
    has_stickers = map.containsKey('has_stickers') ? map['has_stickers'] : null;
    supports_streaming = map.containsKey('supports_streaming')
        ? map['supports_streaming']
        : null;
    minithumbnail = map.containsKey('minithumbnail')
        ? TlMap.fromMap(map['minithumbnail']) as Minithumbnail
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
    video =
        map.containsKey('video') ? TlMap.fromMap(map['video']) as File : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'file_name': file_name?.toMap(skipNulls: skipNulls),
      'mime_type': mime_type?.toMap(skipNulls: skipNulls),
      'has_stickers': has_stickers?.toMap(skipNulls: skipNulls),
      'supports_streaming': supports_streaming?.toMap(skipNulls: skipNulls),
      'minithumbnail': minithumbnail?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'video': video?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class VideoNote extends TdObject {
  String get tlType => 'videoNote';

  string? extra;
  int? client_id;
  int32? duration;
  int32? length;
  Minithumbnail? minithumbnail;
  Thumbnail? thumbnail;
  File? video;

  VideoNote({
    string? this.extra,
    int? this.client_id,
    int32? this.duration,
    int32? this.length,
    Minithumbnail? this.minithumbnail,
    Thumbnail? this.thumbnail,
    File? this.video,
  });

  VideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    length = map.containsKey('length') ? map['length'] : null;
    minithumbnail = map.containsKey('minithumbnail')
        ? TlMap.fromMap(map['minithumbnail']) as Minithumbnail
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
    video =
        map.containsKey('video') ? TlMap.fromMap(map['video']) as File : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
      'minithumbnail': minithumbnail?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'video': video?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class VoiceNote extends TdObject {
  String get tlType => 'voiceNote';

  string? extra;
  int? client_id;
  int32? duration;
  bytes? waveform;
  string? mime_type;
  File? voice;

  VoiceNote({
    string? this.extra,
    int? this.client_id,
    int32? this.duration,
    bytes? this.waveform,
    string? this.mime_type,
    File? this.voice,
  });

  VoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    waveform = map.containsKey('waveform') ? map['waveform'] : null;
    mime_type = map.containsKey('mime_type') ? map['mime_type'] : null;
    voice =
        map.containsKey('voice') ? TlMap.fromMap(map['voice']) as File : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'waveform': waveform?.toMap(skipNulls: skipNulls),
      'mime_type': mime_type?.toMap(skipNulls: skipNulls),
      'voice': voice?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AnimatedEmoji extends TdObject {
  String get tlType => 'animatedEmoji';

  string? extra;
  int? client_id;
  Sticker? sticker;
  int32? fitzpatrick_type;
  File? sound;

  AnimatedEmoji({
    string? this.extra,
    int? this.client_id,
    Sticker? this.sticker,
    int32? this.fitzpatrick_type,
    File? this.sound,
  });

  AnimatedEmoji.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as Sticker
        : null;
    fitzpatrick_type =
        map.containsKey('fitzpatrick_type') ? map['fitzpatrick_type'] : null;
    sound =
        map.containsKey('sound') ? TlMap.fromMap(map['sound']) as File : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
      'fitzpatrick_type': fitzpatrick_type?.toMap(skipNulls: skipNulls),
      'sound': sound?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Contact extends TdObject {
  String get tlType => 'contact';

  string? extra;
  int? client_id;
  string? phone_number;
  string? first_name;
  string? last_name;
  string? vcard;
  int53? user_id;

  Contact({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number,
    string? this.first_name,
    string? this.last_name,
    string? this.vcard,
    int53? this.user_id,
  });

  Contact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
    first_name = map.containsKey('first_name') ? map['first_name'] : null;
    last_name = map.containsKey('last_name') ? map['last_name'] : null;
    vcard = map.containsKey('vcard') ? map['vcard'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
      'first_name': first_name?.toMap(skipNulls: skipNulls),
      'last_name': last_name?.toMap(skipNulls: skipNulls),
      'vcard': vcard?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Location extends TdObject {
  String get tlType => 'location';

  string? extra;
  int? client_id;
  double? latitude;
  double? longitude;
  double? horizontal_accuracy;

  Location({
    string? this.extra,
    int? this.client_id,
    double? this.latitude,
    double? this.longitude,
    double? this.horizontal_accuracy,
  });

  Location.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    latitude = map.containsKey('latitude') ? map['latitude'] : null;
    longitude = map.containsKey('longitude') ? map['longitude'] : null;
    horizontal_accuracy = map.containsKey('horizontal_accuracy')
        ? map['horizontal_accuracy']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'latitude': latitude?.toMap(skipNulls: skipNulls),
      'longitude': longitude?.toMap(skipNulls: skipNulls),
      'horizontal_accuracy': horizontal_accuracy?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Venue extends TdObject {
  String get tlType => 'venue';

  string? extra;
  int? client_id;
  Location? location;
  string? title;
  string? address;
  string? provider;
  string? id;
  string? type;

  Venue({
    string? this.extra,
    int? this.client_id,
    Location? this.location,
    string? this.title,
    string? this.address,
    string? this.provider,
    string? this.id,
    string? this.type,
  });

  Venue.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    title = map.containsKey('title') ? map['title'] : null;
    address = map.containsKey('address') ? map['address'] : null;
    provider = map.containsKey('provider') ? map['provider'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    type = map.containsKey('type') ? map['type'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'address': address?.toMap(skipNulls: skipNulls),
      'provider': provider?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Game extends TdObject {
  String get tlType => 'game';

  string? extra;
  int? client_id;
  int64? id;
  string? short_name;
  string? title;
  FormattedText? text;
  string? description;
  Photo? photo;
  Animation? animation;

  Game({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    string? this.short_name,
    string? this.title,
    FormattedText? this.text,
    string? this.description,
    Photo? this.photo,
    Animation? this.animation,
  });

  Game.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    short_name = map.containsKey('short_name') ? map['short_name'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
    description = map.containsKey('description') ? map['description'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as Animation
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'short_name': short_name?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Poll extends TdObject {
  String get tlType => 'poll';

  string? extra;
  int? client_id;
  int64? id;
  string? question;
  vector<PollOption>? options;
  int32? total_voter_count;
  vector<int53>? recent_voter_user_ids;
  Bool? is_anonymous;
  PollType? type;
  int32? open_period;
  int32? close_date;
  Bool? is_closed;

  Poll({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    string? this.question,
    vector<PollOption>? this.options,
    int32? this.total_voter_count,
    vector<int53>? this.recent_voter_user_ids,
    Bool? this.is_anonymous,
    PollType? this.type,
    int32? this.open_period,
    int32? this.close_date,
    Bool? this.is_closed,
  });

  Poll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    question = map.containsKey('question') ? map['question'] : null;
    if (map.containsKey('options') && map['options'] != null) {
      options = [];
      var someValues = map['options'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PollOption;
        options?.add(obj);
      }
    }
    total_voter_count =
        map.containsKey('total_voter_count') ? map['total_voter_count'] : null;
    if (map.containsKey('recent_voter_user_ids') &&
        map['recent_voter_user_ids'] != null) {
      recent_voter_user_ids = [];
      var someValues = map['recent_voter_user_ids'];
      for (var someValue in someValues) {
        recent_voter_user_ids?.add(someValue);
      }
    }
    is_anonymous = map.containsKey('is_anonymous') ? map['is_anonymous'] : null;
    type =
        map.containsKey('type') ? TlMap.fromMap(map['type']) as PollType : null;
    open_period = map.containsKey('open_period') ? map['open_period'] : null;
    close_date = map.containsKey('close_date') ? map['close_date'] : null;
    is_closed = map.containsKey('is_closed') ? map['is_closed'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'question': question?.toMap(skipNulls: skipNulls),
      'options': options?.toMap(skipNulls: skipNulls),
      'total_voter_count': total_voter_count?.toMap(skipNulls: skipNulls),
      'recent_voter_user_ids':
          recent_voter_user_ids?.toMap(skipNulls: skipNulls),
      'is_anonymous': is_anonymous?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'open_period': open_period?.toMap(skipNulls: skipNulls),
      'close_date': close_date?.toMap(skipNulls: skipNulls),
      'is_closed': is_closed?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ProfilePhoto extends TdObject {
  String get tlType => 'profilePhoto';

  string? extra;
  int? client_id;
  int64? id;
  File? small;
  File? big;
  Minithumbnail? minithumbnail;
  Bool? has_animation;

  ProfilePhoto({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    File? this.small,
    File? this.big,
    Minithumbnail? this.minithumbnail,
    Bool? this.has_animation,
  });

  ProfilePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    small =
        map.containsKey('small') ? TlMap.fromMap(map['small']) as File : null;
    big = map.containsKey('big') ? TlMap.fromMap(map['big']) as File : null;
    minithumbnail = map.containsKey('minithumbnail')
        ? TlMap.fromMap(map['minithumbnail']) as Minithumbnail
        : null;
    has_animation =
        map.containsKey('has_animation') ? map['has_animation'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'small': small?.toMap(skipNulls: skipNulls),
      'big': big?.toMap(skipNulls: skipNulls),
      'minithumbnail': minithumbnail?.toMap(skipNulls: skipNulls),
      'has_animation': has_animation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatPhotoInfo extends TdObject {
  String get tlType => 'chatPhotoInfo';

  string? extra;
  int? client_id;
  File? small;
  File? big;
  Minithumbnail? minithumbnail;
  Bool? has_animation;

  ChatPhotoInfo({
    string? this.extra,
    int? this.client_id,
    File? this.small,
    File? this.big,
    Minithumbnail? this.minithumbnail,
    Bool? this.has_animation,
  });

  ChatPhotoInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    small =
        map.containsKey('small') ? TlMap.fromMap(map['small']) as File : null;
    big = map.containsKey('big') ? TlMap.fromMap(map['big']) as File : null;
    minithumbnail = map.containsKey('minithumbnail')
        ? TlMap.fromMap(map['minithumbnail']) as Minithumbnail
        : null;
    has_animation =
        map.containsKey('has_animation') ? map['has_animation'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'small': small?.toMap(skipNulls: skipNulls),
      'big': big?.toMap(skipNulls: skipNulls),
      'minithumbnail': minithumbnail?.toMap(skipNulls: skipNulls),
      'has_animation': has_animation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserTypeRegular extends UserType {
  String get tlType => 'userTypeRegular';

  string? extra;
  int? client_id;

  UserTypeRegular({
    string? this.extra,
    int? this.client_id,
  });

  UserTypeRegular.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserTypeDeleted extends UserType {
  String get tlType => 'userTypeDeleted';

  string? extra;
  int? client_id;

  UserTypeDeleted({
    string? this.extra,
    int? this.client_id,
  });

  UserTypeDeleted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserTypeBot extends UserType {
  String get tlType => 'userTypeBot';

  string? extra;
  int? client_id;
  Bool? can_join_groups;
  Bool? can_read_all_group_messages;
  Bool? is_inline;
  string? inline_query_placeholder;
  Bool? need_location;

  UserTypeBot({
    string? this.extra,
    int? this.client_id,
    Bool? this.can_join_groups,
    Bool? this.can_read_all_group_messages,
    Bool? this.is_inline,
    string? this.inline_query_placeholder,
    Bool? this.need_location,
  });

  UserTypeBot.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    can_join_groups =
        map.containsKey('can_join_groups') ? map['can_join_groups'] : null;
    can_read_all_group_messages = map.containsKey('can_read_all_group_messages')
        ? map['can_read_all_group_messages']
        : null;
    is_inline = map.containsKey('is_inline') ? map['is_inline'] : null;
    inline_query_placeholder = map.containsKey('inline_query_placeholder')
        ? map['inline_query_placeholder']
        : null;
    need_location =
        map.containsKey('need_location') ? map['need_location'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'can_join_groups': can_join_groups?.toMap(skipNulls: skipNulls),
      'can_read_all_group_messages':
          can_read_all_group_messages?.toMap(skipNulls: skipNulls),
      'is_inline': is_inline?.toMap(skipNulls: skipNulls),
      'inline_query_placeholder':
          inline_query_placeholder?.toMap(skipNulls: skipNulls),
      'need_location': need_location?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserTypeUnknown extends UserType {
  String get tlType => 'userTypeUnknown';

  string? extra;
  int? client_id;

  UserTypeUnknown({
    string? this.extra,
    int? this.client_id,
  });

  UserTypeUnknown.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommand extends TdObject {
  String get tlType => 'botCommand';

  string? extra;
  int? client_id;
  string? command;
  string? description;

  BotCommand({
    string? this.extra,
    int? this.client_id,
    string? this.command,
    string? this.description,
  });

  BotCommand.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    command = map.containsKey('command') ? map['command'] : null;
    description = map.containsKey('description') ? map['description'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'command': command?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommands extends TdObject {
  String get tlType => 'botCommands';

  string? extra;
  int? client_id;
  int53? bot_user_id;
  vector<BotCommand>? commands;

  BotCommands({
    string? this.extra,
    int? this.client_id,
    int53? this.bot_user_id,
    vector<BotCommand>? this.commands,
  });

  BotCommands.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_user_id = map.containsKey('bot_user_id') ? map['bot_user_id'] : null;
    if (map.containsKey('commands') && map['commands'] != null) {
      commands = [];
      var someValues = map['commands'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as BotCommand;
        commands?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_user_id': bot_user_id?.toMap(skipNulls: skipNulls),
      'commands': commands?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatLocation extends TdObject {
  String get tlType => 'chatLocation';

  string? extra;
  int? client_id;
  Location? location;
  string? address;

  ChatLocation({
    string? this.extra,
    int? this.client_id,
    Location? this.location,
    string? this.address,
  });

  ChatLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    address = map.containsKey('address') ? map['address'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'address': address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AnimatedChatPhoto extends TdObject {
  String get tlType => 'animatedChatPhoto';

  string? extra;
  int? client_id;
  int32? length;
  File? file;
  double? main_frame_timestamp;

  AnimatedChatPhoto({
    string? this.extra,
    int? this.client_id,
    int32? this.length,
    File? this.file,
    double? this.main_frame_timestamp,
  });

  AnimatedChatPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    length = map.containsKey('length') ? map['length'] : null;
    file = map.containsKey('file') ? TlMap.fromMap(map['file']) as File : null;
    main_frame_timestamp = map.containsKey('main_frame_timestamp')
        ? map['main_frame_timestamp']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
      'file': file?.toMap(skipNulls: skipNulls),
      'main_frame_timestamp': main_frame_timestamp?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatPhoto extends TdObject {
  String get tlType => 'chatPhoto';

  string? extra;
  int? client_id;
  int64? id;
  int32? added_date;
  Minithumbnail? minithumbnail;
  vector<PhotoSize>? sizes;
  AnimatedChatPhoto? animation;

  ChatPhoto({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    int32? this.added_date,
    Minithumbnail? this.minithumbnail,
    vector<PhotoSize>? this.sizes,
    AnimatedChatPhoto? this.animation,
  });

  ChatPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    added_date = map.containsKey('added_date') ? map['added_date'] : null;
    minithumbnail = map.containsKey('minithumbnail')
        ? TlMap.fromMap(map['minithumbnail']) as Minithumbnail
        : null;
    if (map.containsKey('sizes') && map['sizes'] != null) {
      sizes = [];
      var someValues = map['sizes'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PhotoSize;
        sizes?.add(obj);
      }
    }
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as AnimatedChatPhoto
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'added_date': added_date?.toMap(skipNulls: skipNulls),
      'minithumbnail': minithumbnail?.toMap(skipNulls: skipNulls),
      'sizes': sizes?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatPhotos extends TdObject {
  String get tlType => 'chatPhotos';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<ChatPhoto>? photos;

  ChatPhotos({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<ChatPhoto>? this.photos,
  });

  ChatPhotos.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('photos') && map['photos'] != null) {
      photos = [];
      var someValues = map['photos'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatPhoto;
        photos?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'photos': photos?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputChatPhotoPrevious extends InputChatPhoto {
  String get tlType => 'inputChatPhotoPrevious';

  string? extra;
  int? client_id;
  int64? chat_photo_id;

  InputChatPhotoPrevious({
    string? this.extra,
    int? this.client_id,
    int64? this.chat_photo_id,
  });

  InputChatPhotoPrevious.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_photo_id =
        map.containsKey('chat_photo_id') ? map['chat_photo_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_photo_id': chat_photo_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputChatPhotoStatic extends InputChatPhoto {
  String get tlType => 'inputChatPhotoStatic';

  string? extra;
  int? client_id;
  InputFile? photo;

  InputChatPhotoStatic({
    string? this.extra,
    int? this.client_id,
    InputFile? this.photo,
  });

  InputChatPhotoStatic.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputChatPhotoAnimation extends InputChatPhoto {
  String get tlType => 'inputChatPhotoAnimation';

  string? extra;
  int? client_id;
  InputFile? animation;
  double? main_frame_timestamp;

  InputChatPhotoAnimation({
    string? this.extra,
    int? this.client_id,
    InputFile? this.animation,
    double? this.main_frame_timestamp,
  });

  InputChatPhotoAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as InputFile
        : null;
    main_frame_timestamp = map.containsKey('main_frame_timestamp')
        ? map['main_frame_timestamp']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
      'main_frame_timestamp': main_frame_timestamp?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class User extends TdObject {
  String get tlType => 'user';

  string? extra;
  int? client_id;
  int53? id;
  string? first_name;
  string? last_name;
  string? username;
  string? phone_number;
  UserStatus? status;
  ProfilePhoto? profile_photo;
  Bool? is_contact;
  Bool? is_mutual_contact;
  Bool? is_verified;
  Bool? is_support;
  string? restriction_reason;
  Bool? is_scam;
  Bool? is_fake;
  Bool? have_access;
  UserType? type;
  string? language_code;

  User({
    string? this.extra,
    int? this.client_id,
    int53? this.id,
    string? this.first_name,
    string? this.last_name,
    string? this.username,
    string? this.phone_number,
    UserStatus? this.status,
    ProfilePhoto? this.profile_photo,
    Bool? this.is_contact,
    Bool? this.is_mutual_contact,
    Bool? this.is_verified,
    Bool? this.is_support,
    string? this.restriction_reason,
    Bool? this.is_scam,
    Bool? this.is_fake,
    Bool? this.have_access,
    UserType? this.type,
    string? this.language_code,
  });

  User.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    first_name = map.containsKey('first_name') ? map['first_name'] : null;
    last_name = map.containsKey('last_name') ? map['last_name'] : null;
    username = map.containsKey('username') ? map['username'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
    status = map.containsKey('status')
        ? TlMap.fromMap(map['status']) as UserStatus
        : null;
    profile_photo = map.containsKey('profile_photo')
        ? TlMap.fromMap(map['profile_photo']) as ProfilePhoto
        : null;
    is_contact = map.containsKey('is_contact') ? map['is_contact'] : null;
    is_mutual_contact =
        map.containsKey('is_mutual_contact') ? map['is_mutual_contact'] : null;
    is_verified = map.containsKey('is_verified') ? map['is_verified'] : null;
    is_support = map.containsKey('is_support') ? map['is_support'] : null;
    restriction_reason = map.containsKey('restriction_reason')
        ? map['restriction_reason']
        : null;
    is_scam = map.containsKey('is_scam') ? map['is_scam'] : null;
    is_fake = map.containsKey('is_fake') ? map['is_fake'] : null;
    have_access = map.containsKey('have_access') ? map['have_access'] : null;
    type =
        map.containsKey('type') ? TlMap.fromMap(map['type']) as UserType : null;
    language_code =
        map.containsKey('language_code') ? map['language_code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'first_name': first_name?.toMap(skipNulls: skipNulls),
      'last_name': last_name?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
      'status': status?.toMap(skipNulls: skipNulls),
      'profile_photo': profile_photo?.toMap(skipNulls: skipNulls),
      'is_contact': is_contact?.toMap(skipNulls: skipNulls),
      'is_mutual_contact': is_mutual_contact?.toMap(skipNulls: skipNulls),
      'is_verified': is_verified?.toMap(skipNulls: skipNulls),
      'is_support': is_support?.toMap(skipNulls: skipNulls),
      'restriction_reason': restriction_reason?.toMap(skipNulls: skipNulls),
      'is_scam': is_scam?.toMap(skipNulls: skipNulls),
      'is_fake': is_fake?.toMap(skipNulls: skipNulls),
      'have_access': have_access?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'language_code': language_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserFullInfo extends TdObject {
  String get tlType => 'userFullInfo';

  string? extra;
  int? client_id;
  ChatPhoto? photo;
  Bool? is_blocked;
  Bool? can_be_called;
  Bool? supports_video_calls;
  Bool? has_private_calls;
  Bool? has_private_forwards;
  Bool? need_phone_number_privacy_exception;
  string? bio;
  string? share_text;
  string? description;
  int32? group_in_common_count;
  vector<BotCommand>? commands;

  UserFullInfo({
    string? this.extra,
    int? this.client_id,
    ChatPhoto? this.photo,
    Bool? this.is_blocked,
    Bool? this.can_be_called,
    Bool? this.supports_video_calls,
    Bool? this.has_private_calls,
    Bool? this.has_private_forwards,
    Bool? this.need_phone_number_privacy_exception,
    string? this.bio,
    string? this.share_text,
    string? this.description,
    int32? this.group_in_common_count,
    vector<BotCommand>? this.commands,
  });

  UserFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as ChatPhoto
        : null;
    is_blocked = map.containsKey('is_blocked') ? map['is_blocked'] : null;
    can_be_called =
        map.containsKey('can_be_called') ? map['can_be_called'] : null;
    supports_video_calls = map.containsKey('supports_video_calls')
        ? map['supports_video_calls']
        : null;
    has_private_calls =
        map.containsKey('has_private_calls') ? map['has_private_calls'] : null;
    has_private_forwards = map.containsKey('has_private_forwards')
        ? map['has_private_forwards']
        : null;
    need_phone_number_privacy_exception =
        map.containsKey('need_phone_number_privacy_exception')
            ? map['need_phone_number_privacy_exception']
            : null;
    bio = map.containsKey('bio') ? map['bio'] : null;
    share_text = map.containsKey('share_text') ? map['share_text'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    group_in_common_count = map.containsKey('group_in_common_count')
        ? map['group_in_common_count']
        : null;
    if (map.containsKey('commands') && map['commands'] != null) {
      commands = [];
      var someValues = map['commands'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as BotCommand;
        commands?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'is_blocked': is_blocked?.toMap(skipNulls: skipNulls),
      'can_be_called': can_be_called?.toMap(skipNulls: skipNulls),
      'supports_video_calls': supports_video_calls?.toMap(skipNulls: skipNulls),
      'has_private_calls': has_private_calls?.toMap(skipNulls: skipNulls),
      'has_private_forwards': has_private_forwards?.toMap(skipNulls: skipNulls),
      'need_phone_number_privacy_exception':
          need_phone_number_privacy_exception?.toMap(skipNulls: skipNulls),
      'bio': bio?.toMap(skipNulls: skipNulls),
      'share_text': share_text?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'group_in_common_count':
          group_in_common_count?.toMap(skipNulls: skipNulls),
      'commands': commands?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Users extends TdObject {
  String get tlType => 'users';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<int53>? user_ids;

  Users({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<int53>? this.user_ids,
  });

  Users.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatAdministrator extends TdObject {
  String get tlType => 'chatAdministrator';

  string? extra;
  int? client_id;
  int53? user_id;
  string? custom_title;
  Bool? is_owner;

  ChatAdministrator({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    string? this.custom_title,
    Bool? this.is_owner,
  });

  ChatAdministrator.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    custom_title = map.containsKey('custom_title') ? map['custom_title'] : null;
    is_owner = map.containsKey('is_owner') ? map['is_owner'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'custom_title': custom_title?.toMap(skipNulls: skipNulls),
      'is_owner': is_owner?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatAdministrators extends TdObject {
  String get tlType => 'chatAdministrators';

  string? extra;
  int? client_id;
  vector<ChatAdministrator>? administrators;

  ChatAdministrators({
    string? this.extra,
    int? this.client_id,
    vector<ChatAdministrator>? this.administrators,
  });

  ChatAdministrators.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('administrators') && map['administrators'] != null) {
      administrators = [];
      var someValues = map['administrators'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatAdministrator;
        administrators?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'administrators': administrators?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatPermissions extends TdObject {
  String get tlType => 'chatPermissions';

  string? extra;
  int? client_id;
  Bool? can_send_messages;
  Bool? can_send_media_messages;
  Bool? can_send_polls;
  Bool? can_send_other_messages;
  Bool? can_add_web_page_previews;
  Bool? can_change_info;
  Bool? can_invite_users;
  Bool? can_pin_messages;

  ChatPermissions({
    string? this.extra,
    int? this.client_id,
    Bool? this.can_send_messages,
    Bool? this.can_send_media_messages,
    Bool? this.can_send_polls,
    Bool? this.can_send_other_messages,
    Bool? this.can_add_web_page_previews,
    Bool? this.can_change_info,
    Bool? this.can_invite_users,
    Bool? this.can_pin_messages,
  });

  ChatPermissions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    can_send_messages =
        map.containsKey('can_send_messages') ? map['can_send_messages'] : null;
    can_send_media_messages = map.containsKey('can_send_media_messages')
        ? map['can_send_media_messages']
        : null;
    can_send_polls =
        map.containsKey('can_send_polls') ? map['can_send_polls'] : null;
    can_send_other_messages = map.containsKey('can_send_other_messages')
        ? map['can_send_other_messages']
        : null;
    can_add_web_page_previews = map.containsKey('can_add_web_page_previews')
        ? map['can_add_web_page_previews']
        : null;
    can_change_info =
        map.containsKey('can_change_info') ? map['can_change_info'] : null;
    can_invite_users =
        map.containsKey('can_invite_users') ? map['can_invite_users'] : null;
    can_pin_messages =
        map.containsKey('can_pin_messages') ? map['can_pin_messages'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'can_send_messages': can_send_messages?.toMap(skipNulls: skipNulls),
      'can_send_media_messages':
          can_send_media_messages?.toMap(skipNulls: skipNulls),
      'can_send_polls': can_send_polls?.toMap(skipNulls: skipNulls),
      'can_send_other_messages':
          can_send_other_messages?.toMap(skipNulls: skipNulls),
      'can_add_web_page_previews':
          can_add_web_page_previews?.toMap(skipNulls: skipNulls),
      'can_change_info': can_change_info?.toMap(skipNulls: skipNulls),
      'can_invite_users': can_invite_users?.toMap(skipNulls: skipNulls),
      'can_pin_messages': can_pin_messages?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMemberStatusCreator extends ChatMemberStatus {
  String get tlType => 'chatMemberStatusCreator';

  string? extra;
  int? client_id;
  string? custom_title;
  Bool? is_anonymous;
  Bool? is_member;

  ChatMemberStatusCreator({
    string? this.extra,
    int? this.client_id,
    string? this.custom_title,
    Bool? this.is_anonymous,
    Bool? this.is_member,
  });

  ChatMemberStatusCreator.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    custom_title = map.containsKey('custom_title') ? map['custom_title'] : null;
    is_anonymous = map.containsKey('is_anonymous') ? map['is_anonymous'] : null;
    is_member = map.containsKey('is_member') ? map['is_member'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'custom_title': custom_title?.toMap(skipNulls: skipNulls),
      'is_anonymous': is_anonymous?.toMap(skipNulls: skipNulls),
      'is_member': is_member?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMemberStatusAdministrator extends ChatMemberStatus {
  String get tlType => 'chatMemberStatusAdministrator';

  string? extra;
  int? client_id;
  string? custom_title;
  Bool? can_be_edited;
  Bool? can_manage_chat;
  Bool? can_change_info;
  Bool? can_post_messages;
  Bool? can_edit_messages;
  Bool? can_delete_messages;
  Bool? can_invite_users;
  Bool? can_restrict_members;
  Bool? can_pin_messages;
  Bool? can_promote_members;
  Bool? can_manage_video_chats;
  Bool? is_anonymous;

  ChatMemberStatusAdministrator({
    string? this.extra,
    int? this.client_id,
    string? this.custom_title,
    Bool? this.can_be_edited,
    Bool? this.can_manage_chat,
    Bool? this.can_change_info,
    Bool? this.can_post_messages,
    Bool? this.can_edit_messages,
    Bool? this.can_delete_messages,
    Bool? this.can_invite_users,
    Bool? this.can_restrict_members,
    Bool? this.can_pin_messages,
    Bool? this.can_promote_members,
    Bool? this.can_manage_video_chats,
    Bool? this.is_anonymous,
  });

  ChatMemberStatusAdministrator.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    custom_title = map.containsKey('custom_title') ? map['custom_title'] : null;
    can_be_edited =
        map.containsKey('can_be_edited') ? map['can_be_edited'] : null;
    can_manage_chat =
        map.containsKey('can_manage_chat') ? map['can_manage_chat'] : null;
    can_change_info =
        map.containsKey('can_change_info') ? map['can_change_info'] : null;
    can_post_messages =
        map.containsKey('can_post_messages') ? map['can_post_messages'] : null;
    can_edit_messages =
        map.containsKey('can_edit_messages') ? map['can_edit_messages'] : null;
    can_delete_messages = map.containsKey('can_delete_messages')
        ? map['can_delete_messages']
        : null;
    can_invite_users =
        map.containsKey('can_invite_users') ? map['can_invite_users'] : null;
    can_restrict_members = map.containsKey('can_restrict_members')
        ? map['can_restrict_members']
        : null;
    can_pin_messages =
        map.containsKey('can_pin_messages') ? map['can_pin_messages'] : null;
    can_promote_members = map.containsKey('can_promote_members')
        ? map['can_promote_members']
        : null;
    can_manage_video_chats = map.containsKey('can_manage_video_chats')
        ? map['can_manage_video_chats']
        : null;
    is_anonymous = map.containsKey('is_anonymous') ? map['is_anonymous'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'custom_title': custom_title?.toMap(skipNulls: skipNulls),
      'can_be_edited': can_be_edited?.toMap(skipNulls: skipNulls),
      'can_manage_chat': can_manage_chat?.toMap(skipNulls: skipNulls),
      'can_change_info': can_change_info?.toMap(skipNulls: skipNulls),
      'can_post_messages': can_post_messages?.toMap(skipNulls: skipNulls),
      'can_edit_messages': can_edit_messages?.toMap(skipNulls: skipNulls),
      'can_delete_messages': can_delete_messages?.toMap(skipNulls: skipNulls),
      'can_invite_users': can_invite_users?.toMap(skipNulls: skipNulls),
      'can_restrict_members': can_restrict_members?.toMap(skipNulls: skipNulls),
      'can_pin_messages': can_pin_messages?.toMap(skipNulls: skipNulls),
      'can_promote_members': can_promote_members?.toMap(skipNulls: skipNulls),
      'can_manage_video_chats':
          can_manage_video_chats?.toMap(skipNulls: skipNulls),
      'is_anonymous': is_anonymous?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMemberStatusMember extends ChatMemberStatus {
  String get tlType => 'chatMemberStatusMember';

  string? extra;
  int? client_id;

  ChatMemberStatusMember({
    string? this.extra,
    int? this.client_id,
  });

  ChatMemberStatusMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMemberStatusRestricted extends ChatMemberStatus {
  String get tlType => 'chatMemberStatusRestricted';

  string? extra;
  int? client_id;
  Bool? is_member;
  int32? restricted_until_date;
  ChatPermissions? permissions;

  ChatMemberStatusRestricted({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_member,
    int32? this.restricted_until_date,
    ChatPermissions? this.permissions,
  });

  ChatMemberStatusRestricted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_member = map.containsKey('is_member') ? map['is_member'] : null;
    restricted_until_date = map.containsKey('restricted_until_date')
        ? map['restricted_until_date']
        : null;
    permissions = map.containsKey('permissions')
        ? TlMap.fromMap(map['permissions']) as ChatPermissions
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_member': is_member?.toMap(skipNulls: skipNulls),
      'restricted_until_date':
          restricted_until_date?.toMap(skipNulls: skipNulls),
      'permissions': permissions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMemberStatusLeft extends ChatMemberStatus {
  String get tlType => 'chatMemberStatusLeft';

  string? extra;
  int? client_id;

  ChatMemberStatusLeft({
    string? this.extra,
    int? this.client_id,
  });

  ChatMemberStatusLeft.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMemberStatusBanned extends ChatMemberStatus {
  String get tlType => 'chatMemberStatusBanned';

  string? extra;
  int? client_id;
  int32? banned_until_date;

  ChatMemberStatusBanned({
    string? this.extra,
    int? this.client_id,
    int32? this.banned_until_date,
  });

  ChatMemberStatusBanned.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    banned_until_date =
        map.containsKey('banned_until_date') ? map['banned_until_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'banned_until_date': banned_until_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMember extends TdObject {
  String get tlType => 'chatMember';

  string? extra;
  int? client_id;
  MessageSender? member_id;
  int53? inviter_user_id;
  int32? joined_chat_date;
  ChatMemberStatus? status;

  ChatMember({
    string? this.extra,
    int? this.client_id,
    MessageSender? this.member_id,
    int53? this.inviter_user_id,
    int32? this.joined_chat_date,
    ChatMemberStatus? this.status,
  });

  ChatMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    member_id = map.containsKey('member_id')
        ? TlMap.fromMap(map['member_id']) as MessageSender
        : null;
    inviter_user_id =
        map.containsKey('inviter_user_id') ? map['inviter_user_id'] : null;
    joined_chat_date =
        map.containsKey('joined_chat_date') ? map['joined_chat_date'] : null;
    status = map.containsKey('status')
        ? TlMap.fromMap(map['status']) as ChatMemberStatus
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'member_id': member_id?.toMap(skipNulls: skipNulls),
      'inviter_user_id': inviter_user_id?.toMap(skipNulls: skipNulls),
      'joined_chat_date': joined_chat_date?.toMap(skipNulls: skipNulls),
      'status': status?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMembers extends TdObject {
  String get tlType => 'chatMembers';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<ChatMember>? members;

  ChatMembers({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<ChatMember>? this.members,
  });

  ChatMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('members') && map['members'] != null) {
      members = [];
      var someValues = map['members'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatMember;
        members?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'members': members?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMembersFilterContacts extends ChatMembersFilter {
  String get tlType => 'chatMembersFilterContacts';

  string? extra;
  int? client_id;

  ChatMembersFilterContacts({
    string? this.extra,
    int? this.client_id,
  });

  ChatMembersFilterContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMembersFilterAdministrators extends ChatMembersFilter {
  String get tlType => 'chatMembersFilterAdministrators';

  string? extra;
  int? client_id;

  ChatMembersFilterAdministrators({
    string? this.extra,
    int? this.client_id,
  });

  ChatMembersFilterAdministrators.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMembersFilterMembers extends ChatMembersFilter {
  String get tlType => 'chatMembersFilterMembers';

  string? extra;
  int? client_id;

  ChatMembersFilterMembers({
    string? this.extra,
    int? this.client_id,
  });

  ChatMembersFilterMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMembersFilterMention extends ChatMembersFilter {
  String get tlType => 'chatMembersFilterMention';

  string? extra;
  int? client_id;
  int53? message_thread_id;

  ChatMembersFilterMention({
    string? this.extra,
    int? this.client_id,
    int53? this.message_thread_id,
  });

  ChatMembersFilterMention.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMembersFilterRestricted extends ChatMembersFilter {
  String get tlType => 'chatMembersFilterRestricted';

  string? extra;
  int? client_id;

  ChatMembersFilterRestricted({
    string? this.extra,
    int? this.client_id,
  });

  ChatMembersFilterRestricted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMembersFilterBanned extends ChatMembersFilter {
  String get tlType => 'chatMembersFilterBanned';

  string? extra;
  int? client_id;

  ChatMembersFilterBanned({
    string? this.extra,
    int? this.client_id,
  });

  ChatMembersFilterBanned.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatMembersFilterBots extends ChatMembersFilter {
  String get tlType => 'chatMembersFilterBots';

  string? extra;
  int? client_id;

  ChatMembersFilterBots({
    string? this.extra,
    int? this.client_id,
  });

  ChatMembersFilterBots.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupMembersFilterRecent extends SupergroupMembersFilter {
  String get tlType => 'supergroupMembersFilterRecent';

  string? extra;
  int? client_id;

  SupergroupMembersFilterRecent({
    string? this.extra,
    int? this.client_id,
  });

  SupergroupMembersFilterRecent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupMembersFilterContacts extends SupergroupMembersFilter {
  String get tlType => 'supergroupMembersFilterContacts';

  string? extra;
  int? client_id;
  string? query;

  SupergroupMembersFilterContacts({
    string? this.extra,
    int? this.client_id,
    string? this.query,
  });

  SupergroupMembersFilterContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupMembersFilterAdministrators extends SupergroupMembersFilter {
  String get tlType => 'supergroupMembersFilterAdministrators';

  string? extra;
  int? client_id;

  SupergroupMembersFilterAdministrators({
    string? this.extra,
    int? this.client_id,
  });

  SupergroupMembersFilterAdministrators.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupMembersFilterSearch extends SupergroupMembersFilter {
  String get tlType => 'supergroupMembersFilterSearch';

  string? extra;
  int? client_id;
  string? query;

  SupergroupMembersFilterSearch({
    string? this.extra,
    int? this.client_id,
    string? this.query,
  });

  SupergroupMembersFilterSearch.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupMembersFilterRestricted extends SupergroupMembersFilter {
  String get tlType => 'supergroupMembersFilterRestricted';

  string? extra;
  int? client_id;
  string? query;

  SupergroupMembersFilterRestricted({
    string? this.extra,
    int? this.client_id,
    string? this.query,
  });

  SupergroupMembersFilterRestricted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupMembersFilterBanned extends SupergroupMembersFilter {
  String get tlType => 'supergroupMembersFilterBanned';

  string? extra;
  int? client_id;
  string? query;

  SupergroupMembersFilterBanned({
    string? this.extra,
    int? this.client_id,
    string? this.query,
  });

  SupergroupMembersFilterBanned.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupMembersFilterMention extends SupergroupMembersFilter {
  String get tlType => 'supergroupMembersFilterMention';

  string? extra;
  int? client_id;
  string? query;
  int53? message_thread_id;

  SupergroupMembersFilterMention({
    string? this.extra,
    int? this.client_id,
    string? this.query,
    int53? this.message_thread_id,
  });

  SupergroupMembersFilterMention.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupMembersFilterBots extends SupergroupMembersFilter {
  String get tlType => 'supergroupMembersFilterBots';

  string? extra;
  int? client_id;

  SupergroupMembersFilterBots({
    string? this.extra,
    int? this.client_id,
  });

  SupergroupMembersFilterBots.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatInviteLink extends TdObject {
  String get tlType => 'chatInviteLink';

  string? extra;
  int? client_id;
  string? invite_link;
  string? name;
  int53? creator_user_id;
  int32? date;
  int32? edit_date;
  int32? expiration_date;
  int32? member_limit;
  int32? member_count;
  int32? pending_join_request_count;
  Bool? creates_join_request;
  Bool? is_primary;
  Bool? is_revoked;

  ChatInviteLink({
    string? this.extra,
    int? this.client_id,
    string? this.invite_link,
    string? this.name,
    int53? this.creator_user_id,
    int32? this.date,
    int32? this.edit_date,
    int32? this.expiration_date,
    int32? this.member_limit,
    int32? this.member_count,
    int32? this.pending_join_request_count,
    Bool? this.creates_join_request,
    Bool? this.is_primary,
    Bool? this.is_revoked,
  });

  ChatInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    creator_user_id =
        map.containsKey('creator_user_id') ? map['creator_user_id'] : null;
    date = map.containsKey('date') ? map['date'] : null;
    edit_date = map.containsKey('edit_date') ? map['edit_date'] : null;
    expiration_date =
        map.containsKey('expiration_date') ? map['expiration_date'] : null;
    member_limit = map.containsKey('member_limit') ? map['member_limit'] : null;
    member_count = map.containsKey('member_count') ? map['member_count'] : null;
    pending_join_request_count = map.containsKey('pending_join_request_count')
        ? map['pending_join_request_count']
        : null;
    creates_join_request = map.containsKey('creates_join_request')
        ? map['creates_join_request']
        : null;
    is_primary = map.containsKey('is_primary') ? map['is_primary'] : null;
    is_revoked = map.containsKey('is_revoked') ? map['is_revoked'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'creator_user_id': creator_user_id?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'edit_date': edit_date?.toMap(skipNulls: skipNulls),
      'expiration_date': expiration_date?.toMap(skipNulls: skipNulls),
      'member_limit': member_limit?.toMap(skipNulls: skipNulls),
      'member_count': member_count?.toMap(skipNulls: skipNulls),
      'pending_join_request_count':
          pending_join_request_count?.toMap(skipNulls: skipNulls),
      'creates_join_request': creates_join_request?.toMap(skipNulls: skipNulls),
      'is_primary': is_primary?.toMap(skipNulls: skipNulls),
      'is_revoked': is_revoked?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatInviteLinks extends TdObject {
  String get tlType => 'chatInviteLinks';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<ChatInviteLink>? invite_links;

  ChatInviteLinks({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<ChatInviteLink>? this.invite_links,
  });

  ChatInviteLinks.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('invite_links') && map['invite_links'] != null) {
      invite_links = [];
      var someValues = map['invite_links'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatInviteLink;
        invite_links?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'invite_links': invite_links?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatInviteLinkCount extends TdObject {
  String get tlType => 'chatInviteLinkCount';

  string? extra;
  int? client_id;
  int53? user_id;
  int32? invite_link_count;
  int32? revoked_invite_link_count;

  ChatInviteLinkCount({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    int32? this.invite_link_count,
    int32? this.revoked_invite_link_count,
  });

  ChatInviteLinkCount.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    invite_link_count =
        map.containsKey('invite_link_count') ? map['invite_link_count'] : null;
    revoked_invite_link_count = map.containsKey('revoked_invite_link_count')
        ? map['revoked_invite_link_count']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'invite_link_count': invite_link_count?.toMap(skipNulls: skipNulls),
      'revoked_invite_link_count':
          revoked_invite_link_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatInviteLinkCounts extends TdObject {
  String get tlType => 'chatInviteLinkCounts';

  string? extra;
  int? client_id;
  vector<ChatInviteLinkCount>? invite_link_counts;

  ChatInviteLinkCounts({
    string? this.extra,
    int? this.client_id,
    vector<ChatInviteLinkCount>? this.invite_link_counts,
  });

  ChatInviteLinkCounts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('invite_link_counts') &&
        map['invite_link_counts'] != null) {
      invite_link_counts = [];
      var someValues = map['invite_link_counts'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatInviteLinkCount;
        invite_link_counts?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invite_link_counts': invite_link_counts?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatInviteLinkMember extends TdObject {
  String get tlType => 'chatInviteLinkMember';

  string? extra;
  int? client_id;
  int53? user_id;
  int32? joined_chat_date;
  int53? approver_user_id;

  ChatInviteLinkMember({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    int32? this.joined_chat_date,
    int53? this.approver_user_id,
  });

  ChatInviteLinkMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    joined_chat_date =
        map.containsKey('joined_chat_date') ? map['joined_chat_date'] : null;
    approver_user_id =
        map.containsKey('approver_user_id') ? map['approver_user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'joined_chat_date': joined_chat_date?.toMap(skipNulls: skipNulls),
      'approver_user_id': approver_user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatInviteLinkMembers extends TdObject {
  String get tlType => 'chatInviteLinkMembers';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<ChatInviteLinkMember>? members;

  ChatInviteLinkMembers({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<ChatInviteLinkMember>? this.members,
  });

  ChatInviteLinkMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('members') && map['members'] != null) {
      members = [];
      var someValues = map['members'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatInviteLinkMember;
        members?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'members': members?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatInviteLinkInfo extends TdObject {
  String get tlType => 'chatInviteLinkInfo';

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? accessible_for;
  ChatType? type;
  string? title;
  ChatPhotoInfo? photo;
  string? description;
  int32? member_count;
  vector<int53>? member_user_ids;
  Bool? creates_join_request;
  Bool? is_public;

  ChatInviteLinkInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.accessible_for,
    ChatType? this.type,
    string? this.title,
    ChatPhotoInfo? this.photo,
    string? this.description,
    int32? this.member_count,
    vector<int53>? this.member_user_ids,
    Bool? this.creates_join_request,
    Bool? this.is_public,
  });

  ChatInviteLinkInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    accessible_for =
        map.containsKey('accessible_for') ? map['accessible_for'] : null;
    type =
        map.containsKey('type') ? TlMap.fromMap(map['type']) as ChatType : null;
    title = map.containsKey('title') ? map['title'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as ChatPhotoInfo
        : null;
    description = map.containsKey('description') ? map['description'] : null;
    member_count = map.containsKey('member_count') ? map['member_count'] : null;
    if (map.containsKey('member_user_ids') && map['member_user_ids'] != null) {
      member_user_ids = [];
      var someValues = map['member_user_ids'];
      for (var someValue in someValues) {
        member_user_ids?.add(someValue);
      }
    }
    creates_join_request = map.containsKey('creates_join_request')
        ? map['creates_join_request']
        : null;
    is_public = map.containsKey('is_public') ? map['is_public'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'accessible_for': accessible_for?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'member_count': member_count?.toMap(skipNulls: skipNulls),
      'member_user_ids': member_user_ids?.toMap(skipNulls: skipNulls),
      'creates_join_request': creates_join_request?.toMap(skipNulls: skipNulls),
      'is_public': is_public?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatJoinRequest extends TdObject {
  String get tlType => 'chatJoinRequest';

  string? extra;
  int? client_id;
  int53? user_id;
  int32? date;
  string? bio;

  ChatJoinRequest({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    int32? this.date,
    string? this.bio,
  });

  ChatJoinRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    date = map.containsKey('date') ? map['date'] : null;
    bio = map.containsKey('bio') ? map['bio'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'bio': bio?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatJoinRequests extends TdObject {
  String get tlType => 'chatJoinRequests';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<ChatJoinRequest>? requests;

  ChatJoinRequests({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<ChatJoinRequest>? this.requests,
  });

  ChatJoinRequests.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('requests') && map['requests'] != null) {
      requests = [];
      var someValues = map['requests'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatJoinRequest;
        requests?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'requests': requests?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatJoinRequestsInfo extends TdObject {
  String get tlType => 'chatJoinRequestsInfo';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<int53>? user_ids;

  ChatJoinRequestsInfo({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<int53>? this.user_ids,
  });

  ChatJoinRequestsInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BasicGroup extends TdObject {
  String get tlType => 'basicGroup';

  string? extra;
  int? client_id;
  int53? id;
  int32? member_count;
  ChatMemberStatus? status;
  Bool? is_active;
  int53? upgraded_to_supergroup_id;

  BasicGroup({
    string? this.extra,
    int? this.client_id,
    int53? this.id,
    int32? this.member_count,
    ChatMemberStatus? this.status,
    Bool? this.is_active,
    int53? this.upgraded_to_supergroup_id,
  });

  BasicGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    member_count = map.containsKey('member_count') ? map['member_count'] : null;
    status = map.containsKey('status')
        ? TlMap.fromMap(map['status']) as ChatMemberStatus
        : null;
    is_active = map.containsKey('is_active') ? map['is_active'] : null;
    upgraded_to_supergroup_id = map.containsKey('upgraded_to_supergroup_id')
        ? map['upgraded_to_supergroup_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'member_count': member_count?.toMap(skipNulls: skipNulls),
      'status': status?.toMap(skipNulls: skipNulls),
      'is_active': is_active?.toMap(skipNulls: skipNulls),
      'upgraded_to_supergroup_id':
          upgraded_to_supergroup_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BasicGroupFullInfo extends TdObject {
  String get tlType => 'basicGroupFullInfo';

  string? extra;
  int? client_id;
  ChatPhoto? photo;
  string? description;
  int53? creator_user_id;
  vector<ChatMember>? members;
  ChatInviteLink? invite_link;
  vector<BotCommands>? bot_commands;

  BasicGroupFullInfo({
    string? this.extra,
    int? this.client_id,
    ChatPhoto? this.photo,
    string? this.description,
    int53? this.creator_user_id,
    vector<ChatMember>? this.members,
    ChatInviteLink? this.invite_link,
    vector<BotCommands>? this.bot_commands,
  });

  BasicGroupFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as ChatPhoto
        : null;
    description = map.containsKey('description') ? map['description'] : null;
    creator_user_id =
        map.containsKey('creator_user_id') ? map['creator_user_id'] : null;
    if (map.containsKey('members') && map['members'] != null) {
      members = [];
      var someValues = map['members'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatMember;
        members?.add(obj);
      }
    }
    invite_link = map.containsKey('invite_link')
        ? TlMap.fromMap(map['invite_link']) as ChatInviteLink
        : null;
    if (map.containsKey('bot_commands') && map['bot_commands'] != null) {
      bot_commands = [];
      var someValues = map['bot_commands'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as BotCommands;
        bot_commands?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'creator_user_id': creator_user_id?.toMap(skipNulls: skipNulls),
      'members': members?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
      'bot_commands': bot_commands?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Supergroup extends TdObject {
  String get tlType => 'supergroup';

  string? extra;
  int? client_id;
  int53? id;
  string? username;
  int32? date;
  ChatMemberStatus? status;
  int32? member_count;
  Bool? has_linked_chat;
  Bool? has_location;
  Bool? sign_messages;
  Bool? is_slow_mode_enabled;
  Bool? is_channel;
  Bool? is_broadcast_group;
  Bool? is_verified;
  string? restriction_reason;
  Bool? is_scam;
  Bool? is_fake;

  Supergroup({
    string? this.extra,
    int? this.client_id,
    int53? this.id,
    string? this.username,
    int32? this.date,
    ChatMemberStatus? this.status,
    int32? this.member_count,
    Bool? this.has_linked_chat,
    Bool? this.has_location,
    Bool? this.sign_messages,
    Bool? this.is_slow_mode_enabled,
    Bool? this.is_channel,
    Bool? this.is_broadcast_group,
    Bool? this.is_verified,
    string? this.restriction_reason,
    Bool? this.is_scam,
    Bool? this.is_fake,
  });

  Supergroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    username = map.containsKey('username') ? map['username'] : null;
    date = map.containsKey('date') ? map['date'] : null;
    status = map.containsKey('status')
        ? TlMap.fromMap(map['status']) as ChatMemberStatus
        : null;
    member_count = map.containsKey('member_count') ? map['member_count'] : null;
    has_linked_chat =
        map.containsKey('has_linked_chat') ? map['has_linked_chat'] : null;
    has_location = map.containsKey('has_location') ? map['has_location'] : null;
    sign_messages =
        map.containsKey('sign_messages') ? map['sign_messages'] : null;
    is_slow_mode_enabled = map.containsKey('is_slow_mode_enabled')
        ? map['is_slow_mode_enabled']
        : null;
    is_channel = map.containsKey('is_channel') ? map['is_channel'] : null;
    is_broadcast_group = map.containsKey('is_broadcast_group')
        ? map['is_broadcast_group']
        : null;
    is_verified = map.containsKey('is_verified') ? map['is_verified'] : null;
    restriction_reason = map.containsKey('restriction_reason')
        ? map['restriction_reason']
        : null;
    is_scam = map.containsKey('is_scam') ? map['is_scam'] : null;
    is_fake = map.containsKey('is_fake') ? map['is_fake'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'status': status?.toMap(skipNulls: skipNulls),
      'member_count': member_count?.toMap(skipNulls: skipNulls),
      'has_linked_chat': has_linked_chat?.toMap(skipNulls: skipNulls),
      'has_location': has_location?.toMap(skipNulls: skipNulls),
      'sign_messages': sign_messages?.toMap(skipNulls: skipNulls),
      'is_slow_mode_enabled': is_slow_mode_enabled?.toMap(skipNulls: skipNulls),
      'is_channel': is_channel?.toMap(skipNulls: skipNulls),
      'is_broadcast_group': is_broadcast_group?.toMap(skipNulls: skipNulls),
      'is_verified': is_verified?.toMap(skipNulls: skipNulls),
      'restriction_reason': restriction_reason?.toMap(skipNulls: skipNulls),
      'is_scam': is_scam?.toMap(skipNulls: skipNulls),
      'is_fake': is_fake?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SupergroupFullInfo extends TdObject {
  String get tlType => 'supergroupFullInfo';

  string? extra;
  int? client_id;
  ChatPhoto? photo;
  string? description;
  int32? member_count;
  int32? administrator_count;
  int32? restricted_count;
  int32? banned_count;
  int53? linked_chat_id;
  int32? slow_mode_delay;
  double? slow_mode_delay_expires_in;
  Bool? can_get_members;
  Bool? can_set_username;
  Bool? can_set_sticker_set;
  Bool? can_set_location;
  Bool? can_get_statistics;
  Bool? is_all_history_available;
  int64? sticker_set_id;
  ChatLocation? location;
  ChatInviteLink? invite_link;
  vector<BotCommands>? bot_commands;
  int53? upgraded_from_basic_group_id;
  int53? upgraded_from_max_message_id;

  SupergroupFullInfo({
    string? this.extra,
    int? this.client_id,
    ChatPhoto? this.photo,
    string? this.description,
    int32? this.member_count,
    int32? this.administrator_count,
    int32? this.restricted_count,
    int32? this.banned_count,
    int53? this.linked_chat_id,
    int32? this.slow_mode_delay,
    double? this.slow_mode_delay_expires_in,
    Bool? this.can_get_members,
    Bool? this.can_set_username,
    Bool? this.can_set_sticker_set,
    Bool? this.can_set_location,
    Bool? this.can_get_statistics,
    Bool? this.is_all_history_available,
    int64? this.sticker_set_id,
    ChatLocation? this.location,
    ChatInviteLink? this.invite_link,
    vector<BotCommands>? this.bot_commands,
    int53? this.upgraded_from_basic_group_id,
    int53? this.upgraded_from_max_message_id,
  });

  SupergroupFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as ChatPhoto
        : null;
    description = map.containsKey('description') ? map['description'] : null;
    member_count = map.containsKey('member_count') ? map['member_count'] : null;
    administrator_count = map.containsKey('administrator_count')
        ? map['administrator_count']
        : null;
    restricted_count =
        map.containsKey('restricted_count') ? map['restricted_count'] : null;
    banned_count = map.containsKey('banned_count') ? map['banned_count'] : null;
    linked_chat_id =
        map.containsKey('linked_chat_id') ? map['linked_chat_id'] : null;
    slow_mode_delay =
        map.containsKey('slow_mode_delay') ? map['slow_mode_delay'] : null;
    slow_mode_delay_expires_in = map.containsKey('slow_mode_delay_expires_in')
        ? map['slow_mode_delay_expires_in']
        : null;
    can_get_members =
        map.containsKey('can_get_members') ? map['can_get_members'] : null;
    can_set_username =
        map.containsKey('can_set_username') ? map['can_set_username'] : null;
    can_set_sticker_set = map.containsKey('can_set_sticker_set')
        ? map['can_set_sticker_set']
        : null;
    can_set_location =
        map.containsKey('can_set_location') ? map['can_set_location'] : null;
    can_get_statistics = map.containsKey('can_get_statistics')
        ? map['can_get_statistics']
        : null;
    is_all_history_available = map.containsKey('is_all_history_available')
        ? map['is_all_history_available']
        : null;
    sticker_set_id =
        map.containsKey('sticker_set_id') ? map['sticker_set_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as ChatLocation
        : null;
    invite_link = map.containsKey('invite_link')
        ? TlMap.fromMap(map['invite_link']) as ChatInviteLink
        : null;
    if (map.containsKey('bot_commands') && map['bot_commands'] != null) {
      bot_commands = [];
      var someValues = map['bot_commands'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as BotCommands;
        bot_commands?.add(obj);
      }
    }
    upgraded_from_basic_group_id =
        map.containsKey('upgraded_from_basic_group_id')
            ? map['upgraded_from_basic_group_id']
            : null;
    upgraded_from_max_message_id =
        map.containsKey('upgraded_from_max_message_id')
            ? map['upgraded_from_max_message_id']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'member_count': member_count?.toMap(skipNulls: skipNulls),
      'administrator_count': administrator_count?.toMap(skipNulls: skipNulls),
      'restricted_count': restricted_count?.toMap(skipNulls: skipNulls),
      'banned_count': banned_count?.toMap(skipNulls: skipNulls),
      'linked_chat_id': linked_chat_id?.toMap(skipNulls: skipNulls),
      'slow_mode_delay': slow_mode_delay?.toMap(skipNulls: skipNulls),
      'slow_mode_delay_expires_in':
          slow_mode_delay_expires_in?.toMap(skipNulls: skipNulls),
      'can_get_members': can_get_members?.toMap(skipNulls: skipNulls),
      'can_set_username': can_set_username?.toMap(skipNulls: skipNulls),
      'can_set_sticker_set': can_set_sticker_set?.toMap(skipNulls: skipNulls),
      'can_set_location': can_set_location?.toMap(skipNulls: skipNulls),
      'can_get_statistics': can_get_statistics?.toMap(skipNulls: skipNulls),
      'is_all_history_available':
          is_all_history_available?.toMap(skipNulls: skipNulls),
      'sticker_set_id': sticker_set_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
      'bot_commands': bot_commands?.toMap(skipNulls: skipNulls),
      'upgraded_from_basic_group_id':
          upgraded_from_basic_group_id?.toMap(skipNulls: skipNulls),
      'upgraded_from_max_message_id':
          upgraded_from_max_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SecretChatStatePending extends SecretChatState {
  String get tlType => 'secretChatStatePending';

  string? extra;
  int? client_id;

  SecretChatStatePending({
    string? this.extra,
    int? this.client_id,
  });

  SecretChatStatePending.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SecretChatStateReady extends SecretChatState {
  String get tlType => 'secretChatStateReady';

  string? extra;
  int? client_id;

  SecretChatStateReady({
    string? this.extra,
    int? this.client_id,
  });

  SecretChatStateReady.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SecretChatStateClosed extends SecretChatState {
  String get tlType => 'secretChatStateClosed';

  string? extra;
  int? client_id;

  SecretChatStateClosed({
    string? this.extra,
    int? this.client_id,
  });

  SecretChatStateClosed.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SecretChat extends TdObject {
  String get tlType => 'secretChat';

  string? extra;
  int? client_id;
  int32? id;
  int53? user_id;
  SecretChatState? state;
  Bool? is_outbound;
  bytes? key_hash;
  int32? layer;

  SecretChat({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    int53? this.user_id,
    SecretChatState? this.state,
    Bool? this.is_outbound,
    bytes? this.key_hash,
    int32? this.layer,
  });

  SecretChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    state = map.containsKey('state')
        ? TlMap.fromMap(map['state']) as SecretChatState
        : null;
    is_outbound = map.containsKey('is_outbound') ? map['is_outbound'] : null;
    key_hash = map.containsKey('key_hash') ? map['key_hash'] : null;
    layer = map.containsKey('layer') ? map['layer'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'state': state?.toMap(skipNulls: skipNulls),
      'is_outbound': is_outbound?.toMap(skipNulls: skipNulls),
      'key_hash': key_hash?.toMap(skipNulls: skipNulls),
      'layer': layer?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSenderUser extends MessageSender {
  String get tlType => 'messageSenderUser';

  string? extra;
  int? client_id;
  int53? user_id;

  MessageSenderUser({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  MessageSenderUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSenderChat extends MessageSender {
  String get tlType => 'messageSenderChat';

  string? extra;
  int? client_id;
  int53? chat_id;

  MessageSenderChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  MessageSenderChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSenders extends TdObject {
  String get tlType => 'messageSenders';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<MessageSender>? senders;

  MessageSenders({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<MessageSender>? this.senders,
  });

  MessageSenders.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('senders') && map['senders'] != null) {
      senders = [];
      var someValues = map['senders'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as MessageSender;
        senders?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'senders': senders?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageForwardOriginUser extends MessageForwardOrigin {
  String get tlType => 'messageForwardOriginUser';

  string? extra;
  int? client_id;
  int53? sender_user_id;

  MessageForwardOriginUser({
    string? this.extra,
    int? this.client_id,
    int53? this.sender_user_id,
  });

  MessageForwardOriginUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sender_user_id =
        map.containsKey('sender_user_id') ? map['sender_user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sender_user_id': sender_user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageForwardOriginChat extends MessageForwardOrigin {
  String get tlType => 'messageForwardOriginChat';

  string? extra;
  int? client_id;
  int53? sender_chat_id;
  string? author_signature;

  MessageForwardOriginChat({
    string? this.extra,
    int? this.client_id,
    int53? this.sender_chat_id,
    string? this.author_signature,
  });

  MessageForwardOriginChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sender_chat_id =
        map.containsKey('sender_chat_id') ? map['sender_chat_id'] : null;
    author_signature =
        map.containsKey('author_signature') ? map['author_signature'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sender_chat_id': sender_chat_id?.toMap(skipNulls: skipNulls),
      'author_signature': author_signature?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageForwardOriginHiddenUser extends MessageForwardOrigin {
  String get tlType => 'messageForwardOriginHiddenUser';

  string? extra;
  int? client_id;
  string? sender_name;

  MessageForwardOriginHiddenUser({
    string? this.extra,
    int? this.client_id,
    string? this.sender_name,
  });

  MessageForwardOriginHiddenUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sender_name = map.containsKey('sender_name') ? map['sender_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sender_name': sender_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageForwardOriginChannel extends MessageForwardOrigin {
  String get tlType => 'messageForwardOriginChannel';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  string? author_signature;

  MessageForwardOriginChannel({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    string? this.author_signature,
  });

  MessageForwardOriginChannel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    author_signature =
        map.containsKey('author_signature') ? map['author_signature'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'author_signature': author_signature?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageForwardOriginMessageImport extends MessageForwardOrigin {
  String get tlType => 'messageForwardOriginMessageImport';

  string? extra;
  int? client_id;
  string? sender_name;

  MessageForwardOriginMessageImport({
    string? this.extra,
    int? this.client_id,
    string? this.sender_name,
  });

  MessageForwardOriginMessageImport.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sender_name = map.containsKey('sender_name') ? map['sender_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sender_name': sender_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageForwardInfo extends TdObject {
  String get tlType => 'messageForwardInfo';

  string? extra;
  int? client_id;
  MessageForwardOrigin? origin;
  int32? date;
  string? public_service_announcement_type;
  int53? from_chat_id;
  int53? from_message_id;

  MessageForwardInfo({
    string? this.extra,
    int? this.client_id,
    MessageForwardOrigin? this.origin,
    int32? this.date,
    string? this.public_service_announcement_type,
    int53? this.from_chat_id,
    int53? this.from_message_id,
  });

  MessageForwardInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    origin = map.containsKey('origin')
        ? TlMap.fromMap(map['origin']) as MessageForwardOrigin
        : null;
    date = map.containsKey('date') ? map['date'] : null;
    public_service_announcement_type =
        map.containsKey('public_service_announcement_type')
            ? map['public_service_announcement_type']
            : null;
    from_chat_id = map.containsKey('from_chat_id') ? map['from_chat_id'] : null;
    from_message_id =
        map.containsKey('from_message_id') ? map['from_message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'origin': origin?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'public_service_announcement_type':
          public_service_announcement_type?.toMap(skipNulls: skipNulls),
      'from_chat_id': from_chat_id?.toMap(skipNulls: skipNulls),
      'from_message_id': from_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageReplyInfo extends TdObject {
  String get tlType => 'messageReplyInfo';

  string? extra;
  int? client_id;
  int32? reply_count;
  vector<MessageSender>? recent_replier_ids;
  int53? last_read_inbox_message_id;
  int53? last_read_outbox_message_id;
  int53? last_message_id;

  MessageReplyInfo({
    string? this.extra,
    int? this.client_id,
    int32? this.reply_count,
    vector<MessageSender>? this.recent_replier_ids,
    int53? this.last_read_inbox_message_id,
    int53? this.last_read_outbox_message_id,
    int53? this.last_message_id,
  });

  MessageReplyInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    reply_count = map.containsKey('reply_count') ? map['reply_count'] : null;
    if (map.containsKey('recent_replier_ids') &&
        map['recent_replier_ids'] != null) {
      recent_replier_ids = [];
      var someValues = map['recent_replier_ids'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as MessageSender;
        recent_replier_ids?.add(obj);
      }
    }
    last_read_inbox_message_id = map.containsKey('last_read_inbox_message_id')
        ? map['last_read_inbox_message_id']
        : null;
    last_read_outbox_message_id = map.containsKey('last_read_outbox_message_id')
        ? map['last_read_outbox_message_id']
        : null;
    last_message_id =
        map.containsKey('last_message_id') ? map['last_message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'reply_count': reply_count?.toMap(skipNulls: skipNulls),
      'recent_replier_ids': recent_replier_ids?.toMap(skipNulls: skipNulls),
      'last_read_inbox_message_id':
          last_read_inbox_message_id?.toMap(skipNulls: skipNulls),
      'last_read_outbox_message_id':
          last_read_outbox_message_id?.toMap(skipNulls: skipNulls),
      'last_message_id': last_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageInteractionInfo extends TdObject {
  String get tlType => 'messageInteractionInfo';

  string? extra;
  int? client_id;
  int32? view_count;
  int32? forward_count;
  MessageReplyInfo? reply_info;

  MessageInteractionInfo({
    string? this.extra,
    int? this.client_id,
    int32? this.view_count,
    int32? this.forward_count,
    MessageReplyInfo? this.reply_info,
  });

  MessageInteractionInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    view_count = map.containsKey('view_count') ? map['view_count'] : null;
    forward_count =
        map.containsKey('forward_count') ? map['forward_count'] : null;
    reply_info = map.containsKey('reply_info')
        ? TlMap.fromMap(map['reply_info']) as MessageReplyInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'view_count': view_count?.toMap(skipNulls: skipNulls),
      'forward_count': forward_count?.toMap(skipNulls: skipNulls),
      'reply_info': reply_info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSendingStatePending extends MessageSendingState {
  String get tlType => 'messageSendingStatePending';

  string? extra;
  int? client_id;

  MessageSendingStatePending({
    string? this.extra,
    int? this.client_id,
  });

  MessageSendingStatePending.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSendingStateFailed extends MessageSendingState {
  String get tlType => 'messageSendingStateFailed';

  string? extra;
  int? client_id;
  int32? error_code;
  string? error_message;
  Bool? can_retry;
  Bool? need_another_sender;
  double? retry_after;

  MessageSendingStateFailed({
    string? this.extra,
    int? this.client_id,
    int32? this.error_code,
    string? this.error_message,
    Bool? this.can_retry,
    Bool? this.need_another_sender,
    double? this.retry_after,
  });

  MessageSendingStateFailed.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    error_code = map.containsKey('error_code') ? map['error_code'] : null;
    error_message =
        map.containsKey('error_message') ? map['error_message'] : null;
    can_retry = map.containsKey('can_retry') ? map['can_retry'] : null;
    need_another_sender = map.containsKey('need_another_sender')
        ? map['need_another_sender']
        : null;
    retry_after = map.containsKey('retry_after') ? map['retry_after'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'error_code': error_code?.toMap(skipNulls: skipNulls),
      'error_message': error_message?.toMap(skipNulls: skipNulls),
      'can_retry': can_retry?.toMap(skipNulls: skipNulls),
      'need_another_sender': need_another_sender?.toMap(skipNulls: skipNulls),
      'retry_after': retry_after?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Message extends TdObject {
  String get tlType => 'message';

  string? extra;
  int? client_id;
  int53? id;
  MessageSender? sender_id;
  int53? chat_id;
  MessageSendingState? sending_state;
  MessageSchedulingState? scheduling_state;
  Bool? is_outgoing;
  Bool? is_pinned;
  Bool? can_be_edited;
  Bool? can_be_forwarded;
  Bool? can_be_saved;
  Bool? can_be_deleted_only_for_self;
  Bool? can_be_deleted_for_all_users;
  Bool? can_get_statistics;
  Bool? can_get_message_thread;
  Bool? can_get_viewers;
  Bool? can_get_media_timestamp_links;
  Bool? has_timestamped_media;
  Bool? is_channel_post;
  Bool? contains_unread_mention;
  int32? date;
  int32? edit_date;
  MessageForwardInfo? forward_info;
  MessageInteractionInfo? interaction_info;
  int53? reply_in_chat_id;
  int53? reply_to_message_id;
  int53? message_thread_id;
  int32? ttl;
  double? ttl_expires_in;
  int53? via_bot_user_id;
  string? author_signature;
  int64? media_album_id;
  string? restriction_reason;
  MessageContent? content;
  ReplyMarkup? reply_markup;

  Message({
    string? this.extra,
    int? this.client_id,
    int53? this.id,
    MessageSender? this.sender_id,
    int53? this.chat_id,
    MessageSendingState? this.sending_state,
    MessageSchedulingState? this.scheduling_state,
    Bool? this.is_outgoing,
    Bool? this.is_pinned,
    Bool? this.can_be_edited,
    Bool? this.can_be_forwarded,
    Bool? this.can_be_saved,
    Bool? this.can_be_deleted_only_for_self,
    Bool? this.can_be_deleted_for_all_users,
    Bool? this.can_get_statistics,
    Bool? this.can_get_message_thread,
    Bool? this.can_get_viewers,
    Bool? this.can_get_media_timestamp_links,
    Bool? this.has_timestamped_media,
    Bool? this.is_channel_post,
    Bool? this.contains_unread_mention,
    int32? this.date,
    int32? this.edit_date,
    MessageForwardInfo? this.forward_info,
    MessageInteractionInfo? this.interaction_info,
    int53? this.reply_in_chat_id,
    int53? this.reply_to_message_id,
    int53? this.message_thread_id,
    int32? this.ttl,
    double? this.ttl_expires_in,
    int53? this.via_bot_user_id,
    string? this.author_signature,
    int64? this.media_album_id,
    string? this.restriction_reason,
    MessageContent? this.content,
    ReplyMarkup? this.reply_markup,
  });

  Message.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    sender_id = map.containsKey('sender_id')
        ? TlMap.fromMap(map['sender_id']) as MessageSender
        : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    sending_state = map.containsKey('sending_state')
        ? TlMap.fromMap(map['sending_state']) as MessageSendingState
        : null;
    scheduling_state = map.containsKey('scheduling_state')
        ? TlMap.fromMap(map['scheduling_state']) as MessageSchedulingState
        : null;
    is_outgoing = map.containsKey('is_outgoing') ? map['is_outgoing'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
    can_be_edited =
        map.containsKey('can_be_edited') ? map['can_be_edited'] : null;
    can_be_forwarded =
        map.containsKey('can_be_forwarded') ? map['can_be_forwarded'] : null;
    can_be_saved = map.containsKey('can_be_saved') ? map['can_be_saved'] : null;
    can_be_deleted_only_for_self =
        map.containsKey('can_be_deleted_only_for_self')
            ? map['can_be_deleted_only_for_self']
            : null;
    can_be_deleted_for_all_users =
        map.containsKey('can_be_deleted_for_all_users')
            ? map['can_be_deleted_for_all_users']
            : null;
    can_get_statistics = map.containsKey('can_get_statistics')
        ? map['can_get_statistics']
        : null;
    can_get_message_thread = map.containsKey('can_get_message_thread')
        ? map['can_get_message_thread']
        : null;
    can_get_viewers =
        map.containsKey('can_get_viewers') ? map['can_get_viewers'] : null;
    can_get_media_timestamp_links =
        map.containsKey('can_get_media_timestamp_links')
            ? map['can_get_media_timestamp_links']
            : null;
    has_timestamped_media = map.containsKey('has_timestamped_media')
        ? map['has_timestamped_media']
        : null;
    is_channel_post =
        map.containsKey('is_channel_post') ? map['is_channel_post'] : null;
    contains_unread_mention = map.containsKey('contains_unread_mention')
        ? map['contains_unread_mention']
        : null;
    date = map.containsKey('date') ? map['date'] : null;
    edit_date = map.containsKey('edit_date') ? map['edit_date'] : null;
    forward_info = map.containsKey('forward_info')
        ? TlMap.fromMap(map['forward_info']) as MessageForwardInfo
        : null;
    interaction_info = map.containsKey('interaction_info')
        ? TlMap.fromMap(map['interaction_info']) as MessageInteractionInfo
        : null;
    reply_in_chat_id =
        map.containsKey('reply_in_chat_id') ? map['reply_in_chat_id'] : null;
    reply_to_message_id = map.containsKey('reply_to_message_id')
        ? map['reply_to_message_id']
        : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    ttl = map.containsKey('ttl') ? map['ttl'] : null;
    ttl_expires_in =
        map.containsKey('ttl_expires_in') ? map['ttl_expires_in'] : null;
    via_bot_user_id =
        map.containsKey('via_bot_user_id') ? map['via_bot_user_id'] : null;
    author_signature =
        map.containsKey('author_signature') ? map['author_signature'] : null;
    media_album_id =
        map.containsKey('media_album_id') ? map['media_album_id'] : null;
    restriction_reason = map.containsKey('restriction_reason')
        ? map['restriction_reason']
        : null;
    content = map.containsKey('content')
        ? TlMap.fromMap(map['content']) as MessageContent
        : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'sender_id': sender_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'sending_state': sending_state?.toMap(skipNulls: skipNulls),
      'scheduling_state': scheduling_state?.toMap(skipNulls: skipNulls),
      'is_outgoing': is_outgoing?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
      'can_be_edited': can_be_edited?.toMap(skipNulls: skipNulls),
      'can_be_forwarded': can_be_forwarded?.toMap(skipNulls: skipNulls),
      'can_be_saved': can_be_saved?.toMap(skipNulls: skipNulls),
      'can_be_deleted_only_for_self':
          can_be_deleted_only_for_self?.toMap(skipNulls: skipNulls),
      'can_be_deleted_for_all_users':
          can_be_deleted_for_all_users?.toMap(skipNulls: skipNulls),
      'can_get_statistics': can_get_statistics?.toMap(skipNulls: skipNulls),
      'can_get_message_thread':
          can_get_message_thread?.toMap(skipNulls: skipNulls),
      'can_get_viewers': can_get_viewers?.toMap(skipNulls: skipNulls),
      'can_get_media_timestamp_links':
          can_get_media_timestamp_links?.toMap(skipNulls: skipNulls),
      'has_timestamped_media':
          has_timestamped_media?.toMap(skipNulls: skipNulls),
      'is_channel_post': is_channel_post?.toMap(skipNulls: skipNulls),
      'contains_unread_mention':
          contains_unread_mention?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'edit_date': edit_date?.toMap(skipNulls: skipNulls),
      'forward_info': forward_info?.toMap(skipNulls: skipNulls),
      'interaction_info': interaction_info?.toMap(skipNulls: skipNulls),
      'reply_in_chat_id': reply_in_chat_id?.toMap(skipNulls: skipNulls),
      'reply_to_message_id': reply_to_message_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'ttl': ttl?.toMap(skipNulls: skipNulls),
      'ttl_expires_in': ttl_expires_in?.toMap(skipNulls: skipNulls),
      'via_bot_user_id': via_bot_user_id?.toMap(skipNulls: skipNulls),
      'author_signature': author_signature?.toMap(skipNulls: skipNulls),
      'media_album_id': media_album_id?.toMap(skipNulls: skipNulls),
      'restriction_reason': restriction_reason?.toMap(skipNulls: skipNulls),
      'content': content?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Messages extends TdObject {
  String get tlType => 'messages';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<Message>? messages;

  Messages({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<Message>? this.messages,
  });

  Messages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('messages') && map['messages'] != null) {
      messages = [];
      var someValues = map['messages'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Message;
        messages?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'messages': messages?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FoundMessages extends TdObject {
  String get tlType => 'foundMessages';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<Message>? messages;
  string? next_offset;

  FoundMessages({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<Message>? this.messages,
    string? this.next_offset,
  });

  FoundMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('messages') && map['messages'] != null) {
      messages = [];
      var someValues = map['messages'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Message;
        messages?.add(obj);
      }
    }
    next_offset = map.containsKey('next_offset') ? map['next_offset'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'messages': messages?.toMap(skipNulls: skipNulls),
      'next_offset': next_offset?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePosition extends TdObject {
  String get tlType => 'messagePosition';

  string? extra;
  int? client_id;
  int32? position;
  int53? message_id;
  int32? date;

  MessagePosition({
    string? this.extra,
    int? this.client_id,
    int32? this.position,
    int53? this.message_id,
    int32? this.date,
  });

  MessagePosition.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    position = map.containsKey('position') ? map['position'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    date = map.containsKey('date') ? map['date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'position': position?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePositions extends TdObject {
  String get tlType => 'messagePositions';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<MessagePosition>? positions;

  MessagePositions({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<MessagePosition>? this.positions,
  });

  MessagePositions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('positions') && map['positions'] != null) {
      positions = [];
      var someValues = map['positions'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as MessagePosition;
        positions?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'positions': positions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageCalendarDay extends TdObject {
  String get tlType => 'messageCalendarDay';

  string? extra;
  int? client_id;
  int32? total_count;
  Message? message;

  MessageCalendarDay({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    Message? this.message,
  });

  MessageCalendarDay.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageCalendar extends TdObject {
  String get tlType => 'messageCalendar';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<MessageCalendarDay>? days;

  MessageCalendar({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<MessageCalendarDay>? this.days,
  });

  MessageCalendar.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('days') && map['days'] != null) {
      days = [];
      var someValues = map['days'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as MessageCalendarDay;
        days?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'days': days?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SponsoredMessage extends TdObject {
  String get tlType => 'sponsoredMessage';

  string? extra;
  int? client_id;
  int53? message_id;
  int53? sponsor_chat_id;
  InternalLinkType? link;
  MessageContent? content;

  SponsoredMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.message_id,
    int53? this.sponsor_chat_id,
    InternalLinkType? this.link,
    MessageContent? this.content,
  });

  SponsoredMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    sponsor_chat_id =
        map.containsKey('sponsor_chat_id') ? map['sponsor_chat_id'] : null;
    link = map.containsKey('link')
        ? TlMap.fromMap(map['link']) as InternalLinkType
        : null;
    content = map.containsKey('content')
        ? TlMap.fromMap(map['content']) as MessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'sponsor_chat_id': sponsor_chat_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
      'content': content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationSettingsScopePrivateChats extends NotificationSettingsScope {
  String get tlType => 'notificationSettingsScopePrivateChats';

  string? extra;
  int? client_id;

  NotificationSettingsScopePrivateChats({
    string? this.extra,
    int? this.client_id,
  });

  NotificationSettingsScopePrivateChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationSettingsScopeGroupChats extends NotificationSettingsScope {
  String get tlType => 'notificationSettingsScopeGroupChats';

  string? extra;
  int? client_id;

  NotificationSettingsScopeGroupChats({
    string? this.extra,
    int? this.client_id,
  });

  NotificationSettingsScopeGroupChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationSettingsScopeChannelChats extends NotificationSettingsScope {
  String get tlType => 'notificationSettingsScopeChannelChats';

  string? extra;
  int? client_id;

  NotificationSettingsScopeChannelChats({
    string? this.extra,
    int? this.client_id,
  });

  NotificationSettingsScopeChannelChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatNotificationSettings extends TdObject {
  String get tlType => 'chatNotificationSettings';

  string? extra;
  int? client_id;
  Bool? use_default_mute_for;
  int32? mute_for;
  Bool? use_default_sound;
  string? sound;
  Bool? use_default_show_preview;
  Bool? show_preview;
  Bool? use_default_disable_pinned_message_notifications;
  Bool? disable_pinned_message_notifications;
  Bool? use_default_disable_mention_notifications;
  Bool? disable_mention_notifications;

  ChatNotificationSettings({
    string? this.extra,
    int? this.client_id,
    Bool? this.use_default_mute_for,
    int32? this.mute_for,
    Bool? this.use_default_sound,
    string? this.sound,
    Bool? this.use_default_show_preview,
    Bool? this.show_preview,
    Bool? this.use_default_disable_pinned_message_notifications,
    Bool? this.disable_pinned_message_notifications,
    Bool? this.use_default_disable_mention_notifications,
    Bool? this.disable_mention_notifications,
  });

  ChatNotificationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    use_default_mute_for = map.containsKey('use_default_mute_for')
        ? map['use_default_mute_for']
        : null;
    mute_for = map.containsKey('mute_for') ? map['mute_for'] : null;
    use_default_sound =
        map.containsKey('use_default_sound') ? map['use_default_sound'] : null;
    sound = map.containsKey('sound') ? map['sound'] : null;
    use_default_show_preview = map.containsKey('use_default_show_preview')
        ? map['use_default_show_preview']
        : null;
    show_preview = map.containsKey('show_preview') ? map['show_preview'] : null;
    use_default_disable_pinned_message_notifications =
        map.containsKey('use_default_disable_pinned_message_notifications')
            ? map['use_default_disable_pinned_message_notifications']
            : null;
    disable_pinned_message_notifications =
        map.containsKey('disable_pinned_message_notifications')
            ? map['disable_pinned_message_notifications']
            : null;
    use_default_disable_mention_notifications =
        map.containsKey('use_default_disable_mention_notifications')
            ? map['use_default_disable_mention_notifications']
            : null;
    disable_mention_notifications =
        map.containsKey('disable_mention_notifications')
            ? map['disable_mention_notifications']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'use_default_mute_for': use_default_mute_for?.toMap(skipNulls: skipNulls),
      'mute_for': mute_for?.toMap(skipNulls: skipNulls),
      'use_default_sound': use_default_sound?.toMap(skipNulls: skipNulls),
      'sound': sound?.toMap(skipNulls: skipNulls),
      'use_default_show_preview':
          use_default_show_preview?.toMap(skipNulls: skipNulls),
      'show_preview': show_preview?.toMap(skipNulls: skipNulls),
      'use_default_disable_pinned_message_notifications':
          use_default_disable_pinned_message_notifications?.toMap(
              skipNulls: skipNulls),
      'disable_pinned_message_notifications':
          disable_pinned_message_notifications?.toMap(skipNulls: skipNulls),
      'use_default_disable_mention_notifications':
          use_default_disable_mention_notifications?.toMap(
              skipNulls: skipNulls),
      'disable_mention_notifications':
          disable_mention_notifications?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ScopeNotificationSettings extends TdObject {
  String get tlType => 'scopeNotificationSettings';

  string? extra;
  int? client_id;
  int32? mute_for;
  string? sound;
  Bool? show_preview;
  Bool? disable_pinned_message_notifications;
  Bool? disable_mention_notifications;

  ScopeNotificationSettings({
    string? this.extra,
    int? this.client_id,
    int32? this.mute_for,
    string? this.sound,
    Bool? this.show_preview,
    Bool? this.disable_pinned_message_notifications,
    Bool? this.disable_mention_notifications,
  });

  ScopeNotificationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    mute_for = map.containsKey('mute_for') ? map['mute_for'] : null;
    sound = map.containsKey('sound') ? map['sound'] : null;
    show_preview = map.containsKey('show_preview') ? map['show_preview'] : null;
    disable_pinned_message_notifications =
        map.containsKey('disable_pinned_message_notifications')
            ? map['disable_pinned_message_notifications']
            : null;
    disable_mention_notifications =
        map.containsKey('disable_mention_notifications')
            ? map['disable_mention_notifications']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'mute_for': mute_for?.toMap(skipNulls: skipNulls),
      'sound': sound?.toMap(skipNulls: skipNulls),
      'show_preview': show_preview?.toMap(skipNulls: skipNulls),
      'disable_pinned_message_notifications':
          disable_pinned_message_notifications?.toMap(skipNulls: skipNulls),
      'disable_mention_notifications':
          disable_mention_notifications?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DraftMessage extends TdObject {
  String get tlType => 'draftMessage';

  string? extra;
  int? client_id;
  int53? reply_to_message_id;
  int32? date;
  InputMessageContent? input_message_text;

  DraftMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.reply_to_message_id,
    int32? this.date,
    InputMessageContent? this.input_message_text,
  });

  DraftMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    reply_to_message_id = map.containsKey('reply_to_message_id')
        ? map['reply_to_message_id']
        : null;
    date = map.containsKey('date') ? map['date'] : null;
    input_message_text = map.containsKey('input_message_text')
        ? TlMap.fromMap(map['input_message_text']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'reply_to_message_id': reply_to_message_id?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'input_message_text': input_message_text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatTypePrivate extends ChatType {
  String get tlType => 'chatTypePrivate';

  string? extra;
  int? client_id;
  int53? user_id;

  ChatTypePrivate({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  ChatTypePrivate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatTypeBasicGroup extends ChatType {
  String get tlType => 'chatTypeBasicGroup';

  string? extra;
  int? client_id;
  int53? basic_group_id;

  ChatTypeBasicGroup({
    string? this.extra,
    int? this.client_id,
    int53? this.basic_group_id,
  });

  ChatTypeBasicGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    basic_group_id =
        map.containsKey('basic_group_id') ? map['basic_group_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'basic_group_id': basic_group_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatTypeSupergroup extends ChatType {
  String get tlType => 'chatTypeSupergroup';

  string? extra;
  int? client_id;
  int53? supergroup_id;
  Bool? is_channel;

  ChatTypeSupergroup({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    Bool? this.is_channel,
  });

  ChatTypeSupergroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    is_channel = map.containsKey('is_channel') ? map['is_channel'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'is_channel': is_channel?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatTypeSecret extends ChatType {
  String get tlType => 'chatTypeSecret';

  string? extra;
  int? client_id;
  int32? secret_chat_id;
  int53? user_id;

  ChatTypeSecret({
    string? this.extra,
    int? this.client_id,
    int32? this.secret_chat_id,
    int53? this.user_id,
  });

  ChatTypeSecret.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    secret_chat_id =
        map.containsKey('secret_chat_id') ? map['secret_chat_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'secret_chat_id': secret_chat_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatFilter extends TdObject {
  String get tlType => 'chatFilter';

  string? extra;
  int? client_id;
  string? title;
  string? icon_name;
  vector<int53>? pinned_chat_ids;
  vector<int53>? included_chat_ids;
  vector<int53>? excluded_chat_ids;
  Bool? exclude_muted;
  Bool? exclude_read;
  Bool? exclude_archived;
  Bool? include_contacts;
  Bool? include_non_contacts;
  Bool? include_bots;
  Bool? include_groups;
  Bool? include_channels;

  ChatFilter({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    string? this.icon_name,
    vector<int53>? this.pinned_chat_ids,
    vector<int53>? this.included_chat_ids,
    vector<int53>? this.excluded_chat_ids,
    Bool? this.exclude_muted,
    Bool? this.exclude_read,
    Bool? this.exclude_archived,
    Bool? this.include_contacts,
    Bool? this.include_non_contacts,
    Bool? this.include_bots,
    Bool? this.include_groups,
    Bool? this.include_channels,
  });

  ChatFilter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    icon_name = map.containsKey('icon_name') ? map['icon_name'] : null;
    if (map.containsKey('pinned_chat_ids') && map['pinned_chat_ids'] != null) {
      pinned_chat_ids = [];
      var someValues = map['pinned_chat_ids'];
      for (var someValue in someValues) {
        pinned_chat_ids?.add(someValue);
      }
    }
    if (map.containsKey('included_chat_ids') &&
        map['included_chat_ids'] != null) {
      included_chat_ids = [];
      var someValues = map['included_chat_ids'];
      for (var someValue in someValues) {
        included_chat_ids?.add(someValue);
      }
    }
    if (map.containsKey('excluded_chat_ids') &&
        map['excluded_chat_ids'] != null) {
      excluded_chat_ids = [];
      var someValues = map['excluded_chat_ids'];
      for (var someValue in someValues) {
        excluded_chat_ids?.add(someValue);
      }
    }
    exclude_muted =
        map.containsKey('exclude_muted') ? map['exclude_muted'] : null;
    exclude_read = map.containsKey('exclude_read') ? map['exclude_read'] : null;
    exclude_archived =
        map.containsKey('exclude_archived') ? map['exclude_archived'] : null;
    include_contacts =
        map.containsKey('include_contacts') ? map['include_contacts'] : null;
    include_non_contacts = map.containsKey('include_non_contacts')
        ? map['include_non_contacts']
        : null;
    include_bots = map.containsKey('include_bots') ? map['include_bots'] : null;
    include_groups =
        map.containsKey('include_groups') ? map['include_groups'] : null;
    include_channels =
        map.containsKey('include_channels') ? map['include_channels'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'icon_name': icon_name?.toMap(skipNulls: skipNulls),
      'pinned_chat_ids': pinned_chat_ids?.toMap(skipNulls: skipNulls),
      'included_chat_ids': included_chat_ids?.toMap(skipNulls: skipNulls),
      'excluded_chat_ids': excluded_chat_ids?.toMap(skipNulls: skipNulls),
      'exclude_muted': exclude_muted?.toMap(skipNulls: skipNulls),
      'exclude_read': exclude_read?.toMap(skipNulls: skipNulls),
      'exclude_archived': exclude_archived?.toMap(skipNulls: skipNulls),
      'include_contacts': include_contacts?.toMap(skipNulls: skipNulls),
      'include_non_contacts': include_non_contacts?.toMap(skipNulls: skipNulls),
      'include_bots': include_bots?.toMap(skipNulls: skipNulls),
      'include_groups': include_groups?.toMap(skipNulls: skipNulls),
      'include_channels': include_channels?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatFilterInfo extends TdObject {
  String get tlType => 'chatFilterInfo';

  string? extra;
  int? client_id;
  int32? id;
  string? title;
  string? icon_name;

  ChatFilterInfo({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    string? this.title,
    string? this.icon_name,
  });

  ChatFilterInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    icon_name = map.containsKey('icon_name') ? map['icon_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'icon_name': icon_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RecommendedChatFilter extends TdObject {
  String get tlType => 'recommendedChatFilter';

  string? extra;
  int? client_id;
  ChatFilter? filter;
  string? description;

  RecommendedChatFilter({
    string? this.extra,
    int? this.client_id,
    ChatFilter? this.filter,
    string? this.description,
  });

  RecommendedChatFilter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as ChatFilter
        : null;
    description = map.containsKey('description') ? map['description'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RecommendedChatFilters extends TdObject {
  String get tlType => 'recommendedChatFilters';

  string? extra;
  int? client_id;
  vector<RecommendedChatFilter>? chat_filters;

  RecommendedChatFilters({
    string? this.extra,
    int? this.client_id,
    vector<RecommendedChatFilter>? this.chat_filters,
  });

  RecommendedChatFilters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('chat_filters') && map['chat_filters'] != null) {
      chat_filters = [];
      var someValues = map['chat_filters'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as RecommendedChatFilter;
        chat_filters?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_filters': chat_filters?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatListMain extends ChatList {
  String get tlType => 'chatListMain';

  string? extra;
  int? client_id;

  ChatListMain({
    string? this.extra,
    int? this.client_id,
  });

  ChatListMain.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatListArchive extends ChatList {
  String get tlType => 'chatListArchive';

  string? extra;
  int? client_id;

  ChatListArchive({
    string? this.extra,
    int? this.client_id,
  });

  ChatListArchive.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatListFilter extends ChatList {
  String get tlType => 'chatListFilter';

  string? extra;
  int? client_id;
  int32? chat_filter_id;

  ChatListFilter({
    string? this.extra,
    int? this.client_id,
    int32? this.chat_filter_id,
  });

  ChatListFilter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_filter_id =
        map.containsKey('chat_filter_id') ? map['chat_filter_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_filter_id': chat_filter_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatLists extends TdObject {
  String get tlType => 'chatLists';

  string? extra;
  int? client_id;
  vector<ChatList>? chat_lists;

  ChatLists({
    string? this.extra,
    int? this.client_id,
    vector<ChatList>? this.chat_lists,
  });

  ChatLists.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('chat_lists') && map['chat_lists'] != null) {
      chat_lists = [];
      var someValues = map['chat_lists'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatList;
        chat_lists?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_lists': chat_lists?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatSourceMtprotoProxy extends ChatSource {
  String get tlType => 'chatSourceMtprotoProxy';

  string? extra;
  int? client_id;

  ChatSourceMtprotoProxy({
    string? this.extra,
    int? this.client_id,
  });

  ChatSourceMtprotoProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatSourcePublicServiceAnnouncement extends ChatSource {
  String get tlType => 'chatSourcePublicServiceAnnouncement';

  string? extra;
  int? client_id;
  string? type;
  string? text;

  ChatSourcePublicServiceAnnouncement({
    string? this.extra,
    int? this.client_id,
    string? this.type,
    string? this.text,
  });

  ChatSourcePublicServiceAnnouncement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type') ? map['type'] : null;
    text = map.containsKey('text') ? map['text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatPosition extends TdObject {
  String get tlType => 'chatPosition';

  string? extra;
  int? client_id;
  ChatList? list;
  int64? order;
  Bool? is_pinned;
  ChatSource? source;

  ChatPosition({
    string? this.extra,
    int? this.client_id,
    ChatList? this.list,
    int64? this.order,
    Bool? this.is_pinned,
    ChatSource? this.source,
  });

  ChatPosition.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    list =
        map.containsKey('list') ? TlMap.fromMap(map['list']) as ChatList : null;
    order = map.containsKey('order') ? map['order'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
    source = map.containsKey('source')
        ? TlMap.fromMap(map['source']) as ChatSource
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'list': list?.toMap(skipNulls: skipNulls),
      'order': order?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
      'source': source?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class VideoChat extends TdObject {
  String get tlType => 'videoChat';

  string? extra;
  int? client_id;
  int32? group_call_id;
  Bool? has_participants;
  MessageSender? default_participant_id;

  VideoChat({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    Bool? this.has_participants,
    MessageSender? this.default_participant_id,
  });

  VideoChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    has_participants =
        map.containsKey('has_participants') ? map['has_participants'] : null;
    default_participant_id = map.containsKey('default_participant_id')
        ? TlMap.fromMap(map['default_participant_id']) as MessageSender
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'has_participants': has_participants?.toMap(skipNulls: skipNulls),
      'default_participant_id':
          default_participant_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Chat extends TdObject {
  String get tlType => 'chat';

  string? extra;
  int? client_id;
  int53? id;
  ChatType? type;
  string? title;
  ChatPhotoInfo? photo;
  ChatPermissions? permissions;
  Message? last_message;
  vector<ChatPosition>? positions;
  MessageSender? message_sender_id;
  Bool? has_protected_content;
  Bool? is_marked_as_unread;
  Bool? is_blocked;
  Bool? has_scheduled_messages;
  Bool? can_be_deleted_only_for_self;
  Bool? can_be_deleted_for_all_users;
  Bool? can_be_reported;
  Bool? default_disable_notification;
  int32? unread_count;
  int53? last_read_inbox_message_id;
  int53? last_read_outbox_message_id;
  int32? unread_mention_count;
  ChatNotificationSettings? notification_settings;
  int32? message_ttl;
  string? theme_name;
  ChatActionBar? action_bar;
  VideoChat? video_chat;
  ChatJoinRequestsInfo? pending_join_requests;
  int53? reply_markup_message_id;
  DraftMessage? draft_message;
  string? client_data;

  Chat({
    string? this.extra,
    int? this.client_id,
    int53? this.id,
    ChatType? this.type,
    string? this.title,
    ChatPhotoInfo? this.photo,
    ChatPermissions? this.permissions,
    Message? this.last_message,
    vector<ChatPosition>? this.positions,
    MessageSender? this.message_sender_id,
    Bool? this.has_protected_content,
    Bool? this.is_marked_as_unread,
    Bool? this.is_blocked,
    Bool? this.has_scheduled_messages,
    Bool? this.can_be_deleted_only_for_self,
    Bool? this.can_be_deleted_for_all_users,
    Bool? this.can_be_reported,
    Bool? this.default_disable_notification,
    int32? this.unread_count,
    int53? this.last_read_inbox_message_id,
    int53? this.last_read_outbox_message_id,
    int32? this.unread_mention_count,
    ChatNotificationSettings? this.notification_settings,
    int32? this.message_ttl,
    string? this.theme_name,
    ChatActionBar? this.action_bar,
    VideoChat? this.video_chat,
    ChatJoinRequestsInfo? this.pending_join_requests,
    int53? this.reply_markup_message_id,
    DraftMessage? this.draft_message,
    string? this.client_data,
  });

  Chat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    type =
        map.containsKey('type') ? TlMap.fromMap(map['type']) as ChatType : null;
    title = map.containsKey('title') ? map['title'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as ChatPhotoInfo
        : null;
    permissions = map.containsKey('permissions')
        ? TlMap.fromMap(map['permissions']) as ChatPermissions
        : null;
    last_message = map.containsKey('last_message')
        ? TlMap.fromMap(map['last_message']) as Message
        : null;
    if (map.containsKey('positions') && map['positions'] != null) {
      positions = [];
      var someValues = map['positions'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatPosition;
        positions?.add(obj);
      }
    }
    message_sender_id = map.containsKey('message_sender_id')
        ? TlMap.fromMap(map['message_sender_id']) as MessageSender
        : null;
    has_protected_content = map.containsKey('has_protected_content')
        ? map['has_protected_content']
        : null;
    is_marked_as_unread = map.containsKey('is_marked_as_unread')
        ? map['is_marked_as_unread']
        : null;
    is_blocked = map.containsKey('is_blocked') ? map['is_blocked'] : null;
    has_scheduled_messages = map.containsKey('has_scheduled_messages')
        ? map['has_scheduled_messages']
        : null;
    can_be_deleted_only_for_self =
        map.containsKey('can_be_deleted_only_for_self')
            ? map['can_be_deleted_only_for_self']
            : null;
    can_be_deleted_for_all_users =
        map.containsKey('can_be_deleted_for_all_users')
            ? map['can_be_deleted_for_all_users']
            : null;
    can_be_reported =
        map.containsKey('can_be_reported') ? map['can_be_reported'] : null;
    default_disable_notification =
        map.containsKey('default_disable_notification')
            ? map['default_disable_notification']
            : null;
    unread_count = map.containsKey('unread_count') ? map['unread_count'] : null;
    last_read_inbox_message_id = map.containsKey('last_read_inbox_message_id')
        ? map['last_read_inbox_message_id']
        : null;
    last_read_outbox_message_id = map.containsKey('last_read_outbox_message_id')
        ? map['last_read_outbox_message_id']
        : null;
    unread_mention_count = map.containsKey('unread_mention_count')
        ? map['unread_mention_count']
        : null;
    notification_settings = map.containsKey('notification_settings')
        ? TlMap.fromMap(map['notification_settings'])
            as ChatNotificationSettings
        : null;
    message_ttl = map.containsKey('message_ttl') ? map['message_ttl'] : null;
    theme_name = map.containsKey('theme_name') ? map['theme_name'] : null;
    action_bar = map.containsKey('action_bar')
        ? TlMap.fromMap(map['action_bar']) as ChatActionBar
        : null;
    video_chat = map.containsKey('video_chat')
        ? TlMap.fromMap(map['video_chat']) as VideoChat
        : null;
    pending_join_requests = map.containsKey('pending_join_requests')
        ? TlMap.fromMap(map['pending_join_requests']) as ChatJoinRequestsInfo
        : null;
    reply_markup_message_id = map.containsKey('reply_markup_message_id')
        ? map['reply_markup_message_id']
        : null;
    draft_message = map.containsKey('draft_message')
        ? TlMap.fromMap(map['draft_message']) as DraftMessage
        : null;
    client_data = map.containsKey('client_data') ? map['client_data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'permissions': permissions?.toMap(skipNulls: skipNulls),
      'last_message': last_message?.toMap(skipNulls: skipNulls),
      'positions': positions?.toMap(skipNulls: skipNulls),
      'message_sender_id': message_sender_id?.toMap(skipNulls: skipNulls),
      'has_protected_content':
          has_protected_content?.toMap(skipNulls: skipNulls),
      'is_marked_as_unread': is_marked_as_unread?.toMap(skipNulls: skipNulls),
      'is_blocked': is_blocked?.toMap(skipNulls: skipNulls),
      'has_scheduled_messages':
          has_scheduled_messages?.toMap(skipNulls: skipNulls),
      'can_be_deleted_only_for_self':
          can_be_deleted_only_for_self?.toMap(skipNulls: skipNulls),
      'can_be_deleted_for_all_users':
          can_be_deleted_for_all_users?.toMap(skipNulls: skipNulls),
      'can_be_reported': can_be_reported?.toMap(skipNulls: skipNulls),
      'default_disable_notification':
          default_disable_notification?.toMap(skipNulls: skipNulls),
      'unread_count': unread_count?.toMap(skipNulls: skipNulls),
      'last_read_inbox_message_id':
          last_read_inbox_message_id?.toMap(skipNulls: skipNulls),
      'last_read_outbox_message_id':
          last_read_outbox_message_id?.toMap(skipNulls: skipNulls),
      'unread_mention_count': unread_mention_count?.toMap(skipNulls: skipNulls),
      'notification_settings':
          notification_settings?.toMap(skipNulls: skipNulls),
      'message_ttl': message_ttl?.toMap(skipNulls: skipNulls),
      'theme_name': theme_name?.toMap(skipNulls: skipNulls),
      'action_bar': action_bar?.toMap(skipNulls: skipNulls),
      'video_chat': video_chat?.toMap(skipNulls: skipNulls),
      'pending_join_requests':
          pending_join_requests?.toMap(skipNulls: skipNulls),
      'reply_markup_message_id':
          reply_markup_message_id?.toMap(skipNulls: skipNulls),
      'draft_message': draft_message?.toMap(skipNulls: skipNulls),
      'client_data': client_data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Chats extends TdObject {
  String get tlType => 'chats';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<int53>? chat_ids;

  Chats({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<int53>? this.chat_ids,
  });

  Chats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('chat_ids') && map['chat_ids'] != null) {
      chat_ids = [];
      var someValues = map['chat_ids'];
      for (var someValue in someValues) {
        chat_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'chat_ids': chat_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatNearby extends TdObject {
  String get tlType => 'chatNearby';

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? distance;

  ChatNearby({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.distance,
  });

  ChatNearby.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    distance = map.containsKey('distance') ? map['distance'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'distance': distance?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatsNearby extends TdObject {
  String get tlType => 'chatsNearby';

  string? extra;
  int? client_id;
  vector<ChatNearby>? users_nearby;
  vector<ChatNearby>? supergroups_nearby;

  ChatsNearby({
    string? this.extra,
    int? this.client_id,
    vector<ChatNearby>? this.users_nearby,
    vector<ChatNearby>? this.supergroups_nearby,
  });

  ChatsNearby.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('users_nearby') && map['users_nearby'] != null) {
      users_nearby = [];
      var someValues = map['users_nearby'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatNearby;
        users_nearby?.add(obj);
      }
    }
    if (map.containsKey('supergroups_nearby') &&
        map['supergroups_nearby'] != null) {
      supergroups_nearby = [];
      var someValues = map['supergroups_nearby'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatNearby;
        supergroups_nearby?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'users_nearby': users_nearby?.toMap(skipNulls: skipNulls),
      'supergroups_nearby': supergroups_nearby?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PublicChatTypeHasUsername extends PublicChatType {
  String get tlType => 'publicChatTypeHasUsername';

  string? extra;
  int? client_id;

  PublicChatTypeHasUsername({
    string? this.extra,
    int? this.client_id,
  });

  PublicChatTypeHasUsername.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PublicChatTypeIsLocationBased extends PublicChatType {
  String get tlType => 'publicChatTypeIsLocationBased';

  string? extra;
  int? client_id;

  PublicChatTypeIsLocationBased({
    string? this.extra,
    int? this.client_id,
  });

  PublicChatTypeIsLocationBased.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionBarReportSpam extends ChatActionBar {
  String get tlType => 'chatActionBarReportSpam';

  string? extra;
  int? client_id;
  Bool? can_unarchive;

  ChatActionBarReportSpam({
    string? this.extra,
    int? this.client_id,
    Bool? this.can_unarchive,
  });

  ChatActionBarReportSpam.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    can_unarchive =
        map.containsKey('can_unarchive') ? map['can_unarchive'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'can_unarchive': can_unarchive?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionBarReportUnrelatedLocation extends ChatActionBar {
  String get tlType => 'chatActionBarReportUnrelatedLocation';

  string? extra;
  int? client_id;

  ChatActionBarReportUnrelatedLocation({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionBarReportUnrelatedLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionBarInviteMembers extends ChatActionBar {
  String get tlType => 'chatActionBarInviteMembers';

  string? extra;
  int? client_id;

  ChatActionBarInviteMembers({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionBarInviteMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionBarReportAddBlock extends ChatActionBar {
  String get tlType => 'chatActionBarReportAddBlock';

  string? extra;
  int? client_id;
  Bool? can_unarchive;
  int32? distance;

  ChatActionBarReportAddBlock({
    string? this.extra,
    int? this.client_id,
    Bool? this.can_unarchive,
    int32? this.distance,
  });

  ChatActionBarReportAddBlock.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    can_unarchive =
        map.containsKey('can_unarchive') ? map['can_unarchive'] : null;
    distance = map.containsKey('distance') ? map['distance'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'can_unarchive': can_unarchive?.toMap(skipNulls: skipNulls),
      'distance': distance?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionBarAddContact extends ChatActionBar {
  String get tlType => 'chatActionBarAddContact';

  string? extra;
  int? client_id;

  ChatActionBarAddContact({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionBarAddContact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionBarSharePhoneNumber extends ChatActionBar {
  String get tlType => 'chatActionBarSharePhoneNumber';

  string? extra;
  int? client_id;

  ChatActionBarSharePhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionBarSharePhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionBarJoinRequest extends ChatActionBar {
  String get tlType => 'chatActionBarJoinRequest';

  string? extra;
  int? client_id;
  string? title;
  Bool? is_channel;
  int32? request_date;

  ChatActionBarJoinRequest({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    Bool? this.is_channel,
    int32? this.request_date,
  });

  ChatActionBarJoinRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    is_channel = map.containsKey('is_channel') ? map['is_channel'] : null;
    request_date = map.containsKey('request_date') ? map['request_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'is_channel': is_channel?.toMap(skipNulls: skipNulls),
      'request_date': request_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class KeyboardButtonTypeText extends KeyboardButtonType {
  String get tlType => 'keyboardButtonTypeText';

  string? extra;
  int? client_id;

  KeyboardButtonTypeText({
    string? this.extra,
    int? this.client_id,
  });

  KeyboardButtonTypeText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class KeyboardButtonTypeRequestPhoneNumber extends KeyboardButtonType {
  String get tlType => 'keyboardButtonTypeRequestPhoneNumber';

  string? extra;
  int? client_id;

  KeyboardButtonTypeRequestPhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  KeyboardButtonTypeRequestPhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class KeyboardButtonTypeRequestLocation extends KeyboardButtonType {
  String get tlType => 'keyboardButtonTypeRequestLocation';

  string? extra;
  int? client_id;

  KeyboardButtonTypeRequestLocation({
    string? this.extra,
    int? this.client_id,
  });

  KeyboardButtonTypeRequestLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class KeyboardButtonTypeRequestPoll extends KeyboardButtonType {
  String get tlType => 'keyboardButtonTypeRequestPoll';

  string? extra;
  int? client_id;
  Bool? force_regular;
  Bool? force_quiz;

  KeyboardButtonTypeRequestPoll({
    string? this.extra,
    int? this.client_id,
    Bool? this.force_regular,
    Bool? this.force_quiz,
  });

  KeyboardButtonTypeRequestPoll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    force_regular =
        map.containsKey('force_regular') ? map['force_regular'] : null;
    force_quiz = map.containsKey('force_quiz') ? map['force_quiz'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'force_regular': force_regular?.toMap(skipNulls: skipNulls),
      'force_quiz': force_quiz?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class KeyboardButton extends TdObject {
  String get tlType => 'keyboardButton';

  string? extra;
  int? client_id;
  string? text;
  KeyboardButtonType? type;

  KeyboardButton({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    KeyboardButtonType? this.type,
  });

  KeyboardButton.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as KeyboardButtonType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButtonTypeUrl extends InlineKeyboardButtonType {
  String get tlType => 'inlineKeyboardButtonTypeUrl';

  string? extra;
  int? client_id;
  string? url;

  InlineKeyboardButtonTypeUrl({
    string? this.extra,
    int? this.client_id,
    string? this.url,
  });

  InlineKeyboardButtonTypeUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButtonTypeLoginUrl extends InlineKeyboardButtonType {
  String get tlType => 'inlineKeyboardButtonTypeLoginUrl';

  string? extra;
  int? client_id;
  string? url;
  int53? id;
  string? forward_text;

  InlineKeyboardButtonTypeLoginUrl({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    int53? this.id,
    string? this.forward_text,
  });

  InlineKeyboardButtonTypeLoginUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    forward_text = map.containsKey('forward_text') ? map['forward_text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'forward_text': forward_text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButtonTypeCallback extends InlineKeyboardButtonType {
  String get tlType => 'inlineKeyboardButtonTypeCallback';

  string? extra;
  int? client_id;
  bytes? data;

  InlineKeyboardButtonTypeCallback({
    string? this.extra,
    int? this.client_id,
    bytes? this.data,
  });

  InlineKeyboardButtonTypeCallback.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButtonTypeCallbackWithPassword
    extends InlineKeyboardButtonType {
  String get tlType => 'inlineKeyboardButtonTypeCallbackWithPassword';

  string? extra;
  int? client_id;
  bytes? data;

  InlineKeyboardButtonTypeCallbackWithPassword({
    string? this.extra,
    int? this.client_id,
    bytes? this.data,
  });

  InlineKeyboardButtonTypeCallbackWithPassword.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButtonTypeCallbackGame extends InlineKeyboardButtonType {
  String get tlType => 'inlineKeyboardButtonTypeCallbackGame';

  string? extra;
  int? client_id;

  InlineKeyboardButtonTypeCallbackGame({
    string? this.extra,
    int? this.client_id,
  });

  InlineKeyboardButtonTypeCallbackGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButtonTypeSwitchInline extends InlineKeyboardButtonType {
  String get tlType => 'inlineKeyboardButtonTypeSwitchInline';

  string? extra;
  int? client_id;
  string? query;
  Bool? in_current_chat;

  InlineKeyboardButtonTypeSwitchInline({
    string? this.extra,
    int? this.client_id,
    string? this.query,
    Bool? this.in_current_chat,
  });

  InlineKeyboardButtonTypeSwitchInline.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    in_current_chat =
        map.containsKey('in_current_chat') ? map['in_current_chat'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'in_current_chat': in_current_chat?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButtonTypeBuy extends InlineKeyboardButtonType {
  String get tlType => 'inlineKeyboardButtonTypeBuy';

  string? extra;
  int? client_id;

  InlineKeyboardButtonTypeBuy({
    string? this.extra,
    int? this.client_id,
  });

  InlineKeyboardButtonTypeBuy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButtonTypeUser extends InlineKeyboardButtonType {
  String get tlType => 'inlineKeyboardButtonTypeUser';

  string? extra;
  int? client_id;
  int53? user_id;

  InlineKeyboardButtonTypeUser({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  InlineKeyboardButtonTypeUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineKeyboardButton extends TdObject {
  String get tlType => 'inlineKeyboardButton';

  string? extra;
  int? client_id;
  string? text;
  InlineKeyboardButtonType? type;

  InlineKeyboardButton({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    InlineKeyboardButtonType? this.type,
  });

  InlineKeyboardButton.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as InlineKeyboardButtonType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReplyMarkupRemoveKeyboard extends ReplyMarkup {
  String get tlType => 'replyMarkupRemoveKeyboard';

  string? extra;
  int? client_id;
  Bool? is_personal;

  ReplyMarkupRemoveKeyboard({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_personal,
  });

  ReplyMarkupRemoveKeyboard.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_personal = map.containsKey('is_personal') ? map['is_personal'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_personal': is_personal?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReplyMarkupForceReply extends ReplyMarkup {
  String get tlType => 'replyMarkupForceReply';

  string? extra;
  int? client_id;
  Bool? is_personal;
  string? input_field_placeholder;

  ReplyMarkupForceReply({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_personal,
    string? this.input_field_placeholder,
  });

  ReplyMarkupForceReply.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_personal = map.containsKey('is_personal') ? map['is_personal'] : null;
    input_field_placeholder = map.containsKey('input_field_placeholder')
        ? map['input_field_placeholder']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_personal': is_personal?.toMap(skipNulls: skipNulls),
      'input_field_placeholder':
          input_field_placeholder?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReplyMarkupShowKeyboard extends ReplyMarkup {
  String get tlType => 'replyMarkupShowKeyboard';

  string? extra;
  int? client_id;
  vector<vector<KeyboardButton>>? rows;
  Bool? resize_keyboard;
  Bool? one_time;
  Bool? is_personal;
  string? input_field_placeholder;

  ReplyMarkupShowKeyboard({
    string? this.extra,
    int? this.client_id,
    vector<vector<KeyboardButton>>? this.rows,
    Bool? this.resize_keyboard,
    Bool? this.one_time,
    Bool? this.is_personal,
    string? this.input_field_placeholder,
  });

  ReplyMarkupShowKeyboard.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('rows') && map['rows'] != null) {
      rows = [];
      var someOtherValues = map['rows'];
      for (var someValues in someOtherValues) {
        var objs = <KeyboardButton>[];
        for (var someValue in someValues) {
          var obj = TlMap.fromMap(someValue) as KeyboardButton;
          objs.add(obj);
        }
        rows?.add(objs);
      }
    }
    resize_keyboard =
        map.containsKey('resize_keyboard') ? map['resize_keyboard'] : null;
    one_time = map.containsKey('one_time') ? map['one_time'] : null;
    is_personal = map.containsKey('is_personal') ? map['is_personal'] : null;
    input_field_placeholder = map.containsKey('input_field_placeholder')
        ? map['input_field_placeholder']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'rows': rows?.toMap(skipNulls: skipNulls),
      'resize_keyboard': resize_keyboard?.toMap(skipNulls: skipNulls),
      'one_time': one_time?.toMap(skipNulls: skipNulls),
      'is_personal': is_personal?.toMap(skipNulls: skipNulls),
      'input_field_placeholder':
          input_field_placeholder?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReplyMarkupInlineKeyboard extends ReplyMarkup {
  String get tlType => 'replyMarkupInlineKeyboard';

  string? extra;
  int? client_id;
  vector<vector<InlineKeyboardButton>>? rows;

  ReplyMarkupInlineKeyboard({
    string? this.extra,
    int? this.client_id,
    vector<vector<InlineKeyboardButton>>? this.rows,
  });

  ReplyMarkupInlineKeyboard.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('rows') && map['rows'] != null) {
      rows = [];
      var someOtherValues = map['rows'];
      for (var someValues in someOtherValues) {
        var objs = <InlineKeyboardButton>[];
        for (var someValue in someValues) {
          var obj = TlMap.fromMap(someValue) as InlineKeyboardButton;
          objs.add(obj);
        }
        rows?.add(objs);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'rows': rows?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LoginUrlInfoOpen extends LoginUrlInfo {
  String get tlType => 'loginUrlInfoOpen';

  string? extra;
  int? client_id;
  string? url;
  Bool? skip_confirm;

  LoginUrlInfoOpen({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    Bool? this.skip_confirm,
  });

  LoginUrlInfoOpen.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    skip_confirm = map.containsKey('skip_confirm') ? map['skip_confirm'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'skip_confirm': skip_confirm?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LoginUrlInfoRequestConfirmation extends LoginUrlInfo {
  String get tlType => 'loginUrlInfoRequestConfirmation';

  string? extra;
  int? client_id;
  string? url;
  string? domain;
  int53? bot_user_id;
  Bool? request_write_access;

  LoginUrlInfoRequestConfirmation({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    string? this.domain,
    int53? this.bot_user_id,
    Bool? this.request_write_access,
  });

  LoginUrlInfoRequestConfirmation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    domain = map.containsKey('domain') ? map['domain'] : null;
    bot_user_id = map.containsKey('bot_user_id') ? map['bot_user_id'] : null;
    request_write_access = map.containsKey('request_write_access')
        ? map['request_write_access']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'domain': domain?.toMap(skipNulls: skipNulls),
      'bot_user_id': bot_user_id?.toMap(skipNulls: skipNulls),
      'request_write_access': request_write_access?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageThreadInfo extends TdObject {
  String get tlType => 'messageThreadInfo';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_thread_id;
  MessageReplyInfo? reply_info;
  int32? unread_message_count;
  vector<Message>? messages;
  DraftMessage? draft_message;

  MessageThreadInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_thread_id,
    MessageReplyInfo? this.reply_info,
    int32? this.unread_message_count,
    vector<Message>? this.messages,
    DraftMessage? this.draft_message,
  });

  MessageThreadInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    reply_info = map.containsKey('reply_info')
        ? TlMap.fromMap(map['reply_info']) as MessageReplyInfo
        : null;
    unread_message_count = map.containsKey('unread_message_count')
        ? map['unread_message_count']
        : null;
    if (map.containsKey('messages') && map['messages'] != null) {
      messages = [];
      var someValues = map['messages'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Message;
        messages?.add(obj);
      }
    }
    draft_message = map.containsKey('draft_message')
        ? TlMap.fromMap(map['draft_message']) as DraftMessage
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'reply_info': reply_info?.toMap(skipNulls: skipNulls),
      'unread_message_count': unread_message_count?.toMap(skipNulls: skipNulls),
      'messages': messages?.toMap(skipNulls: skipNulls),
      'draft_message': draft_message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextPlain extends RichText {
  String get tlType => 'richTextPlain';

  string? extra;
  int? client_id;
  string? text;

  RichTextPlain({
    string? this.extra,
    int? this.client_id,
    string? this.text,
  });

  RichTextPlain.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextBold extends RichText {
  String get tlType => 'richTextBold';

  string? extra;
  int? client_id;
  RichText? text;

  RichTextBold({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  RichTextBold.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextItalic extends RichText {
  String get tlType => 'richTextItalic';

  string? extra;
  int? client_id;
  RichText? text;

  RichTextItalic({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  RichTextItalic.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextUnderline extends RichText {
  String get tlType => 'richTextUnderline';

  string? extra;
  int? client_id;
  RichText? text;

  RichTextUnderline({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  RichTextUnderline.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextStrikethrough extends RichText {
  String get tlType => 'richTextStrikethrough';

  string? extra;
  int? client_id;
  RichText? text;

  RichTextStrikethrough({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  RichTextStrikethrough.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextFixed extends RichText {
  String get tlType => 'richTextFixed';

  string? extra;
  int? client_id;
  RichText? text;

  RichTextFixed({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  RichTextFixed.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextUrl extends RichText {
  String get tlType => 'richTextUrl';

  string? extra;
  int? client_id;
  RichText? text;
  string? url;
  Bool? is_cached;

  RichTextUrl({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    string? this.url,
    Bool? this.is_cached,
  });

  RichTextUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    url = map.containsKey('url') ? map['url'] : null;
    is_cached = map.containsKey('is_cached') ? map['is_cached'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'is_cached': is_cached?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextEmailAddress extends RichText {
  String get tlType => 'richTextEmailAddress';

  string? extra;
  int? client_id;
  RichText? text;
  string? email_address;

  RichTextEmailAddress({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    string? this.email_address,
  });

  RichTextEmailAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    email_address =
        map.containsKey('email_address') ? map['email_address'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'email_address': email_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextSubscript extends RichText {
  String get tlType => 'richTextSubscript';

  string? extra;
  int? client_id;
  RichText? text;

  RichTextSubscript({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  RichTextSubscript.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextSuperscript extends RichText {
  String get tlType => 'richTextSuperscript';

  string? extra;
  int? client_id;
  RichText? text;

  RichTextSuperscript({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  RichTextSuperscript.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextMarked extends RichText {
  String get tlType => 'richTextMarked';

  string? extra;
  int? client_id;
  RichText? text;

  RichTextMarked({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  RichTextMarked.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextPhoneNumber extends RichText {
  String get tlType => 'richTextPhoneNumber';

  string? extra;
  int? client_id;
  RichText? text;
  string? phone_number;

  RichTextPhoneNumber({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    string? this.phone_number,
  });

  RichTextPhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextIcon extends RichText {
  String get tlType => 'richTextIcon';

  string? extra;
  int? client_id;
  Document? document;
  int32? width;
  int32? height;

  RichTextIcon({
    string? this.extra,
    int? this.client_id,
    Document? this.document,
    int32? this.width,
    int32? this.height,
  });

  RichTextIcon.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    document = map.containsKey('document')
        ? TlMap.fromMap(map['document']) as Document
        : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'document': document?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextReference extends RichText {
  String get tlType => 'richTextReference';

  string? extra;
  int? client_id;
  RichText? text;
  string? anchor_name;
  string? url;

  RichTextReference({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    string? this.anchor_name,
    string? this.url,
  });

  RichTextReference.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    anchor_name = map.containsKey('anchor_name') ? map['anchor_name'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'anchor_name': anchor_name?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextAnchor extends RichText {
  String get tlType => 'richTextAnchor';

  string? extra;
  int? client_id;
  string? name;

  RichTextAnchor({
    string? this.extra,
    int? this.client_id,
    string? this.name,
  });

  RichTextAnchor.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTextAnchorLink extends RichText {
  String get tlType => 'richTextAnchorLink';

  string? extra;
  int? client_id;
  RichText? text;
  string? anchor_name;
  string? url;

  RichTextAnchorLink({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    string? this.anchor_name,
    string? this.url,
  });

  RichTextAnchorLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    anchor_name = map.containsKey('anchor_name') ? map['anchor_name'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'anchor_name': anchor_name?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RichTexts extends RichText {
  String get tlType => 'richTexts';

  string? extra;
  int? client_id;
  vector<RichText>? texts;

  RichTexts({
    string? this.extra,
    int? this.client_id,
    vector<RichText>? this.texts,
  });

  RichTexts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('texts') && map['texts'] != null) {
      texts = [];
      var someValues = map['texts'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as RichText;
        texts?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'texts': texts?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockCaption extends TdObject {
  String get tlType => 'pageBlockCaption';

  string? extra;
  int? client_id;
  RichText? text;
  RichText? credit;

  PageBlockCaption({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    RichText? this.credit,
  });

  PageBlockCaption.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    credit = map.containsKey('credit')
        ? TlMap.fromMap(map['credit']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'credit': credit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockListItem extends TdObject {
  String get tlType => 'pageBlockListItem';

  string? extra;
  int? client_id;
  string? label;
  vector<PageBlock>? page_blocks;

  PageBlockListItem({
    string? this.extra,
    int? this.client_id,
    string? this.label,
    vector<PageBlock>? this.page_blocks,
  });

  PageBlockListItem.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    label = map.containsKey('label') ? map['label'] : null;
    if (map.containsKey('page_blocks') && map['page_blocks'] != null) {
      page_blocks = [];
      var someValues = map['page_blocks'];
      for (var someValue in someValues) {
        page_blocks?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'label': label?.toMap(skipNulls: skipNulls),
      'page_blocks': page_blocks?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockHorizontalAlignmentLeft extends PageBlockHorizontalAlignment {
  String get tlType => 'pageBlockHorizontalAlignmentLeft';

  string? extra;
  int? client_id;

  PageBlockHorizontalAlignmentLeft({
    string? this.extra,
    int? this.client_id,
  });

  PageBlockHorizontalAlignmentLeft.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockHorizontalAlignmentCenter extends PageBlockHorizontalAlignment {
  String get tlType => 'pageBlockHorizontalAlignmentCenter';

  string? extra;
  int? client_id;

  PageBlockHorizontalAlignmentCenter({
    string? this.extra,
    int? this.client_id,
  });

  PageBlockHorizontalAlignmentCenter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockHorizontalAlignmentRight extends PageBlockHorizontalAlignment {
  String get tlType => 'pageBlockHorizontalAlignmentRight';

  string? extra;
  int? client_id;

  PageBlockHorizontalAlignmentRight({
    string? this.extra,
    int? this.client_id,
  });

  PageBlockHorizontalAlignmentRight.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockVerticalAlignmentTop extends PageBlockVerticalAlignment {
  String get tlType => 'pageBlockVerticalAlignmentTop';

  string? extra;
  int? client_id;

  PageBlockVerticalAlignmentTop({
    string? this.extra,
    int? this.client_id,
  });

  PageBlockVerticalAlignmentTop.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockVerticalAlignmentMiddle extends PageBlockVerticalAlignment {
  String get tlType => 'pageBlockVerticalAlignmentMiddle';

  string? extra;
  int? client_id;

  PageBlockVerticalAlignmentMiddle({
    string? this.extra,
    int? this.client_id,
  });

  PageBlockVerticalAlignmentMiddle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockVerticalAlignmentBottom extends PageBlockVerticalAlignment {
  String get tlType => 'pageBlockVerticalAlignmentBottom';

  string? extra;
  int? client_id;

  PageBlockVerticalAlignmentBottom({
    string? this.extra,
    int? this.client_id,
  });

  PageBlockVerticalAlignmentBottom.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockTableCell extends TdObject {
  String get tlType => 'pageBlockTableCell';

  string? extra;
  int? client_id;
  RichText? text;
  Bool? is_header;
  int32? colspan;
  int32? rowspan;
  PageBlockHorizontalAlignment? align;
  PageBlockVerticalAlignment? valign;

  PageBlockTableCell({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    Bool? this.is_header,
    int32? this.colspan,
    int32? this.rowspan,
    PageBlockHorizontalAlignment? this.align,
    PageBlockVerticalAlignment? this.valign,
  });

  PageBlockTableCell.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    is_header = map.containsKey('is_header') ? map['is_header'] : null;
    colspan = map.containsKey('colspan') ? map['colspan'] : null;
    rowspan = map.containsKey('rowspan') ? map['rowspan'] : null;
    align = map.containsKey('align')
        ? TlMap.fromMap(map['align']) as PageBlockHorizontalAlignment
        : null;
    valign = map.containsKey('valign')
        ? TlMap.fromMap(map['valign']) as PageBlockVerticalAlignment
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'is_header': is_header?.toMap(skipNulls: skipNulls),
      'colspan': colspan?.toMap(skipNulls: skipNulls),
      'rowspan': rowspan?.toMap(skipNulls: skipNulls),
      'align': align?.toMap(skipNulls: skipNulls),
      'valign': valign?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockRelatedArticle extends TdObject {
  String get tlType => 'pageBlockRelatedArticle';

  string? extra;
  int? client_id;
  string? url;
  string? title;
  string? description;
  Photo? photo;
  string? author;
  int32? publish_date;

  PageBlockRelatedArticle({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    string? this.title,
    string? this.description,
    Photo? this.photo,
    string? this.author,
    int32? this.publish_date,
  });

  PageBlockRelatedArticle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    author = map.containsKey('author') ? map['author'] : null;
    publish_date = map.containsKey('publish_date') ? map['publish_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'author': author?.toMap(skipNulls: skipNulls),
      'publish_date': publish_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockTitle extends PageBlock {
  String get tlType => 'pageBlockTitle';

  string? extra;
  int? client_id;
  RichText? title;

  PageBlockTitle({
    string? this.extra,
    int? this.client_id,
    RichText? this.title,
  });

  PageBlockTitle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title')
        ? TlMap.fromMap(map['title']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockSubtitle extends PageBlock {
  String get tlType => 'pageBlockSubtitle';

  string? extra;
  int? client_id;
  RichText? subtitle;

  PageBlockSubtitle({
    string? this.extra,
    int? this.client_id,
    RichText? this.subtitle,
  });

  PageBlockSubtitle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    subtitle = map.containsKey('subtitle')
        ? TlMap.fromMap(map['subtitle']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'subtitle': subtitle?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockAuthorDate extends PageBlock {
  String get tlType => 'pageBlockAuthorDate';

  string? extra;
  int? client_id;
  RichText? author;
  int32? publish_date;

  PageBlockAuthorDate({
    string? this.extra,
    int? this.client_id,
    RichText? this.author,
    int32? this.publish_date,
  });

  PageBlockAuthorDate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    author = map.containsKey('author')
        ? TlMap.fromMap(map['author']) as RichText
        : null;
    publish_date = map.containsKey('publish_date') ? map['publish_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'author': author?.toMap(skipNulls: skipNulls),
      'publish_date': publish_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockHeader extends PageBlock {
  String get tlType => 'pageBlockHeader';

  string? extra;
  int? client_id;
  RichText? header;

  PageBlockHeader({
    string? this.extra,
    int? this.client_id,
    RichText? this.header,
  });

  PageBlockHeader.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    header = map.containsKey('header')
        ? TlMap.fromMap(map['header']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'header': header?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockSubheader extends PageBlock {
  String get tlType => 'pageBlockSubheader';

  string? extra;
  int? client_id;
  RichText? subheader;

  PageBlockSubheader({
    string? this.extra,
    int? this.client_id,
    RichText? this.subheader,
  });

  PageBlockSubheader.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    subheader = map.containsKey('subheader')
        ? TlMap.fromMap(map['subheader']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'subheader': subheader?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockKicker extends PageBlock {
  String get tlType => 'pageBlockKicker';

  string? extra;
  int? client_id;
  RichText? kicker;

  PageBlockKicker({
    string? this.extra,
    int? this.client_id,
    RichText? this.kicker,
  });

  PageBlockKicker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    kicker = map.containsKey('kicker')
        ? TlMap.fromMap(map['kicker']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'kicker': kicker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockParagraph extends PageBlock {
  String get tlType => 'pageBlockParagraph';

  string? extra;
  int? client_id;
  RichText? text;

  PageBlockParagraph({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
  });

  PageBlockParagraph.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockPreformatted extends PageBlock {
  String get tlType => 'pageBlockPreformatted';

  string? extra;
  int? client_id;
  RichText? text;
  string? language;

  PageBlockPreformatted({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    string? this.language,
  });

  PageBlockPreformatted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    language = map.containsKey('language') ? map['language'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'language': language?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockFooter extends PageBlock {
  String get tlType => 'pageBlockFooter';

  string? extra;
  int? client_id;
  RichText? footer;

  PageBlockFooter({
    string? this.extra,
    int? this.client_id,
    RichText? this.footer,
  });

  PageBlockFooter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    footer = map.containsKey('footer')
        ? TlMap.fromMap(map['footer']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'footer': footer?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockDivider extends PageBlock {
  String get tlType => 'pageBlockDivider';

  string? extra;
  int? client_id;

  PageBlockDivider({
    string? this.extra,
    int? this.client_id,
  });

  PageBlockDivider.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockAnchor extends PageBlock {
  String get tlType => 'pageBlockAnchor';

  string? extra;
  int? client_id;
  string? name;

  PageBlockAnchor({
    string? this.extra,
    int? this.client_id,
    string? this.name,
  });

  PageBlockAnchor.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockList extends PageBlock {
  String get tlType => 'pageBlockList';

  string? extra;
  int? client_id;
  vector<PageBlockListItem>? items;

  PageBlockList({
    string? this.extra,
    int? this.client_id,
    vector<PageBlockListItem>? this.items,
  });

  PageBlockList.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('items') && map['items'] != null) {
      items = [];
      var someValues = map['items'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PageBlockListItem;
        items?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'items': items?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockBlockQuote extends PageBlock {
  String get tlType => 'pageBlockBlockQuote';

  string? extra;
  int? client_id;
  RichText? text;
  RichText? credit;

  PageBlockBlockQuote({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    RichText? this.credit,
  });

  PageBlockBlockQuote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    credit = map.containsKey('credit')
        ? TlMap.fromMap(map['credit']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'credit': credit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockPullQuote extends PageBlock {
  String get tlType => 'pageBlockPullQuote';

  string? extra;
  int? client_id;
  RichText? text;
  RichText? credit;

  PageBlockPullQuote({
    string? this.extra,
    int? this.client_id,
    RichText? this.text,
    RichText? this.credit,
  });

  PageBlockPullQuote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text =
        map.containsKey('text') ? TlMap.fromMap(map['text']) as RichText : null;
    credit = map.containsKey('credit')
        ? TlMap.fromMap(map['credit']) as RichText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'credit': credit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockAnimation extends PageBlock {
  String get tlType => 'pageBlockAnimation';

  string? extra;
  int? client_id;
  Animation? animation;
  PageBlockCaption? caption;
  Bool? need_autoplay;

  PageBlockAnimation({
    string? this.extra,
    int? this.client_id,
    Animation? this.animation,
    PageBlockCaption? this.caption,
    Bool? this.need_autoplay,
  });

  PageBlockAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as Animation
        : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
    need_autoplay =
        map.containsKey('need_autoplay') ? map['need_autoplay'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'need_autoplay': need_autoplay?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockAudio extends PageBlock {
  String get tlType => 'pageBlockAudio';

  string? extra;
  int? client_id;
  Audio? audio;
  PageBlockCaption? caption;

  PageBlockAudio({
    string? this.extra,
    int? this.client_id,
    Audio? this.audio,
    PageBlockCaption? this.caption,
  });

  PageBlockAudio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    audio =
        map.containsKey('audio') ? TlMap.fromMap(map['audio']) as Audio : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'audio': audio?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockPhoto extends PageBlock {
  String get tlType => 'pageBlockPhoto';

  string? extra;
  int? client_id;
  Photo? photo;
  PageBlockCaption? caption;
  string? url;

  PageBlockPhoto({
    string? this.extra,
    int? this.client_id,
    Photo? this.photo,
    PageBlockCaption? this.caption,
    string? this.url,
  });

  PageBlockPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockVideo extends PageBlock {
  String get tlType => 'pageBlockVideo';

  string? extra;
  int? client_id;
  Video? video;
  PageBlockCaption? caption;
  Bool? need_autoplay;
  Bool? is_looped;

  PageBlockVideo({
    string? this.extra,
    int? this.client_id,
    Video? this.video,
    PageBlockCaption? this.caption,
    Bool? this.need_autoplay,
    Bool? this.is_looped,
  });

  PageBlockVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    video =
        map.containsKey('video') ? TlMap.fromMap(map['video']) as Video : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
    need_autoplay =
        map.containsKey('need_autoplay') ? map['need_autoplay'] : null;
    is_looped = map.containsKey('is_looped') ? map['is_looped'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'video': video?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'need_autoplay': need_autoplay?.toMap(skipNulls: skipNulls),
      'is_looped': is_looped?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockVoiceNote extends PageBlock {
  String get tlType => 'pageBlockVoiceNote';

  string? extra;
  int? client_id;
  VoiceNote? voice_note;
  PageBlockCaption? caption;

  PageBlockVoiceNote({
    string? this.extra,
    int? this.client_id,
    VoiceNote? this.voice_note,
    PageBlockCaption? this.caption,
  });

  PageBlockVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    voice_note = map.containsKey('voice_note')
        ? TlMap.fromMap(map['voice_note']) as VoiceNote
        : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'voice_note': voice_note?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockCover extends PageBlock {
  String get tlType => 'pageBlockCover';

  string? extra;
  int? client_id;
  PageBlock? cover;

  PageBlockCover({
    string? this.extra,
    int? this.client_id,
    PageBlock? this.cover,
  });

  PageBlockCover.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    cover = map.containsKey('cover')
        ? TlMap.fromMap(map['cover']) as PageBlock
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'cover': cover?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockEmbedded extends PageBlock {
  String get tlType => 'pageBlockEmbedded';

  string? extra;
  int? client_id;
  string? url;
  string? html;
  Photo? poster_photo;
  int32? width;
  int32? height;
  PageBlockCaption? caption;
  Bool? is_full_width;
  Bool? allow_scrolling;

  PageBlockEmbedded({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    string? this.html,
    Photo? this.poster_photo,
    int32? this.width,
    int32? this.height,
    PageBlockCaption? this.caption,
    Bool? this.is_full_width,
    Bool? this.allow_scrolling,
  });

  PageBlockEmbedded.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    html = map.containsKey('html') ? map['html'] : null;
    poster_photo = map.containsKey('poster_photo')
        ? TlMap.fromMap(map['poster_photo']) as Photo
        : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
    is_full_width =
        map.containsKey('is_full_width') ? map['is_full_width'] : null;
    allow_scrolling =
        map.containsKey('allow_scrolling') ? map['allow_scrolling'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'html': html?.toMap(skipNulls: skipNulls),
      'poster_photo': poster_photo?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'is_full_width': is_full_width?.toMap(skipNulls: skipNulls),
      'allow_scrolling': allow_scrolling?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockEmbeddedPost extends PageBlock {
  String get tlType => 'pageBlockEmbeddedPost';

  string? extra;
  int? client_id;
  string? url;
  string? author;
  Photo? author_photo;
  int32? date;
  vector<PageBlock>? page_blocks;
  PageBlockCaption? caption;

  PageBlockEmbeddedPost({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    string? this.author,
    Photo? this.author_photo,
    int32? this.date,
    vector<PageBlock>? this.page_blocks,
    PageBlockCaption? this.caption,
  });

  PageBlockEmbeddedPost.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    author = map.containsKey('author') ? map['author'] : null;
    author_photo = map.containsKey('author_photo')
        ? TlMap.fromMap(map['author_photo']) as Photo
        : null;
    date = map.containsKey('date') ? map['date'] : null;
    if (map.containsKey('page_blocks') && map['page_blocks'] != null) {
      page_blocks = [];
      var someValues = map['page_blocks'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PageBlock;
        page_blocks?.add(obj);
      }
    }
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'author': author?.toMap(skipNulls: skipNulls),
      'author_photo': author_photo?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'page_blocks': page_blocks?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockCollage extends PageBlock {
  String get tlType => 'pageBlockCollage';

  string? extra;
  int? client_id;
  vector<PageBlock>? page_blocks;
  PageBlockCaption? caption;

  PageBlockCollage({
    string? this.extra,
    int? this.client_id,
    vector<PageBlock>? this.page_blocks,
    PageBlockCaption? this.caption,
  });

  PageBlockCollage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('page_blocks') && map['page_blocks'] != null) {
      page_blocks = [];
      var someValues = map['page_blocks'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PageBlock;
        page_blocks?.add(obj);
      }
    }
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'page_blocks': page_blocks?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockSlideshow extends PageBlock {
  String get tlType => 'pageBlockSlideshow';

  string? extra;
  int? client_id;
  vector<PageBlock>? page_blocks;
  PageBlockCaption? caption;

  PageBlockSlideshow({
    string? this.extra,
    int? this.client_id,
    vector<PageBlock>? this.page_blocks,
    PageBlockCaption? this.caption,
  });

  PageBlockSlideshow.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('page_blocks') && map['page_blocks'] != null) {
      page_blocks = [];
      var someValues = map['page_blocks'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PageBlock;
        page_blocks?.add(obj);
      }
    }
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'page_blocks': page_blocks?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockChatLink extends PageBlock {
  String get tlType => 'pageBlockChatLink';

  string? extra;
  int? client_id;
  string? title;
  ChatPhotoInfo? photo;
  string? username;

  PageBlockChatLink({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    ChatPhotoInfo? this.photo,
    string? this.username,
  });

  PageBlockChatLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as ChatPhotoInfo
        : null;
    username = map.containsKey('username') ? map['username'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockTable extends PageBlock {
  String get tlType => 'pageBlockTable';

  string? extra;
  int? client_id;
  RichText? caption;
  vector<vector<PageBlockTableCell>>? cells;
  Bool? is_bordered;
  Bool? is_striped;

  PageBlockTable({
    string? this.extra,
    int? this.client_id,
    RichText? this.caption,
    vector<vector<PageBlockTableCell>>? this.cells,
    Bool? this.is_bordered,
    Bool? this.is_striped,
  });

  PageBlockTable.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as RichText
        : null;
    if (map.containsKey('cells') && map['cells'] != null) {
      cells = [];
      var someOtherValues = map['cells'];
      for (var someValues in someOtherValues) {
        var objs = <PageBlockTableCell>[];
        for (var someValue in someValues) {
          var obj = TlMap.fromMap(someValue) as PageBlockTableCell;
          objs.add(obj);
        }
        cells?.add(objs);
      }
    }
    is_bordered = map.containsKey('is_bordered') ? map['is_bordered'] : null;
    is_striped = map.containsKey('is_striped') ? map['is_striped'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'cells': cells?.toMap(skipNulls: skipNulls),
      'is_bordered': is_bordered?.toMap(skipNulls: skipNulls),
      'is_striped': is_striped?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockDetails extends PageBlock {
  String get tlType => 'pageBlockDetails';

  string? extra;
  int? client_id;
  RichText? header;
  vector<PageBlock>? page_blocks;
  Bool? is_open;

  PageBlockDetails({
    string? this.extra,
    int? this.client_id,
    RichText? this.header,
    vector<PageBlock>? this.page_blocks,
    Bool? this.is_open,
  });

  PageBlockDetails.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    header = map.containsKey('header')
        ? TlMap.fromMap(map['header']) as RichText
        : null;
    if (map.containsKey('page_blocks') && map['page_blocks'] != null) {
      page_blocks = [];
      var someValues = map['page_blocks'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PageBlock;
        page_blocks?.add(obj);
      }
    }
    is_open = map.containsKey('is_open') ? map['is_open'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'header': header?.toMap(skipNulls: skipNulls),
      'page_blocks': page_blocks?.toMap(skipNulls: skipNulls),
      'is_open': is_open?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockRelatedArticles extends PageBlock {
  String get tlType => 'pageBlockRelatedArticles';

  string? extra;
  int? client_id;
  RichText? header;
  vector<PageBlockRelatedArticle>? articles;

  PageBlockRelatedArticles({
    string? this.extra,
    int? this.client_id,
    RichText? this.header,
    vector<PageBlockRelatedArticle>? this.articles,
  });

  PageBlockRelatedArticles.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    header = map.containsKey('header')
        ? TlMap.fromMap(map['header']) as RichText
        : null;
    if (map.containsKey('articles') && map['articles'] != null) {
      articles = [];
      var someValues = map['articles'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PageBlockRelatedArticle;
        articles?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'header': header?.toMap(skipNulls: skipNulls),
      'articles': articles?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PageBlockMap extends PageBlock {
  String get tlType => 'pageBlockMap';

  string? extra;
  int? client_id;
  Location? location;
  int32? zoom;
  int32? width;
  int32? height;
  PageBlockCaption? caption;

  PageBlockMap({
    string? this.extra,
    int? this.client_id,
    Location? this.location,
    int32? this.zoom,
    int32? this.width,
    int32? this.height,
    PageBlockCaption? this.caption,
  });

  PageBlockMap.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    zoom = map.containsKey('zoom') ? map['zoom'] : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as PageBlockCaption
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'zoom': zoom?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class WebPageInstantView extends TdObject {
  String get tlType => 'webPageInstantView';

  string? extra;
  int? client_id;
  vector<PageBlock>? page_blocks;
  int32? view_count;
  int32? version;
  Bool? is_rtl;
  Bool? is_full;
  InternalLinkType? feedback_link;

  WebPageInstantView({
    string? this.extra,
    int? this.client_id,
    vector<PageBlock>? this.page_blocks,
    int32? this.view_count,
    int32? this.version,
    Bool? this.is_rtl,
    Bool? this.is_full,
    InternalLinkType? this.feedback_link,
  });

  WebPageInstantView.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('page_blocks') && map['page_blocks'] != null) {
      page_blocks = [];
      var someValues = map['page_blocks'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PageBlock;
        page_blocks?.add(obj);
      }
    }
    view_count = map.containsKey('view_count') ? map['view_count'] : null;
    version = map.containsKey('version') ? map['version'] : null;
    is_rtl = map.containsKey('is_rtl') ? map['is_rtl'] : null;
    is_full = map.containsKey('is_full') ? map['is_full'] : null;
    feedback_link = map.containsKey('feedback_link')
        ? TlMap.fromMap(map['feedback_link']) as InternalLinkType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'page_blocks': page_blocks?.toMap(skipNulls: skipNulls),
      'view_count': view_count?.toMap(skipNulls: skipNulls),
      'version': version?.toMap(skipNulls: skipNulls),
      'is_rtl': is_rtl?.toMap(skipNulls: skipNulls),
      'is_full': is_full?.toMap(skipNulls: skipNulls),
      'feedback_link': feedback_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class WebPage extends TdObject {
  String get tlType => 'webPage';

  string? extra;
  int? client_id;
  string? url;
  string? display_url;
  string? type;
  string? site_name;
  string? title;
  FormattedText? description;
  Photo? photo;
  string? embed_url;
  string? embed_type;
  int32? embed_width;
  int32? embed_height;
  int32? duration;
  string? author;
  Animation? animation;
  Audio? audio;
  Document? document;
  Sticker? sticker;
  Video? video;
  VideoNote? video_note;
  VoiceNote? voice_note;
  int32? instant_view_version;

  WebPage({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    string? this.display_url,
    string? this.type,
    string? this.site_name,
    string? this.title,
    FormattedText? this.description,
    Photo? this.photo,
    string? this.embed_url,
    string? this.embed_type,
    int32? this.embed_width,
    int32? this.embed_height,
    int32? this.duration,
    string? this.author,
    Animation? this.animation,
    Audio? this.audio,
    Document? this.document,
    Sticker? this.sticker,
    Video? this.video,
    VideoNote? this.video_note,
    VoiceNote? this.voice_note,
    int32? this.instant_view_version,
  });

  WebPage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    display_url = map.containsKey('display_url') ? map['display_url'] : null;
    type = map.containsKey('type') ? map['type'] : null;
    site_name = map.containsKey('site_name') ? map['site_name'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description')
        ? TlMap.fromMap(map['description']) as FormattedText
        : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    embed_url = map.containsKey('embed_url') ? map['embed_url'] : null;
    embed_type = map.containsKey('embed_type') ? map['embed_type'] : null;
    embed_width = map.containsKey('embed_width') ? map['embed_width'] : null;
    embed_height = map.containsKey('embed_height') ? map['embed_height'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    author = map.containsKey('author') ? map['author'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as Animation
        : null;
    audio =
        map.containsKey('audio') ? TlMap.fromMap(map['audio']) as Audio : null;
    document = map.containsKey('document')
        ? TlMap.fromMap(map['document']) as Document
        : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as Sticker
        : null;
    video =
        map.containsKey('video') ? TlMap.fromMap(map['video']) as Video : null;
    video_note = map.containsKey('video_note')
        ? TlMap.fromMap(map['video_note']) as VideoNote
        : null;
    voice_note = map.containsKey('voice_note')
        ? TlMap.fromMap(map['voice_note']) as VoiceNote
        : null;
    instant_view_version = map.containsKey('instant_view_version')
        ? map['instant_view_version']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'display_url': display_url?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'site_name': site_name?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'embed_url': embed_url?.toMap(skipNulls: skipNulls),
      'embed_type': embed_type?.toMap(skipNulls: skipNulls),
      'embed_width': embed_width?.toMap(skipNulls: skipNulls),
      'embed_height': embed_height?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'author': author?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
      'audio': audio?.toMap(skipNulls: skipNulls),
      'document': document?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
      'video': video?.toMap(skipNulls: skipNulls),
      'video_note': video_note?.toMap(skipNulls: skipNulls),
      'voice_note': voice_note?.toMap(skipNulls: skipNulls),
      'instant_view_version': instant_view_version?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CountryInfo extends TdObject {
  String get tlType => 'countryInfo';

  string? extra;
  int? client_id;
  string? country_code;
  string? name;
  string? english_name;
  Bool? is_hidden;
  vector<string>? calling_codes;

  CountryInfo({
    string? this.extra,
    int? this.client_id,
    string? this.country_code,
    string? this.name,
    string? this.english_name,
    Bool? this.is_hidden,
    vector<string>? this.calling_codes,
  });

  CountryInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    country_code = map.containsKey('country_code') ? map['country_code'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    english_name = map.containsKey('english_name') ? map['english_name'] : null;
    is_hidden = map.containsKey('is_hidden') ? map['is_hidden'] : null;
    if (map.containsKey('calling_codes') && map['calling_codes'] != null) {
      calling_codes = [];
      var someValues = map['calling_codes'];
      for (var someValue in someValues) {
        calling_codes?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'country_code': country_code?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'english_name': english_name?.toMap(skipNulls: skipNulls),
      'is_hidden': is_hidden?.toMap(skipNulls: skipNulls),
      'calling_codes': calling_codes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Countries extends TdObject {
  String get tlType => 'countries';

  string? extra;
  int? client_id;
  vector<CountryInfo>? countries;

  Countries({
    string? this.extra,
    int? this.client_id,
    vector<CountryInfo>? this.countries,
  });

  Countries.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('countries') && map['countries'] != null) {
      countries = [];
      var someValues = map['countries'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as CountryInfo;
        countries?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'countries': countries?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PhoneNumberInfo extends TdObject {
  String get tlType => 'phoneNumberInfo';

  string? extra;
  int? client_id;
  CountryInfo? country;
  string? country_calling_code;
  string? formatted_phone_number;

  PhoneNumberInfo({
    string? this.extra,
    int? this.client_id,
    CountryInfo? this.country,
    string? this.country_calling_code,
    string? this.formatted_phone_number,
  });

  PhoneNumberInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    country = map.containsKey('country')
        ? TlMap.fromMap(map['country']) as CountryInfo
        : null;
    country_calling_code = map.containsKey('country_calling_code')
        ? map['country_calling_code']
        : null;
    formatted_phone_number = map.containsKey('formatted_phone_number')
        ? map['formatted_phone_number']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'country': country?.toMap(skipNulls: skipNulls),
      'country_calling_code': country_calling_code?.toMap(skipNulls: skipNulls),
      'formatted_phone_number':
          formatted_phone_number?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BankCardActionOpenUrl extends TdObject {
  String get tlType => 'bankCardActionOpenUrl';

  string? extra;
  int? client_id;
  string? text;
  string? url;

  BankCardActionOpenUrl({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    string? this.url,
  });

  BankCardActionOpenUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BankCardInfo extends TdObject {
  String get tlType => 'bankCardInfo';

  string? extra;
  int? client_id;
  string? title;
  vector<BankCardActionOpenUrl>? actions;

  BankCardInfo({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    vector<BankCardActionOpenUrl>? this.actions,
  });

  BankCardInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    if (map.containsKey('actions') && map['actions'] != null) {
      actions = [];
      var someValues = map['actions'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as BankCardActionOpenUrl;
        actions?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'actions': actions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Address extends TdObject {
  String get tlType => 'address';

  string? extra;
  int? client_id;
  string? country_code;
  string? state;
  string? city;
  string? street_line1;
  string? street_line2;
  string? postal_code;

  Address({
    string? this.extra,
    int? this.client_id,
    string? this.country_code,
    string? this.state,
    string? this.city,
    string? this.street_line1,
    string? this.street_line2,
    string? this.postal_code,
  });

  Address.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    country_code = map.containsKey('country_code') ? map['country_code'] : null;
    state = map.containsKey('state') ? map['state'] : null;
    city = map.containsKey('city') ? map['city'] : null;
    street_line1 = map.containsKey('street_line1') ? map['street_line1'] : null;
    street_line2 = map.containsKey('street_line2') ? map['street_line2'] : null;
    postal_code = map.containsKey('postal_code') ? map['postal_code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'country_code': country_code?.toMap(skipNulls: skipNulls),
      'state': state?.toMap(skipNulls: skipNulls),
      'city': city?.toMap(skipNulls: skipNulls),
      'street_line1': street_line1?.toMap(skipNulls: skipNulls),
      'street_line2': street_line2?.toMap(skipNulls: skipNulls),
      'postal_code': postal_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LabeledPricePart extends TdObject {
  String get tlType => 'labeledPricePart';

  string? extra;
  int? client_id;
  string? label;
  int53? amount;

  LabeledPricePart({
    string? this.extra,
    int? this.client_id,
    string? this.label,
    int53? this.amount,
  });

  LabeledPricePart.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    label = map.containsKey('label') ? map['label'] : null;
    amount = map.containsKey('amount') ? map['amount'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'label': label?.toMap(skipNulls: skipNulls),
      'amount': amount?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Invoice extends TdObject {
  String get tlType => 'invoice';

  string? extra;
  int? client_id;
  string? currency;
  vector<LabeledPricePart>? price_parts;
  int53? max_tip_amount;
  vector<int53>? suggested_tip_amounts;
  Bool? is_test;
  Bool? need_name;
  Bool? need_phone_number;
  Bool? need_email_address;
  Bool? need_shipping_address;
  Bool? send_phone_number_to_provider;
  Bool? send_email_address_to_provider;
  Bool? is_flexible;

  Invoice({
    string? this.extra,
    int? this.client_id,
    string? this.currency,
    vector<LabeledPricePart>? this.price_parts,
    int53? this.max_tip_amount,
    vector<int53>? this.suggested_tip_amounts,
    Bool? this.is_test,
    Bool? this.need_name,
    Bool? this.need_phone_number,
    Bool? this.need_email_address,
    Bool? this.need_shipping_address,
    Bool? this.send_phone_number_to_provider,
    Bool? this.send_email_address_to_provider,
    Bool? this.is_flexible,
  });

  Invoice.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    currency = map.containsKey('currency') ? map['currency'] : null;
    if (map.containsKey('price_parts') && map['price_parts'] != null) {
      price_parts = [];
      var someValues = map['price_parts'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as LabeledPricePart;
        price_parts?.add(obj);
      }
    }
    max_tip_amount =
        map.containsKey('max_tip_amount') ? map['max_tip_amount'] : null;
    if (map.containsKey('suggested_tip_amounts') &&
        map['suggested_tip_amounts'] != null) {
      suggested_tip_amounts = [];
      var someValues = map['suggested_tip_amounts'];
      for (var someValue in someValues) {
        suggested_tip_amounts?.add(someValue);
      }
    }
    is_test = map.containsKey('is_test') ? map['is_test'] : null;
    need_name = map.containsKey('need_name') ? map['need_name'] : null;
    need_phone_number =
        map.containsKey('need_phone_number') ? map['need_phone_number'] : null;
    need_email_address = map.containsKey('need_email_address')
        ? map['need_email_address']
        : null;
    need_shipping_address = map.containsKey('need_shipping_address')
        ? map['need_shipping_address']
        : null;
    send_phone_number_to_provider =
        map.containsKey('send_phone_number_to_provider')
            ? map['send_phone_number_to_provider']
            : null;
    send_email_address_to_provider =
        map.containsKey('send_email_address_to_provider')
            ? map['send_email_address_to_provider']
            : null;
    is_flexible = map.containsKey('is_flexible') ? map['is_flexible'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'currency': currency?.toMap(skipNulls: skipNulls),
      'price_parts': price_parts?.toMap(skipNulls: skipNulls),
      'max_tip_amount': max_tip_amount?.toMap(skipNulls: skipNulls),
      'suggested_tip_amounts':
          suggested_tip_amounts?.toMap(skipNulls: skipNulls),
      'is_test': is_test?.toMap(skipNulls: skipNulls),
      'need_name': need_name?.toMap(skipNulls: skipNulls),
      'need_phone_number': need_phone_number?.toMap(skipNulls: skipNulls),
      'need_email_address': need_email_address?.toMap(skipNulls: skipNulls),
      'need_shipping_address':
          need_shipping_address?.toMap(skipNulls: skipNulls),
      'send_phone_number_to_provider':
          send_phone_number_to_provider?.toMap(skipNulls: skipNulls),
      'send_email_address_to_provider':
          send_email_address_to_provider?.toMap(skipNulls: skipNulls),
      'is_flexible': is_flexible?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class OrderInfo extends TdObject {
  String get tlType => 'orderInfo';

  string? extra;
  int? client_id;
  string? name;
  string? phone_number;
  string? email_address;
  Address? shipping_address;

  OrderInfo({
    string? this.extra,
    int? this.client_id,
    string? this.name,
    string? this.phone_number,
    string? this.email_address,
    Address? this.shipping_address,
  });

  OrderInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
    email_address =
        map.containsKey('email_address') ? map['email_address'] : null;
    shipping_address = map.containsKey('shipping_address')
        ? TlMap.fromMap(map['shipping_address']) as Address
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
      'email_address': email_address?.toMap(skipNulls: skipNulls),
      'shipping_address': shipping_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ShippingOption extends TdObject {
  String get tlType => 'shippingOption';

  string? extra;
  int? client_id;
  string? id;
  string? title;
  vector<LabeledPricePart>? price_parts;

  ShippingOption({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.title,
    vector<LabeledPricePart>? this.price_parts,
  });

  ShippingOption.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    if (map.containsKey('price_parts') && map['price_parts'] != null) {
      price_parts = [];
      var someValues = map['price_parts'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as LabeledPricePart;
        price_parts?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'price_parts': price_parts?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SavedCredentials extends TdObject {
  String get tlType => 'savedCredentials';

  string? extra;
  int? client_id;
  string? id;
  string? title;

  SavedCredentials({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.title,
  });

  SavedCredentials.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputCredentialsSaved extends InputCredentials {
  String get tlType => 'inputCredentialsSaved';

  string? extra;
  int? client_id;
  string? saved_credentials_id;

  InputCredentialsSaved({
    string? this.extra,
    int? this.client_id,
    string? this.saved_credentials_id,
  });

  InputCredentialsSaved.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    saved_credentials_id = map.containsKey('saved_credentials_id')
        ? map['saved_credentials_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'saved_credentials_id': saved_credentials_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputCredentialsNew extends InputCredentials {
  String get tlType => 'inputCredentialsNew';

  string? extra;
  int? client_id;
  string? data;
  Bool? allow_save;

  InputCredentialsNew({
    string? this.extra,
    int? this.client_id,
    string? this.data,
    Bool? this.allow_save,
  });

  InputCredentialsNew.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
    allow_save = map.containsKey('allow_save') ? map['allow_save'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
      'allow_save': allow_save?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputCredentialsApplePay extends InputCredentials {
  String get tlType => 'inputCredentialsApplePay';

  string? extra;
  int? client_id;
  string? data;

  InputCredentialsApplePay({
    string? this.extra,
    int? this.client_id,
    string? this.data,
  });

  InputCredentialsApplePay.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputCredentialsGooglePay extends InputCredentials {
  String get tlType => 'inputCredentialsGooglePay';

  string? extra;
  int? client_id;
  string? data;

  InputCredentialsGooglePay({
    string? this.extra,
    int? this.client_id,
    string? this.data,
  });

  InputCredentialsGooglePay.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PaymentsProviderStripe extends TdObject {
  String get tlType => 'paymentsProviderStripe';

  string? extra;
  int? client_id;
  string? publishable_key;
  Bool? need_country;
  Bool? need_postal_code;
  Bool? need_cardholder_name;

  PaymentsProviderStripe({
    string? this.extra,
    int? this.client_id,
    string? this.publishable_key,
    Bool? this.need_country,
    Bool? this.need_postal_code,
    Bool? this.need_cardholder_name,
  });

  PaymentsProviderStripe.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    publishable_key =
        map.containsKey('publishable_key') ? map['publishable_key'] : null;
    need_country = map.containsKey('need_country') ? map['need_country'] : null;
    need_postal_code =
        map.containsKey('need_postal_code') ? map['need_postal_code'] : null;
    need_cardholder_name = map.containsKey('need_cardholder_name')
        ? map['need_cardholder_name']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'publishable_key': publishable_key?.toMap(skipNulls: skipNulls),
      'need_country': need_country?.toMap(skipNulls: skipNulls),
      'need_postal_code': need_postal_code?.toMap(skipNulls: skipNulls),
      'need_cardholder_name': need_cardholder_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PaymentFormTheme extends TdObject {
  String get tlType => 'paymentFormTheme';

  string? extra;
  int? client_id;
  int32? background_color;
  int32? text_color;
  int32? hint_color;
  int32? link_color;
  int32? button_color;
  int32? button_text_color;

  PaymentFormTheme({
    string? this.extra,
    int? this.client_id,
    int32? this.background_color,
    int32? this.text_color,
    int32? this.hint_color,
    int32? this.link_color,
    int32? this.button_color,
    int32? this.button_text_color,
  });

  PaymentFormTheme.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    background_color =
        map.containsKey('background_color') ? map['background_color'] : null;
    text_color = map.containsKey('text_color') ? map['text_color'] : null;
    hint_color = map.containsKey('hint_color') ? map['hint_color'] : null;
    link_color = map.containsKey('link_color') ? map['link_color'] : null;
    button_color = map.containsKey('button_color') ? map['button_color'] : null;
    button_text_color =
        map.containsKey('button_text_color') ? map['button_text_color'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'background_color': background_color?.toMap(skipNulls: skipNulls),
      'text_color': text_color?.toMap(skipNulls: skipNulls),
      'hint_color': hint_color?.toMap(skipNulls: skipNulls),
      'link_color': link_color?.toMap(skipNulls: skipNulls),
      'button_color': button_color?.toMap(skipNulls: skipNulls),
      'button_text_color': button_text_color?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PaymentForm extends TdObject {
  String get tlType => 'paymentForm';

  string? extra;
  int? client_id;
  int64? id;
  Invoice? invoice;
  string? url;
  int53? seller_bot_user_id;
  int53? payments_provider_user_id;
  PaymentsProviderStripe? payments_provider;
  OrderInfo? saved_order_info;
  SavedCredentials? saved_credentials;
  Bool? can_save_credentials;
  Bool? need_password;

  PaymentForm({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    Invoice? this.invoice,
    string? this.url,
    int53? this.seller_bot_user_id,
    int53? this.payments_provider_user_id,
    PaymentsProviderStripe? this.payments_provider,
    OrderInfo? this.saved_order_info,
    SavedCredentials? this.saved_credentials,
    Bool? this.can_save_credentials,
    Bool? this.need_password,
  });

  PaymentForm.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    invoice = map.containsKey('invoice')
        ? TlMap.fromMap(map['invoice']) as Invoice
        : null;
    url = map.containsKey('url') ? map['url'] : null;
    seller_bot_user_id = map.containsKey('seller_bot_user_id')
        ? map['seller_bot_user_id']
        : null;
    payments_provider_user_id = map.containsKey('payments_provider_user_id')
        ? map['payments_provider_user_id']
        : null;
    payments_provider = map.containsKey('payments_provider')
        ? TlMap.fromMap(map['payments_provider']) as PaymentsProviderStripe
        : null;
    saved_order_info = map.containsKey('saved_order_info')
        ? TlMap.fromMap(map['saved_order_info']) as OrderInfo
        : null;
    saved_credentials = map.containsKey('saved_credentials')
        ? TlMap.fromMap(map['saved_credentials']) as SavedCredentials
        : null;
    can_save_credentials = map.containsKey('can_save_credentials')
        ? map['can_save_credentials']
        : null;
    need_password =
        map.containsKey('need_password') ? map['need_password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'invoice': invoice?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'seller_bot_user_id': seller_bot_user_id?.toMap(skipNulls: skipNulls),
      'payments_provider_user_id':
          payments_provider_user_id?.toMap(skipNulls: skipNulls),
      'payments_provider': payments_provider?.toMap(skipNulls: skipNulls),
      'saved_order_info': saved_order_info?.toMap(skipNulls: skipNulls),
      'saved_credentials': saved_credentials?.toMap(skipNulls: skipNulls),
      'can_save_credentials': can_save_credentials?.toMap(skipNulls: skipNulls),
      'need_password': need_password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ValidatedOrderInfo extends TdObject {
  String get tlType => 'validatedOrderInfo';

  string? extra;
  int? client_id;
  string? order_info_id;
  vector<ShippingOption>? shipping_options;

  ValidatedOrderInfo({
    string? this.extra,
    int? this.client_id,
    string? this.order_info_id,
    vector<ShippingOption>? this.shipping_options,
  });

  ValidatedOrderInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    order_info_id =
        map.containsKey('order_info_id') ? map['order_info_id'] : null;
    if (map.containsKey('shipping_options') &&
        map['shipping_options'] != null) {
      shipping_options = [];
      var someValues = map['shipping_options'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ShippingOption;
        shipping_options?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'order_info_id': order_info_id?.toMap(skipNulls: skipNulls),
      'shipping_options': shipping_options?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PaymentResult extends TdObject {
  String get tlType => 'paymentResult';

  string? extra;
  int? client_id;
  Bool? success;
  string? verification_url;

  PaymentResult({
    string? this.extra,
    int? this.client_id,
    Bool? this.success,
    string? this.verification_url,
  });

  PaymentResult.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    success = map.containsKey('success') ? map['success'] : null;
    verification_url =
        map.containsKey('verification_url') ? map['verification_url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'success': success?.toMap(skipNulls: skipNulls),
      'verification_url': verification_url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PaymentReceipt extends TdObject {
  String get tlType => 'paymentReceipt';

  string? extra;
  int? client_id;
  string? title;
  string? description;
  Photo? photo;
  int32? date;
  int53? seller_bot_user_id;
  int53? payments_provider_user_id;
  Invoice? invoice;
  OrderInfo? order_info;
  ShippingOption? shipping_option;
  string? credentials_title;
  int53? tip_amount;

  PaymentReceipt({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    string? this.description,
    Photo? this.photo,
    int32? this.date,
    int53? this.seller_bot_user_id,
    int53? this.payments_provider_user_id,
    Invoice? this.invoice,
    OrderInfo? this.order_info,
    ShippingOption? this.shipping_option,
    string? this.credentials_title,
    int53? this.tip_amount,
  });

  PaymentReceipt.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    date = map.containsKey('date') ? map['date'] : null;
    seller_bot_user_id = map.containsKey('seller_bot_user_id')
        ? map['seller_bot_user_id']
        : null;
    payments_provider_user_id = map.containsKey('payments_provider_user_id')
        ? map['payments_provider_user_id']
        : null;
    invoice = map.containsKey('invoice')
        ? TlMap.fromMap(map['invoice']) as Invoice
        : null;
    order_info = map.containsKey('order_info')
        ? TlMap.fromMap(map['order_info']) as OrderInfo
        : null;
    shipping_option = map.containsKey('shipping_option')
        ? TlMap.fromMap(map['shipping_option']) as ShippingOption
        : null;
    credentials_title =
        map.containsKey('credentials_title') ? map['credentials_title'] : null;
    tip_amount = map.containsKey('tip_amount') ? map['tip_amount'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'seller_bot_user_id': seller_bot_user_id?.toMap(skipNulls: skipNulls),
      'payments_provider_user_id':
          payments_provider_user_id?.toMap(skipNulls: skipNulls),
      'invoice': invoice?.toMap(skipNulls: skipNulls),
      'order_info': order_info?.toMap(skipNulls: skipNulls),
      'shipping_option': shipping_option?.toMap(skipNulls: skipNulls),
      'credentials_title': credentials_title?.toMap(skipNulls: skipNulls),
      'tip_amount': tip_amount?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DatedFile extends TdObject {
  String get tlType => 'datedFile';

  string? extra;
  int? client_id;
  File? file;
  int32? date;

  DatedFile({
    string? this.extra,
    int? this.client_id,
    File? this.file,
    int32? this.date,
  });

  DatedFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file = map.containsKey('file') ? TlMap.fromMap(map['file']) as File : null;
    date = map.containsKey('date') ? map['date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file': file?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypePersonalDetails extends PassportElementType {
  String get tlType => 'passportElementTypePersonalDetails';

  string? extra;
  int? client_id;

  PassportElementTypePersonalDetails({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypePersonalDetails.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypePassport extends PassportElementType {
  String get tlType => 'passportElementTypePassport';

  string? extra;
  int? client_id;

  PassportElementTypePassport({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypePassport.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeDriverLicense extends PassportElementType {
  String get tlType => 'passportElementTypeDriverLicense';

  string? extra;
  int? client_id;

  PassportElementTypeDriverLicense({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeDriverLicense.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeIdentityCard extends PassportElementType {
  String get tlType => 'passportElementTypeIdentityCard';

  string? extra;
  int? client_id;

  PassportElementTypeIdentityCard({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeIdentityCard.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeInternalPassport extends PassportElementType {
  String get tlType => 'passportElementTypeInternalPassport';

  string? extra;
  int? client_id;

  PassportElementTypeInternalPassport({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeInternalPassport.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeAddress extends PassportElementType {
  String get tlType => 'passportElementTypeAddress';

  string? extra;
  int? client_id;

  PassportElementTypeAddress({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeUtilityBill extends PassportElementType {
  String get tlType => 'passportElementTypeUtilityBill';

  string? extra;
  int? client_id;

  PassportElementTypeUtilityBill({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeUtilityBill.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeBankStatement extends PassportElementType {
  String get tlType => 'passportElementTypeBankStatement';

  string? extra;
  int? client_id;

  PassportElementTypeBankStatement({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeBankStatement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeRentalAgreement extends PassportElementType {
  String get tlType => 'passportElementTypeRentalAgreement';

  string? extra;
  int? client_id;

  PassportElementTypeRentalAgreement({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeRentalAgreement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypePassportRegistration extends PassportElementType {
  String get tlType => 'passportElementTypePassportRegistration';

  string? extra;
  int? client_id;

  PassportElementTypePassportRegistration({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypePassportRegistration.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeTemporaryRegistration extends PassportElementType {
  String get tlType => 'passportElementTypeTemporaryRegistration';

  string? extra;
  int? client_id;

  PassportElementTypeTemporaryRegistration({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeTemporaryRegistration.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypePhoneNumber extends PassportElementType {
  String get tlType => 'passportElementTypePhoneNumber';

  string? extra;
  int? client_id;

  PassportElementTypePhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypePhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTypeEmailAddress extends PassportElementType {
  String get tlType => 'passportElementTypeEmailAddress';

  string? extra;
  int? client_id;

  PassportElementTypeEmailAddress({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementTypeEmailAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Date extends TdObject {
  String get tlType => 'date';

  string? extra;
  int? client_id;
  int32? day;
  int32? month;
  int32? year;

  Date({
    string? this.extra,
    int? this.client_id,
    int32? this.day,
    int32? this.month,
    int32? this.year,
  });

  Date.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    day = map.containsKey('day') ? map['day'] : null;
    month = map.containsKey('month') ? map['month'] : null;
    year = map.containsKey('year') ? map['year'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'day': day?.toMap(skipNulls: skipNulls),
      'month': month?.toMap(skipNulls: skipNulls),
      'year': year?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PersonalDetails extends TdObject {
  String get tlType => 'personalDetails';

  string? extra;
  int? client_id;
  string? first_name;
  string? middle_name;
  string? last_name;
  string? native_first_name;
  string? native_middle_name;
  string? native_last_name;
  Date? birthdate;
  string? gender;
  string? country_code;
  string? residence_country_code;

  PersonalDetails({
    string? this.extra,
    int? this.client_id,
    string? this.first_name,
    string? this.middle_name,
    string? this.last_name,
    string? this.native_first_name,
    string? this.native_middle_name,
    string? this.native_last_name,
    Date? this.birthdate,
    string? this.gender,
    string? this.country_code,
    string? this.residence_country_code,
  });

  PersonalDetails.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    first_name = map.containsKey('first_name') ? map['first_name'] : null;
    middle_name = map.containsKey('middle_name') ? map['middle_name'] : null;
    last_name = map.containsKey('last_name') ? map['last_name'] : null;
    native_first_name =
        map.containsKey('native_first_name') ? map['native_first_name'] : null;
    native_middle_name = map.containsKey('native_middle_name')
        ? map['native_middle_name']
        : null;
    native_last_name =
        map.containsKey('native_last_name') ? map['native_last_name'] : null;
    birthdate = map.containsKey('birthdate')
        ? TlMap.fromMap(map['birthdate']) as Date
        : null;
    gender = map.containsKey('gender') ? map['gender'] : null;
    country_code = map.containsKey('country_code') ? map['country_code'] : null;
    residence_country_code = map.containsKey('residence_country_code')
        ? map['residence_country_code']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'first_name': first_name?.toMap(skipNulls: skipNulls),
      'middle_name': middle_name?.toMap(skipNulls: skipNulls),
      'last_name': last_name?.toMap(skipNulls: skipNulls),
      'native_first_name': native_first_name?.toMap(skipNulls: skipNulls),
      'native_middle_name': native_middle_name?.toMap(skipNulls: skipNulls),
      'native_last_name': native_last_name?.toMap(skipNulls: skipNulls),
      'birthdate': birthdate?.toMap(skipNulls: skipNulls),
      'gender': gender?.toMap(skipNulls: skipNulls),
      'country_code': country_code?.toMap(skipNulls: skipNulls),
      'residence_country_code':
          residence_country_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class IdentityDocument extends TdObject {
  String get tlType => 'identityDocument';

  string? extra;
  int? client_id;
  string? number;
  Date? expiry_date;
  DatedFile? front_side;
  DatedFile? reverse_side;
  DatedFile? selfie;
  vector<DatedFile>? translation;

  IdentityDocument({
    string? this.extra,
    int? this.client_id,
    string? this.number,
    Date? this.expiry_date,
    DatedFile? this.front_side,
    DatedFile? this.reverse_side,
    DatedFile? this.selfie,
    vector<DatedFile>? this.translation,
  });

  IdentityDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    number = map.containsKey('number') ? map['number'] : null;
    expiry_date = map.containsKey('expiry_date')
        ? TlMap.fromMap(map['expiry_date']) as Date
        : null;
    front_side = map.containsKey('front_side')
        ? TlMap.fromMap(map['front_side']) as DatedFile
        : null;
    reverse_side = map.containsKey('reverse_side')
        ? TlMap.fromMap(map['reverse_side']) as DatedFile
        : null;
    selfie = map.containsKey('selfie')
        ? TlMap.fromMap(map['selfie']) as DatedFile
        : null;
    if (map.containsKey('translation') && map['translation'] != null) {
      translation = [];
      var someValues = map['translation'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as DatedFile;
        translation?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'number': number?.toMap(skipNulls: skipNulls),
      'expiry_date': expiry_date?.toMap(skipNulls: skipNulls),
      'front_side': front_side?.toMap(skipNulls: skipNulls),
      'reverse_side': reverse_side?.toMap(skipNulls: skipNulls),
      'selfie': selfie?.toMap(skipNulls: skipNulls),
      'translation': translation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputIdentityDocument extends TdObject {
  String get tlType => 'inputIdentityDocument';

  string? extra;
  int? client_id;
  string? number;
  Date? expiry_date;
  InputFile? front_side;
  InputFile? reverse_side;
  InputFile? selfie;
  vector<InputFile>? translation;

  InputIdentityDocument({
    string? this.extra,
    int? this.client_id,
    string? this.number,
    Date? this.expiry_date,
    InputFile? this.front_side,
    InputFile? this.reverse_side,
    InputFile? this.selfie,
    vector<InputFile>? this.translation,
  });

  InputIdentityDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    number = map.containsKey('number') ? map['number'] : null;
    expiry_date = map.containsKey('expiry_date')
        ? TlMap.fromMap(map['expiry_date']) as Date
        : null;
    front_side = map.containsKey('front_side')
        ? TlMap.fromMap(map['front_side']) as InputFile
        : null;
    reverse_side = map.containsKey('reverse_side')
        ? TlMap.fromMap(map['reverse_side']) as InputFile
        : null;
    selfie = map.containsKey('selfie')
        ? TlMap.fromMap(map['selfie']) as InputFile
        : null;
    if (map.containsKey('translation') && map['translation'] != null) {
      translation = [];
      var someValues = map['translation'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InputFile;
        translation?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'number': number?.toMap(skipNulls: skipNulls),
      'expiry_date': expiry_date?.toMap(skipNulls: skipNulls),
      'front_side': front_side?.toMap(skipNulls: skipNulls),
      'reverse_side': reverse_side?.toMap(skipNulls: skipNulls),
      'selfie': selfie?.toMap(skipNulls: skipNulls),
      'translation': translation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PersonalDocument extends TdObject {
  String get tlType => 'personalDocument';

  string? extra;
  int? client_id;
  vector<DatedFile>? files;
  vector<DatedFile>? translation;

  PersonalDocument({
    string? this.extra,
    int? this.client_id,
    vector<DatedFile>? this.files,
    vector<DatedFile>? this.translation,
  });

  PersonalDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('files') && map['files'] != null) {
      files = [];
      var someValues = map['files'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as DatedFile;
        files?.add(obj);
      }
    }
    if (map.containsKey('translation') && map['translation'] != null) {
      translation = [];
      var someValues = map['translation'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as DatedFile;
        translation?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'files': files?.toMap(skipNulls: skipNulls),
      'translation': translation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPersonalDocument extends TdObject {
  String get tlType => 'inputPersonalDocument';

  string? extra;
  int? client_id;
  vector<InputFile>? files;
  vector<InputFile>? translation;

  InputPersonalDocument({
    string? this.extra,
    int? this.client_id,
    vector<InputFile>? this.files,
    vector<InputFile>? this.translation,
  });

  InputPersonalDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('files') && map['files'] != null) {
      files = [];
      var someValues = map['files'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InputFile;
        files?.add(obj);
      }
    }
    if (map.containsKey('translation') && map['translation'] != null) {
      translation = [];
      var someValues = map['translation'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InputFile;
        translation?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'files': files?.toMap(skipNulls: skipNulls),
      'translation': translation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementPersonalDetails extends PassportElement {
  String get tlType => 'passportElementPersonalDetails';

  string? extra;
  int? client_id;
  PersonalDetails? personal_details;

  PassportElementPersonalDetails({
    string? this.extra,
    int? this.client_id,
    PersonalDetails? this.personal_details,
  });

  PassportElementPersonalDetails.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    personal_details = map.containsKey('personal_details')
        ? TlMap.fromMap(map['personal_details']) as PersonalDetails
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'personal_details': personal_details?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementPassport extends PassportElement {
  String get tlType => 'passportElementPassport';

  string? extra;
  int? client_id;
  IdentityDocument? passport;

  PassportElementPassport({
    string? this.extra,
    int? this.client_id,
    IdentityDocument? this.passport,
  });

  PassportElementPassport.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    passport = map.containsKey('passport')
        ? TlMap.fromMap(map['passport']) as IdentityDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'passport': passport?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementDriverLicense extends PassportElement {
  String get tlType => 'passportElementDriverLicense';

  string? extra;
  int? client_id;
  IdentityDocument? driver_license;

  PassportElementDriverLicense({
    string? this.extra,
    int? this.client_id,
    IdentityDocument? this.driver_license,
  });

  PassportElementDriverLicense.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    driver_license = map.containsKey('driver_license')
        ? TlMap.fromMap(map['driver_license']) as IdentityDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'driver_license': driver_license?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementIdentityCard extends PassportElement {
  String get tlType => 'passportElementIdentityCard';

  string? extra;
  int? client_id;
  IdentityDocument? identity_card;

  PassportElementIdentityCard({
    string? this.extra,
    int? this.client_id,
    IdentityDocument? this.identity_card,
  });

  PassportElementIdentityCard.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    identity_card = map.containsKey('identity_card')
        ? TlMap.fromMap(map['identity_card']) as IdentityDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'identity_card': identity_card?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementInternalPassport extends PassportElement {
  String get tlType => 'passportElementInternalPassport';

  string? extra;
  int? client_id;
  IdentityDocument? internal_passport;

  PassportElementInternalPassport({
    string? this.extra,
    int? this.client_id,
    IdentityDocument? this.internal_passport,
  });

  PassportElementInternalPassport.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    internal_passport = map.containsKey('internal_passport')
        ? TlMap.fromMap(map['internal_passport']) as IdentityDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'internal_passport': internal_passport?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementAddress extends PassportElement {
  String get tlType => 'passportElementAddress';

  string? extra;
  int? client_id;
  Address? address;

  PassportElementAddress({
    string? this.extra,
    int? this.client_id,
    Address? this.address,
  });

  PassportElementAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    address = map.containsKey('address')
        ? TlMap.fromMap(map['address']) as Address
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'address': address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementUtilityBill extends PassportElement {
  String get tlType => 'passportElementUtilityBill';

  string? extra;
  int? client_id;
  PersonalDocument? utility_bill;

  PassportElementUtilityBill({
    string? this.extra,
    int? this.client_id,
    PersonalDocument? this.utility_bill,
  });

  PassportElementUtilityBill.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    utility_bill = map.containsKey('utility_bill')
        ? TlMap.fromMap(map['utility_bill']) as PersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'utility_bill': utility_bill?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementBankStatement extends PassportElement {
  String get tlType => 'passportElementBankStatement';

  string? extra;
  int? client_id;
  PersonalDocument? bank_statement;

  PassportElementBankStatement({
    string? this.extra,
    int? this.client_id,
    PersonalDocument? this.bank_statement,
  });

  PassportElementBankStatement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bank_statement = map.containsKey('bank_statement')
        ? TlMap.fromMap(map['bank_statement']) as PersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bank_statement': bank_statement?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementRentalAgreement extends PassportElement {
  String get tlType => 'passportElementRentalAgreement';

  string? extra;
  int? client_id;
  PersonalDocument? rental_agreement;

  PassportElementRentalAgreement({
    string? this.extra,
    int? this.client_id,
    PersonalDocument? this.rental_agreement,
  });

  PassportElementRentalAgreement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    rental_agreement = map.containsKey('rental_agreement')
        ? TlMap.fromMap(map['rental_agreement']) as PersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'rental_agreement': rental_agreement?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementPassportRegistration extends PassportElement {
  String get tlType => 'passportElementPassportRegistration';

  string? extra;
  int? client_id;
  PersonalDocument? passport_registration;

  PassportElementPassportRegistration({
    string? this.extra,
    int? this.client_id,
    PersonalDocument? this.passport_registration,
  });

  PassportElementPassportRegistration.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    passport_registration = map.containsKey('passport_registration')
        ? TlMap.fromMap(map['passport_registration']) as PersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'passport_registration':
          passport_registration?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementTemporaryRegistration extends PassportElement {
  String get tlType => 'passportElementTemporaryRegistration';

  string? extra;
  int? client_id;
  PersonalDocument? temporary_registration;

  PassportElementTemporaryRegistration({
    string? this.extra,
    int? this.client_id,
    PersonalDocument? this.temporary_registration,
  });

  PassportElementTemporaryRegistration.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    temporary_registration = map.containsKey('temporary_registration')
        ? TlMap.fromMap(map['temporary_registration']) as PersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'temporary_registration':
          temporary_registration?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementPhoneNumber extends PassportElement {
  String get tlType => 'passportElementPhoneNumber';

  string? extra;
  int? client_id;
  string? phone_number;

  PassportElementPhoneNumber({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number,
  });

  PassportElementPhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementEmailAddress extends PassportElement {
  String get tlType => 'passportElementEmailAddress';

  string? extra;
  int? client_id;
  string? email_address;

  PassportElementEmailAddress({
    string? this.extra,
    int? this.client_id,
    string? this.email_address,
  });

  PassportElementEmailAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    email_address =
        map.containsKey('email_address') ? map['email_address'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'email_address': email_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementPersonalDetails extends InputPassportElement {
  String get tlType => 'inputPassportElementPersonalDetails';

  string? extra;
  int? client_id;
  PersonalDetails? personal_details;

  InputPassportElementPersonalDetails({
    string? this.extra,
    int? this.client_id,
    PersonalDetails? this.personal_details,
  });

  InputPassportElementPersonalDetails.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    personal_details = map.containsKey('personal_details')
        ? TlMap.fromMap(map['personal_details']) as PersonalDetails
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'personal_details': personal_details?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementPassport extends InputPassportElement {
  String get tlType => 'inputPassportElementPassport';

  string? extra;
  int? client_id;
  InputIdentityDocument? passport;

  InputPassportElementPassport({
    string? this.extra,
    int? this.client_id,
    InputIdentityDocument? this.passport,
  });

  InputPassportElementPassport.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    passport = map.containsKey('passport')
        ? TlMap.fromMap(map['passport']) as InputIdentityDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'passport': passport?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementDriverLicense extends InputPassportElement {
  String get tlType => 'inputPassportElementDriverLicense';

  string? extra;
  int? client_id;
  InputIdentityDocument? driver_license;

  InputPassportElementDriverLicense({
    string? this.extra,
    int? this.client_id,
    InputIdentityDocument? this.driver_license,
  });

  InputPassportElementDriverLicense.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    driver_license = map.containsKey('driver_license')
        ? TlMap.fromMap(map['driver_license']) as InputIdentityDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'driver_license': driver_license?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementIdentityCard extends InputPassportElement {
  String get tlType => 'inputPassportElementIdentityCard';

  string? extra;
  int? client_id;
  InputIdentityDocument? identity_card;

  InputPassportElementIdentityCard({
    string? this.extra,
    int? this.client_id,
    InputIdentityDocument? this.identity_card,
  });

  InputPassportElementIdentityCard.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    identity_card = map.containsKey('identity_card')
        ? TlMap.fromMap(map['identity_card']) as InputIdentityDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'identity_card': identity_card?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementInternalPassport extends InputPassportElement {
  String get tlType => 'inputPassportElementInternalPassport';

  string? extra;
  int? client_id;
  InputIdentityDocument? internal_passport;

  InputPassportElementInternalPassport({
    string? this.extra,
    int? this.client_id,
    InputIdentityDocument? this.internal_passport,
  });

  InputPassportElementInternalPassport.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    internal_passport = map.containsKey('internal_passport')
        ? TlMap.fromMap(map['internal_passport']) as InputIdentityDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'internal_passport': internal_passport?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementAddress extends InputPassportElement {
  String get tlType => 'inputPassportElementAddress';

  string? extra;
  int? client_id;
  Address? address;

  InputPassportElementAddress({
    string? this.extra,
    int? this.client_id,
    Address? this.address,
  });

  InputPassportElementAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    address = map.containsKey('address')
        ? TlMap.fromMap(map['address']) as Address
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'address': address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementUtilityBill extends InputPassportElement {
  String get tlType => 'inputPassportElementUtilityBill';

  string? extra;
  int? client_id;
  InputPersonalDocument? utility_bill;

  InputPassportElementUtilityBill({
    string? this.extra,
    int? this.client_id,
    InputPersonalDocument? this.utility_bill,
  });

  InputPassportElementUtilityBill.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    utility_bill = map.containsKey('utility_bill')
        ? TlMap.fromMap(map['utility_bill']) as InputPersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'utility_bill': utility_bill?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementBankStatement extends InputPassportElement {
  String get tlType => 'inputPassportElementBankStatement';

  string? extra;
  int? client_id;
  InputPersonalDocument? bank_statement;

  InputPassportElementBankStatement({
    string? this.extra,
    int? this.client_id,
    InputPersonalDocument? this.bank_statement,
  });

  InputPassportElementBankStatement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bank_statement = map.containsKey('bank_statement')
        ? TlMap.fromMap(map['bank_statement']) as InputPersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bank_statement': bank_statement?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementRentalAgreement extends InputPassportElement {
  String get tlType => 'inputPassportElementRentalAgreement';

  string? extra;
  int? client_id;
  InputPersonalDocument? rental_agreement;

  InputPassportElementRentalAgreement({
    string? this.extra,
    int? this.client_id,
    InputPersonalDocument? this.rental_agreement,
  });

  InputPassportElementRentalAgreement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    rental_agreement = map.containsKey('rental_agreement')
        ? TlMap.fromMap(map['rental_agreement']) as InputPersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'rental_agreement': rental_agreement?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementPassportRegistration extends InputPassportElement {
  String get tlType => 'inputPassportElementPassportRegistration';

  string? extra;
  int? client_id;
  InputPersonalDocument? passport_registration;

  InputPassportElementPassportRegistration({
    string? this.extra,
    int? this.client_id,
    InputPersonalDocument? this.passport_registration,
  });

  InputPassportElementPassportRegistration.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    passport_registration = map.containsKey('passport_registration')
        ? TlMap.fromMap(map['passport_registration']) as InputPersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'passport_registration':
          passport_registration?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementTemporaryRegistration extends InputPassportElement {
  String get tlType => 'inputPassportElementTemporaryRegistration';

  string? extra;
  int? client_id;
  InputPersonalDocument? temporary_registration;

  InputPassportElementTemporaryRegistration({
    string? this.extra,
    int? this.client_id,
    InputPersonalDocument? this.temporary_registration,
  });

  InputPassportElementTemporaryRegistration.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    temporary_registration = map.containsKey('temporary_registration')
        ? TlMap.fromMap(map['temporary_registration']) as InputPersonalDocument
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'temporary_registration':
          temporary_registration?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementPhoneNumber extends InputPassportElement {
  String get tlType => 'inputPassportElementPhoneNumber';

  string? extra;
  int? client_id;
  string? phone_number;

  InputPassportElementPhoneNumber({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number,
  });

  InputPassportElementPhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementEmailAddress extends InputPassportElement {
  String get tlType => 'inputPassportElementEmailAddress';

  string? extra;
  int? client_id;
  string? email_address;

  InputPassportElementEmailAddress({
    string? this.extra,
    int? this.client_id,
    string? this.email_address,
  });

  InputPassportElementEmailAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    email_address =
        map.containsKey('email_address') ? map['email_address'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'email_address': email_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElements extends TdObject {
  String get tlType => 'passportElements';

  string? extra;
  int? client_id;
  vector<PassportElement>? elements;

  PassportElements({
    string? this.extra,
    int? this.client_id,
    vector<PassportElement>? this.elements,
  });

  PassportElements.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('elements') && map['elements'] != null) {
      elements = [];
      var someValues = map['elements'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PassportElement;
        elements?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'elements': elements?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceUnspecified extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceUnspecified';

  string? extra;
  int? client_id;

  PassportElementErrorSourceUnspecified({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementErrorSourceUnspecified.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceDataField extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceDataField';

  string? extra;
  int? client_id;
  string? field_name;

  PassportElementErrorSourceDataField({
    string? this.extra,
    int? this.client_id,
    string? this.field_name,
  });

  PassportElementErrorSourceDataField.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    field_name = map.containsKey('field_name') ? map['field_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'field_name': field_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceFrontSide extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceFrontSide';

  string? extra;
  int? client_id;

  PassportElementErrorSourceFrontSide({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementErrorSourceFrontSide.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceReverseSide extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceReverseSide';

  string? extra;
  int? client_id;

  PassportElementErrorSourceReverseSide({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementErrorSourceReverseSide.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceSelfie extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceSelfie';

  string? extra;
  int? client_id;

  PassportElementErrorSourceSelfie({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementErrorSourceSelfie.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceTranslationFile
    extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceTranslationFile';

  string? extra;
  int? client_id;
  int32? file_index;

  PassportElementErrorSourceTranslationFile({
    string? this.extra,
    int? this.client_id,
    int32? this.file_index,
  });

  PassportElementErrorSourceTranslationFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_index = map.containsKey('file_index') ? map['file_index'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_index': file_index?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceTranslationFiles
    extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceTranslationFiles';

  string? extra;
  int? client_id;

  PassportElementErrorSourceTranslationFiles({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementErrorSourceTranslationFiles.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceFile extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceFile';

  string? extra;
  int? client_id;
  int32? file_index;

  PassportElementErrorSourceFile({
    string? this.extra,
    int? this.client_id,
    int32? this.file_index,
  });

  PassportElementErrorSourceFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_index = map.containsKey('file_index') ? map['file_index'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_index': file_index?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementErrorSourceFiles extends PassportElementErrorSource {
  String get tlType => 'passportElementErrorSourceFiles';

  string? extra;
  int? client_id;

  PassportElementErrorSourceFiles({
    string? this.extra,
    int? this.client_id,
  });

  PassportElementErrorSourceFiles.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementError extends TdObject {
  String get tlType => 'passportElementError';

  string? extra;
  int? client_id;
  PassportElementType? type;
  string? message;
  PassportElementErrorSource? source;

  PassportElementError({
    string? this.extra,
    int? this.client_id,
    PassportElementType? this.type,
    string? this.message,
    PassportElementErrorSource? this.source,
  });

  PassportElementError.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as PassportElementType
        : null;
    message = map.containsKey('message') ? map['message'] : null;
    source = map.containsKey('source')
        ? TlMap.fromMap(map['source']) as PassportElementErrorSource
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
      'source': source?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportSuitableElement extends TdObject {
  String get tlType => 'passportSuitableElement';

  string? extra;
  int? client_id;
  PassportElementType? type;
  Bool? is_selfie_required;
  Bool? is_translation_required;
  Bool? is_native_name_required;

  PassportSuitableElement({
    string? this.extra,
    int? this.client_id,
    PassportElementType? this.type,
    Bool? this.is_selfie_required,
    Bool? this.is_translation_required,
    Bool? this.is_native_name_required,
  });

  PassportSuitableElement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as PassportElementType
        : null;
    is_selfie_required = map.containsKey('is_selfie_required')
        ? map['is_selfie_required']
        : null;
    is_translation_required = map.containsKey('is_translation_required')
        ? map['is_translation_required']
        : null;
    is_native_name_required = map.containsKey('is_native_name_required')
        ? map['is_native_name_required']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'is_selfie_required': is_selfie_required?.toMap(skipNulls: skipNulls),
      'is_translation_required':
          is_translation_required?.toMap(skipNulls: skipNulls),
      'is_native_name_required':
          is_native_name_required?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportRequiredElement extends TdObject {
  String get tlType => 'passportRequiredElement';

  string? extra;
  int? client_id;
  vector<PassportSuitableElement>? suitable_elements;

  PassportRequiredElement({
    string? this.extra,
    int? this.client_id,
    vector<PassportSuitableElement>? this.suitable_elements,
  });

  PassportRequiredElement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('suitable_elements') &&
        map['suitable_elements'] != null) {
      suitable_elements = [];
      var someValues = map['suitable_elements'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PassportSuitableElement;
        suitable_elements?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'suitable_elements': suitable_elements?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportAuthorizationForm extends TdObject {
  String get tlType => 'passportAuthorizationForm';

  string? extra;
  int? client_id;
  int32? id;
  vector<PassportRequiredElement>? required_elements;
  string? privacy_policy_url;

  PassportAuthorizationForm({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    vector<PassportRequiredElement>? this.required_elements,
    string? this.privacy_policy_url,
  });

  PassportAuthorizationForm.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    if (map.containsKey('required_elements') &&
        map['required_elements'] != null) {
      required_elements = [];
      var someValues = map['required_elements'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PassportRequiredElement;
        required_elements?.add(obj);
      }
    }
    privacy_policy_url = map.containsKey('privacy_policy_url')
        ? map['privacy_policy_url']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'required_elements': required_elements?.toMap(skipNulls: skipNulls),
      'privacy_policy_url': privacy_policy_url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PassportElementsWithErrors extends TdObject {
  String get tlType => 'passportElementsWithErrors';

  string? extra;
  int? client_id;
  vector<PassportElement>? elements;
  vector<PassportElementError>? errors;

  PassportElementsWithErrors({
    string? this.extra,
    int? this.client_id,
    vector<PassportElement>? this.elements,
    vector<PassportElementError>? this.errors,
  });

  PassportElementsWithErrors.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('elements') && map['elements'] != null) {
      elements = [];
      var someValues = map['elements'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PassportElement;
        elements?.add(obj);
      }
    }
    if (map.containsKey('errors') && map['errors'] != null) {
      errors = [];
      var someValues = map['errors'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PassportElementError;
        errors?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'elements': elements?.toMap(skipNulls: skipNulls),
      'errors': errors?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EncryptedCredentials extends TdObject {
  String get tlType => 'encryptedCredentials';

  string? extra;
  int? client_id;
  bytes? data;
  bytes? hash;
  bytes? secret;

  EncryptedCredentials({
    string? this.extra,
    int? this.client_id,
    bytes? this.data,
    bytes? this.hash,
    bytes? this.secret,
  });

  EncryptedCredentials.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
    hash = map.containsKey('hash') ? map['hash'] : null;
    secret = map.containsKey('secret') ? map['secret'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
      'hash': hash?.toMap(skipNulls: skipNulls),
      'secret': secret?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EncryptedPassportElement extends TdObject {
  String get tlType => 'encryptedPassportElement';

  string? extra;
  int? client_id;
  PassportElementType? type;
  bytes? data;
  DatedFile? front_side;
  DatedFile? reverse_side;
  DatedFile? selfie;
  vector<DatedFile>? translation;
  vector<DatedFile>? files;
  string? value;
  string? hash;

  EncryptedPassportElement({
    string? this.extra,
    int? this.client_id,
    PassportElementType? this.type,
    bytes? this.data,
    DatedFile? this.front_side,
    DatedFile? this.reverse_side,
    DatedFile? this.selfie,
    vector<DatedFile>? this.translation,
    vector<DatedFile>? this.files,
    string? this.value,
    string? this.hash,
  });

  EncryptedPassportElement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as PassportElementType
        : null;
    data = map.containsKey('data') ? map['data'] : null;
    front_side = map.containsKey('front_side')
        ? TlMap.fromMap(map['front_side']) as DatedFile
        : null;
    reverse_side = map.containsKey('reverse_side')
        ? TlMap.fromMap(map['reverse_side']) as DatedFile
        : null;
    selfie = map.containsKey('selfie')
        ? TlMap.fromMap(map['selfie']) as DatedFile
        : null;
    if (map.containsKey('translation') && map['translation'] != null) {
      translation = [];
      var someValues = map['translation'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as DatedFile;
        translation?.add(obj);
      }
    }
    if (map.containsKey('files') && map['files'] != null) {
      files = [];
      var someValues = map['files'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as DatedFile;
        files?.add(obj);
      }
    }
    value = map.containsKey('value') ? map['value'] : null;
    hash = map.containsKey('hash') ? map['hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
      'front_side': front_side?.toMap(skipNulls: skipNulls),
      'reverse_side': reverse_side?.toMap(skipNulls: skipNulls),
      'selfie': selfie?.toMap(skipNulls: skipNulls),
      'translation': translation?.toMap(skipNulls: skipNulls),
      'files': files?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
      'hash': hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceUnspecified
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceUnspecified';

  string? extra;
  int? client_id;
  bytes? element_hash;

  InputPassportElementErrorSourceUnspecified({
    string? this.extra,
    int? this.client_id,
    bytes? this.element_hash,
  });

  InputPassportElementErrorSourceUnspecified.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    element_hash = map.containsKey('element_hash') ? map['element_hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'element_hash': element_hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceDataField
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceDataField';

  string? extra;
  int? client_id;
  string? field_name;
  bytes? data_hash;

  InputPassportElementErrorSourceDataField({
    string? this.extra,
    int? this.client_id,
    string? this.field_name,
    bytes? this.data_hash,
  });

  InputPassportElementErrorSourceDataField.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    field_name = map.containsKey('field_name') ? map['field_name'] : null;
    data_hash = map.containsKey('data_hash') ? map['data_hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'field_name': field_name?.toMap(skipNulls: skipNulls),
      'data_hash': data_hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceFrontSide
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceFrontSide';

  string? extra;
  int? client_id;
  bytes? file_hash;

  InputPassportElementErrorSourceFrontSide({
    string? this.extra,
    int? this.client_id,
    bytes? this.file_hash,
  });

  InputPassportElementErrorSourceFrontSide.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_hash = map.containsKey('file_hash') ? map['file_hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_hash': file_hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceReverseSide
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceReverseSide';

  string? extra;
  int? client_id;
  bytes? file_hash;

  InputPassportElementErrorSourceReverseSide({
    string? this.extra,
    int? this.client_id,
    bytes? this.file_hash,
  });

  InputPassportElementErrorSourceReverseSide.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_hash = map.containsKey('file_hash') ? map['file_hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_hash': file_hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceSelfie
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceSelfie';

  string? extra;
  int? client_id;
  bytes? file_hash;

  InputPassportElementErrorSourceSelfie({
    string? this.extra,
    int? this.client_id,
    bytes? this.file_hash,
  });

  InputPassportElementErrorSourceSelfie.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_hash = map.containsKey('file_hash') ? map['file_hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_hash': file_hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceTranslationFile
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceTranslationFile';

  string? extra;
  int? client_id;
  bytes? file_hash;

  InputPassportElementErrorSourceTranslationFile({
    string? this.extra,
    int? this.client_id,
    bytes? this.file_hash,
  });

  InputPassportElementErrorSourceTranslationFile.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_hash = map.containsKey('file_hash') ? map['file_hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_hash': file_hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceTranslationFiles
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceTranslationFiles';

  string? extra;
  int? client_id;
  vector<bytes>? file_hashes;

  InputPassportElementErrorSourceTranslationFiles({
    string? this.extra,
    int? this.client_id,
    vector<bytes>? this.file_hashes,
  });

  InputPassportElementErrorSourceTranslationFiles.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('file_hashes') && map['file_hashes'] != null) {
      file_hashes = [];
      var someValues = map['file_hashes'];
      for (var someValue in someValues) {
        file_hashes?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_hashes': file_hashes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceFile
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceFile';

  string? extra;
  int? client_id;
  bytes? file_hash;

  InputPassportElementErrorSourceFile({
    string? this.extra,
    int? this.client_id,
    bytes? this.file_hash,
  });

  InputPassportElementErrorSourceFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_hash = map.containsKey('file_hash') ? map['file_hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_hash': file_hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementErrorSourceFiles
    extends InputPassportElementErrorSource {
  String get tlType => 'inputPassportElementErrorSourceFiles';

  string? extra;
  int? client_id;
  vector<bytes>? file_hashes;

  InputPassportElementErrorSourceFiles({
    string? this.extra,
    int? this.client_id,
    vector<bytes>? this.file_hashes,
  });

  InputPassportElementErrorSourceFiles.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('file_hashes') && map['file_hashes'] != null) {
      file_hashes = [];
      var someValues = map['file_hashes'];
      for (var someValue in someValues) {
        file_hashes?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_hashes': file_hashes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputPassportElementError extends TdObject {
  String get tlType => 'inputPassportElementError';

  string? extra;
  int? client_id;
  PassportElementType? type;
  string? message;
  InputPassportElementErrorSource? source;

  InputPassportElementError({
    string? this.extra,
    int? this.client_id,
    PassportElementType? this.type,
    string? this.message,
    InputPassportElementErrorSource? this.source,
  });

  InputPassportElementError.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as PassportElementType
        : null;
    message = map.containsKey('message') ? map['message'] : null;
    source = map.containsKey('source')
        ? TlMap.fromMap(map['source']) as InputPassportElementErrorSource
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
      'source': source?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageText extends MessageContent {
  String get tlType => 'messageText';

  string? extra;
  int? client_id;
  FormattedText? text;
  WebPage? web_page;

  MessageText({
    string? this.extra,
    int? this.client_id,
    FormattedText? this.text,
    WebPage? this.web_page,
  });

  MessageText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
    web_page = map.containsKey('web_page')
        ? TlMap.fromMap(map['web_page']) as WebPage
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'web_page': web_page?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageAnimation extends MessageContent {
  String get tlType => 'messageAnimation';

  string? extra;
  int? client_id;
  Animation? animation;
  FormattedText? caption;
  Bool? is_secret;

  MessageAnimation({
    string? this.extra,
    int? this.client_id,
    Animation? this.animation,
    FormattedText? this.caption,
    Bool? this.is_secret,
  });

  MessageAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as Animation
        : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
    is_secret = map.containsKey('is_secret') ? map['is_secret'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'is_secret': is_secret?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageAudio extends MessageContent {
  String get tlType => 'messageAudio';

  string? extra;
  int? client_id;
  Audio? audio;
  FormattedText? caption;

  MessageAudio({
    string? this.extra,
    int? this.client_id,
    Audio? this.audio,
    FormattedText? this.caption,
  });

  MessageAudio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    audio =
        map.containsKey('audio') ? TlMap.fromMap(map['audio']) as Audio : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'audio': audio?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageDocument extends MessageContent {
  String get tlType => 'messageDocument';

  string? extra;
  int? client_id;
  Document? document;
  FormattedText? caption;

  MessageDocument({
    string? this.extra,
    int? this.client_id,
    Document? this.document,
    FormattedText? this.caption,
  });

  MessageDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    document = map.containsKey('document')
        ? TlMap.fromMap(map['document']) as Document
        : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'document': document?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePhoto extends MessageContent {
  String get tlType => 'messagePhoto';

  string? extra;
  int? client_id;
  Photo? photo;
  FormattedText? caption;
  Bool? is_secret;

  MessagePhoto({
    string? this.extra,
    int? this.client_id,
    Photo? this.photo,
    FormattedText? this.caption,
    Bool? this.is_secret,
  });

  MessagePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
    is_secret = map.containsKey('is_secret') ? map['is_secret'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'is_secret': is_secret?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageExpiredPhoto extends MessageContent {
  String get tlType => 'messageExpiredPhoto';

  string? extra;
  int? client_id;

  MessageExpiredPhoto({
    string? this.extra,
    int? this.client_id,
  });

  MessageExpiredPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSticker extends MessageContent {
  String get tlType => 'messageSticker';

  string? extra;
  int? client_id;
  Sticker? sticker;

  MessageSticker({
    string? this.extra,
    int? this.client_id,
    Sticker? this.sticker,
  });

  MessageSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as Sticker
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageVideo extends MessageContent {
  String get tlType => 'messageVideo';

  string? extra;
  int? client_id;
  Video? video;
  FormattedText? caption;
  Bool? is_secret;

  MessageVideo({
    string? this.extra,
    int? this.client_id,
    Video? this.video,
    FormattedText? this.caption,
    Bool? this.is_secret,
  });

  MessageVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    video =
        map.containsKey('video') ? TlMap.fromMap(map['video']) as Video : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
    is_secret = map.containsKey('is_secret') ? map['is_secret'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'video': video?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'is_secret': is_secret?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageExpiredVideo extends MessageContent {
  String get tlType => 'messageExpiredVideo';

  string? extra;
  int? client_id;

  MessageExpiredVideo({
    string? this.extra,
    int? this.client_id,
  });

  MessageExpiredVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageVideoNote extends MessageContent {
  String get tlType => 'messageVideoNote';

  string? extra;
  int? client_id;
  VideoNote? video_note;
  Bool? is_viewed;
  Bool? is_secret;

  MessageVideoNote({
    string? this.extra,
    int? this.client_id,
    VideoNote? this.video_note,
    Bool? this.is_viewed,
    Bool? this.is_secret,
  });

  MessageVideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    video_note = map.containsKey('video_note')
        ? TlMap.fromMap(map['video_note']) as VideoNote
        : null;
    is_viewed = map.containsKey('is_viewed') ? map['is_viewed'] : null;
    is_secret = map.containsKey('is_secret') ? map['is_secret'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'video_note': video_note?.toMap(skipNulls: skipNulls),
      'is_viewed': is_viewed?.toMap(skipNulls: skipNulls),
      'is_secret': is_secret?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageVoiceNote extends MessageContent {
  String get tlType => 'messageVoiceNote';

  string? extra;
  int? client_id;
  VoiceNote? voice_note;
  FormattedText? caption;
  Bool? is_listened;

  MessageVoiceNote({
    string? this.extra,
    int? this.client_id,
    VoiceNote? this.voice_note,
    FormattedText? this.caption,
    Bool? this.is_listened,
  });

  MessageVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    voice_note = map.containsKey('voice_note')
        ? TlMap.fromMap(map['voice_note']) as VoiceNote
        : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
    is_listened = map.containsKey('is_listened') ? map['is_listened'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'voice_note': voice_note?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'is_listened': is_listened?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageLocation extends MessageContent {
  String get tlType => 'messageLocation';

  string? extra;
  int? client_id;
  Location? location;
  int32? live_period;
  int32? expires_in;
  int32? heading;
  int32? proximity_alert_radius;

  MessageLocation({
    string? this.extra,
    int? this.client_id,
    Location? this.location,
    int32? this.live_period,
    int32? this.expires_in,
    int32? this.heading,
    int32? this.proximity_alert_radius,
  });

  MessageLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    live_period = map.containsKey('live_period') ? map['live_period'] : null;
    expires_in = map.containsKey('expires_in') ? map['expires_in'] : null;
    heading = map.containsKey('heading') ? map['heading'] : null;
    proximity_alert_radius = map.containsKey('proximity_alert_radius')
        ? map['proximity_alert_radius']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'live_period': live_period?.toMap(skipNulls: skipNulls),
      'expires_in': expires_in?.toMap(skipNulls: skipNulls),
      'heading': heading?.toMap(skipNulls: skipNulls),
      'proximity_alert_radius':
          proximity_alert_radius?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageVenue extends MessageContent {
  String get tlType => 'messageVenue';

  string? extra;
  int? client_id;
  Venue? venue;

  MessageVenue({
    string? this.extra,
    int? this.client_id,
    Venue? this.venue,
  });

  MessageVenue.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    venue =
        map.containsKey('venue') ? TlMap.fromMap(map['venue']) as Venue : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'venue': venue?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageContact extends MessageContent {
  String get tlType => 'messageContact';

  string? extra;
  int? client_id;
  Contact? contact;

  MessageContact({
    string? this.extra,
    int? this.client_id,
    Contact? this.contact,
  });

  MessageContact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    contact = map.containsKey('contact')
        ? TlMap.fromMap(map['contact']) as Contact
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'contact': contact?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageAnimatedEmoji extends MessageContent {
  String get tlType => 'messageAnimatedEmoji';

  string? extra;
  int? client_id;
  AnimatedEmoji? animated_emoji;
  string? emoji;

  MessageAnimatedEmoji({
    string? this.extra,
    int? this.client_id,
    AnimatedEmoji? this.animated_emoji,
    string? this.emoji,
  });

  MessageAnimatedEmoji.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    animated_emoji = map.containsKey('animated_emoji')
        ? TlMap.fromMap(map['animated_emoji']) as AnimatedEmoji
        : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animated_emoji': animated_emoji?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageDice extends MessageContent {
  String get tlType => 'messageDice';

  string? extra;
  int? client_id;
  DiceStickers? initial_state;
  DiceStickers? final_state;
  string? emoji;
  int32? value;
  int32? success_animation_frame_number;

  MessageDice({
    string? this.extra,
    int? this.client_id,
    DiceStickers? this.initial_state,
    DiceStickers? this.final_state,
    string? this.emoji,
    int32? this.value,
    int32? this.success_animation_frame_number,
  });

  MessageDice.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    initial_state = map.containsKey('initial_state')
        ? TlMap.fromMap(map['initial_state']) as DiceStickers
        : null;
    final_state = map.containsKey('final_state')
        ? TlMap.fromMap(map['final_state']) as DiceStickers
        : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
    value = map.containsKey('value') ? map['value'] : null;
    success_animation_frame_number =
        map.containsKey('success_animation_frame_number')
            ? map['success_animation_frame_number']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'initial_state': initial_state?.toMap(skipNulls: skipNulls),
      'final_state': final_state?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
      'success_animation_frame_number':
          success_animation_frame_number?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageGame extends MessageContent {
  String get tlType => 'messageGame';

  string? extra;
  int? client_id;
  Game? game;

  MessageGame({
    string? this.extra,
    int? this.client_id,
    Game? this.game,
  });

  MessageGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    game = map.containsKey('game') ? TlMap.fromMap(map['game']) as Game : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'game': game?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePoll extends MessageContent {
  String get tlType => 'messagePoll';

  string? extra;
  int? client_id;
  Poll? poll;

  MessagePoll({
    string? this.extra,
    int? this.client_id,
    Poll? this.poll,
  });

  MessagePoll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    poll = map.containsKey('poll') ? TlMap.fromMap(map['poll']) as Poll : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'poll': poll?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageInvoice extends MessageContent {
  String get tlType => 'messageInvoice';

  string? extra;
  int? client_id;
  string? title;
  string? description;
  Photo? photo;
  string? currency;
  int53? total_amount;
  string? start_parameter;
  Bool? is_test;
  Bool? need_shipping_address;
  int53? receipt_message_id;

  MessageInvoice({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    string? this.description,
    Photo? this.photo,
    string? this.currency,
    int53? this.total_amount,
    string? this.start_parameter,
    Bool? this.is_test,
    Bool? this.need_shipping_address,
    int53? this.receipt_message_id,
  });

  MessageInvoice.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    currency = map.containsKey('currency') ? map['currency'] : null;
    total_amount = map.containsKey('total_amount') ? map['total_amount'] : null;
    start_parameter =
        map.containsKey('start_parameter') ? map['start_parameter'] : null;
    is_test = map.containsKey('is_test') ? map['is_test'] : null;
    need_shipping_address = map.containsKey('need_shipping_address')
        ? map['need_shipping_address']
        : null;
    receipt_message_id = map.containsKey('receipt_message_id')
        ? map['receipt_message_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'currency': currency?.toMap(skipNulls: skipNulls),
      'total_amount': total_amount?.toMap(skipNulls: skipNulls),
      'start_parameter': start_parameter?.toMap(skipNulls: skipNulls),
      'is_test': is_test?.toMap(skipNulls: skipNulls),
      'need_shipping_address':
          need_shipping_address?.toMap(skipNulls: skipNulls),
      'receipt_message_id': receipt_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageCall extends MessageContent {
  String get tlType => 'messageCall';

  string? extra;
  int? client_id;
  Bool? is_video;
  CallDiscardReason? discard_reason;
  int32? duration;

  MessageCall({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_video,
    CallDiscardReason? this.discard_reason,
    int32? this.duration,
  });

  MessageCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_video = map.containsKey('is_video') ? map['is_video'] : null;
    discard_reason = map.containsKey('discard_reason')
        ? TlMap.fromMap(map['discard_reason']) as CallDiscardReason
        : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_video': is_video?.toMap(skipNulls: skipNulls),
      'discard_reason': discard_reason?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageVideoChatScheduled extends MessageContent {
  String get tlType => 'messageVideoChatScheduled';

  string? extra;
  int? client_id;
  int32? group_call_id;
  int32? start_date;

  MessageVideoChatScheduled({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    int32? this.start_date,
  });

  MessageVideoChatScheduled.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    start_date = map.containsKey('start_date') ? map['start_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'start_date': start_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageVideoChatStarted extends MessageContent {
  String get tlType => 'messageVideoChatStarted';

  string? extra;
  int? client_id;
  int32? group_call_id;

  MessageVideoChatStarted({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  MessageVideoChatStarted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageVideoChatEnded extends MessageContent {
  String get tlType => 'messageVideoChatEnded';

  string? extra;
  int? client_id;
  int32? duration;

  MessageVideoChatEnded({
    string? this.extra,
    int? this.client_id,
    int32? this.duration,
  });

  MessageVideoChatEnded.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageInviteVideoChatParticipants extends MessageContent {
  String get tlType => 'messageInviteVideoChatParticipants';

  string? extra;
  int? client_id;
  int32? group_call_id;
  vector<int53>? user_ids;

  MessageInviteVideoChatParticipants({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    vector<int53>? this.user_ids,
  });

  MessageInviteVideoChatParticipants.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageBasicGroupChatCreate extends MessageContent {
  String get tlType => 'messageBasicGroupChatCreate';

  string? extra;
  int? client_id;
  string? title;
  vector<int53>? member_user_ids;

  MessageBasicGroupChatCreate({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    vector<int53>? this.member_user_ids,
  });

  MessageBasicGroupChatCreate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    if (map.containsKey('member_user_ids') && map['member_user_ids'] != null) {
      member_user_ids = [];
      var someValues = map['member_user_ids'];
      for (var someValue in someValues) {
        member_user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'member_user_ids': member_user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSupergroupChatCreate extends MessageContent {
  String get tlType => 'messageSupergroupChatCreate';

  string? extra;
  int? client_id;
  string? title;

  MessageSupergroupChatCreate({
    string? this.extra,
    int? this.client_id,
    string? this.title,
  });

  MessageSupergroupChatCreate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatChangeTitle extends MessageContent {
  String get tlType => 'messageChatChangeTitle';

  string? extra;
  int? client_id;
  string? title;

  MessageChatChangeTitle({
    string? this.extra,
    int? this.client_id,
    string? this.title,
  });

  MessageChatChangeTitle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatChangePhoto extends MessageContent {
  String get tlType => 'messageChatChangePhoto';

  string? extra;
  int? client_id;
  ChatPhoto? photo;

  MessageChatChangePhoto({
    string? this.extra,
    int? this.client_id,
    ChatPhoto? this.photo,
  });

  MessageChatChangePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as ChatPhoto
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatDeletePhoto extends MessageContent {
  String get tlType => 'messageChatDeletePhoto';

  string? extra;
  int? client_id;

  MessageChatDeletePhoto({
    string? this.extra,
    int? this.client_id,
  });

  MessageChatDeletePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatAddMembers extends MessageContent {
  String get tlType => 'messageChatAddMembers';

  string? extra;
  int? client_id;
  vector<int53>? member_user_ids;

  MessageChatAddMembers({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.member_user_ids,
  });

  MessageChatAddMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('member_user_ids') && map['member_user_ids'] != null) {
      member_user_ids = [];
      var someValues = map['member_user_ids'];
      for (var someValue in someValues) {
        member_user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'member_user_ids': member_user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatJoinByLink extends MessageContent {
  String get tlType => 'messageChatJoinByLink';

  string? extra;
  int? client_id;

  MessageChatJoinByLink({
    string? this.extra,
    int? this.client_id,
  });

  MessageChatJoinByLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatJoinByRequest extends MessageContent {
  String get tlType => 'messageChatJoinByRequest';

  string? extra;
  int? client_id;

  MessageChatJoinByRequest({
    string? this.extra,
    int? this.client_id,
  });

  MessageChatJoinByRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatDeleteMember extends MessageContent {
  String get tlType => 'messageChatDeleteMember';

  string? extra;
  int? client_id;
  int53? user_id;

  MessageChatDeleteMember({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  MessageChatDeleteMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatUpgradeTo extends MessageContent {
  String get tlType => 'messageChatUpgradeTo';

  string? extra;
  int? client_id;
  int53? supergroup_id;

  MessageChatUpgradeTo({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
  });

  MessageChatUpgradeTo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatUpgradeFrom extends MessageContent {
  String get tlType => 'messageChatUpgradeFrom';

  string? extra;
  int? client_id;
  string? title;
  int53? basic_group_id;

  MessageChatUpgradeFrom({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    int53? this.basic_group_id,
  });

  MessageChatUpgradeFrom.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    basic_group_id =
        map.containsKey('basic_group_id') ? map['basic_group_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'basic_group_id': basic_group_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePinMessage extends MessageContent {
  String get tlType => 'messagePinMessage';

  string? extra;
  int? client_id;
  int53? message_id;

  MessagePinMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.message_id,
  });

  MessagePinMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageScreenshotTaken extends MessageContent {
  String get tlType => 'messageScreenshotTaken';

  string? extra;
  int? client_id;

  MessageScreenshotTaken({
    string? this.extra,
    int? this.client_id,
  });

  MessageScreenshotTaken.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatSetTheme extends MessageContent {
  String get tlType => 'messageChatSetTheme';

  string? extra;
  int? client_id;
  string? theme_name;

  MessageChatSetTheme({
    string? this.extra,
    int? this.client_id,
    string? this.theme_name,
  });

  MessageChatSetTheme.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    theme_name = map.containsKey('theme_name') ? map['theme_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'theme_name': theme_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageChatSetTtl extends MessageContent {
  String get tlType => 'messageChatSetTtl';

  string? extra;
  int? client_id;
  int32? ttl;

  MessageChatSetTtl({
    string? this.extra,
    int? this.client_id,
    int32? this.ttl,
  });

  MessageChatSetTtl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    ttl = map.containsKey('ttl') ? map['ttl'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'ttl': ttl?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageCustomServiceAction extends MessageContent {
  String get tlType => 'messageCustomServiceAction';

  string? extra;
  int? client_id;
  string? text;

  MessageCustomServiceAction({
    string? this.extra,
    int? this.client_id,
    string? this.text,
  });

  MessageCustomServiceAction.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageGameScore extends MessageContent {
  String get tlType => 'messageGameScore';

  string? extra;
  int? client_id;
  int53? game_message_id;
  int64? game_id;
  int32? score;

  MessageGameScore({
    string? this.extra,
    int? this.client_id,
    int53? this.game_message_id,
    int64? this.game_id,
    int32? this.score,
  });

  MessageGameScore.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    game_message_id =
        map.containsKey('game_message_id') ? map['game_message_id'] : null;
    game_id = map.containsKey('game_id') ? map['game_id'] : null;
    score = map.containsKey('score') ? map['score'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'game_message_id': game_message_id?.toMap(skipNulls: skipNulls),
      'game_id': game_id?.toMap(skipNulls: skipNulls),
      'score': score?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePaymentSuccessful extends MessageContent {
  String get tlType => 'messagePaymentSuccessful';

  string? extra;
  int? client_id;
  int53? invoice_chat_id;
  int53? invoice_message_id;
  string? currency;
  int53? total_amount;

  MessagePaymentSuccessful({
    string? this.extra,
    int? this.client_id,
    int53? this.invoice_chat_id,
    int53? this.invoice_message_id,
    string? this.currency,
    int53? this.total_amount,
  });

  MessagePaymentSuccessful.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invoice_chat_id =
        map.containsKey('invoice_chat_id') ? map['invoice_chat_id'] : null;
    invoice_message_id = map.containsKey('invoice_message_id')
        ? map['invoice_message_id']
        : null;
    currency = map.containsKey('currency') ? map['currency'] : null;
    total_amount = map.containsKey('total_amount') ? map['total_amount'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invoice_chat_id': invoice_chat_id?.toMap(skipNulls: skipNulls),
      'invoice_message_id': invoice_message_id?.toMap(skipNulls: skipNulls),
      'currency': currency?.toMap(skipNulls: skipNulls),
      'total_amount': total_amount?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePaymentSuccessfulBot extends MessageContent {
  String get tlType => 'messagePaymentSuccessfulBot';

  string? extra;
  int? client_id;
  string? currency;
  int53? total_amount;
  bytes? invoice_payload;
  string? shipping_option_id;
  OrderInfo? order_info;
  string? telegram_payment_charge_id;
  string? provider_payment_charge_id;

  MessagePaymentSuccessfulBot({
    string? this.extra,
    int? this.client_id,
    string? this.currency,
    int53? this.total_amount,
    bytes? this.invoice_payload,
    string? this.shipping_option_id,
    OrderInfo? this.order_info,
    string? this.telegram_payment_charge_id,
    string? this.provider_payment_charge_id,
  });

  MessagePaymentSuccessfulBot.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    currency = map.containsKey('currency') ? map['currency'] : null;
    total_amount = map.containsKey('total_amount') ? map['total_amount'] : null;
    invoice_payload =
        map.containsKey('invoice_payload') ? map['invoice_payload'] : null;
    shipping_option_id = map.containsKey('shipping_option_id')
        ? map['shipping_option_id']
        : null;
    order_info = map.containsKey('order_info')
        ? TlMap.fromMap(map['order_info']) as OrderInfo
        : null;
    telegram_payment_charge_id = map.containsKey('telegram_payment_charge_id')
        ? map['telegram_payment_charge_id']
        : null;
    provider_payment_charge_id = map.containsKey('provider_payment_charge_id')
        ? map['provider_payment_charge_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'currency': currency?.toMap(skipNulls: skipNulls),
      'total_amount': total_amount?.toMap(skipNulls: skipNulls),
      'invoice_payload': invoice_payload?.toMap(skipNulls: skipNulls),
      'shipping_option_id': shipping_option_id?.toMap(skipNulls: skipNulls),
      'order_info': order_info?.toMap(skipNulls: skipNulls),
      'telegram_payment_charge_id':
          telegram_payment_charge_id?.toMap(skipNulls: skipNulls),
      'provider_payment_charge_id':
          provider_payment_charge_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageContactRegistered extends MessageContent {
  String get tlType => 'messageContactRegistered';

  string? extra;
  int? client_id;

  MessageContactRegistered({
    string? this.extra,
    int? this.client_id,
  });

  MessageContactRegistered.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageWebsiteConnected extends MessageContent {
  String get tlType => 'messageWebsiteConnected';

  string? extra;
  int? client_id;
  string? domain_name;

  MessageWebsiteConnected({
    string? this.extra,
    int? this.client_id,
    string? this.domain_name,
  });

  MessageWebsiteConnected.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    domain_name = map.containsKey('domain_name') ? map['domain_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'domain_name': domain_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePassportDataSent extends MessageContent {
  String get tlType => 'messagePassportDataSent';

  string? extra;
  int? client_id;
  vector<PassportElementType>? types;

  MessagePassportDataSent({
    string? this.extra,
    int? this.client_id,
    vector<PassportElementType>? this.types,
  });

  MessagePassportDataSent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('types') && map['types'] != null) {
      types = [];
      var someValues = map['types'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PassportElementType;
        types?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'types': types?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessagePassportDataReceived extends MessageContent {
  String get tlType => 'messagePassportDataReceived';

  string? extra;
  int? client_id;
  vector<EncryptedPassportElement>? elements;
  EncryptedCredentials? credentials;

  MessagePassportDataReceived({
    string? this.extra,
    int? this.client_id,
    vector<EncryptedPassportElement>? this.elements,
    EncryptedCredentials? this.credentials,
  });

  MessagePassportDataReceived.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('elements') && map['elements'] != null) {
      elements = [];
      var someValues = map['elements'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as EncryptedPassportElement;
        elements?.add(obj);
      }
    }
    credentials = map.containsKey('credentials')
        ? TlMap.fromMap(map['credentials']) as EncryptedCredentials
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'elements': elements?.toMap(skipNulls: skipNulls),
      'credentials': credentials?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageProximityAlertTriggered extends MessageContent {
  String get tlType => 'messageProximityAlertTriggered';

  string? extra;
  int? client_id;
  MessageSender? traveler_id;
  MessageSender? watcher_id;
  int32? distance;

  MessageProximityAlertTriggered({
    string? this.extra,
    int? this.client_id,
    MessageSender? this.traveler_id,
    MessageSender? this.watcher_id,
    int32? this.distance,
  });

  MessageProximityAlertTriggered.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    traveler_id = map.containsKey('traveler_id')
        ? TlMap.fromMap(map['traveler_id']) as MessageSender
        : null;
    watcher_id = map.containsKey('watcher_id')
        ? TlMap.fromMap(map['watcher_id']) as MessageSender
        : null;
    distance = map.containsKey('distance') ? map['distance'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'traveler_id': traveler_id?.toMap(skipNulls: skipNulls),
      'watcher_id': watcher_id?.toMap(skipNulls: skipNulls),
      'distance': distance?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageUnsupported extends MessageContent {
  String get tlType => 'messageUnsupported';

  string? extra;
  int? client_id;

  MessageUnsupported({
    string? this.extra,
    int? this.client_id,
  });

  MessageUnsupported.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeMention extends TextEntityType {
  String get tlType => 'textEntityTypeMention';

  string? extra;
  int? client_id;

  TextEntityTypeMention({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeMention.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeHashtag extends TextEntityType {
  String get tlType => 'textEntityTypeHashtag';

  string? extra;
  int? client_id;

  TextEntityTypeHashtag({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeHashtag.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeCashtag extends TextEntityType {
  String get tlType => 'textEntityTypeCashtag';

  string? extra;
  int? client_id;

  TextEntityTypeCashtag({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeCashtag.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeBotCommand extends TextEntityType {
  String get tlType => 'textEntityTypeBotCommand';

  string? extra;
  int? client_id;

  TextEntityTypeBotCommand({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeBotCommand.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeUrl extends TextEntityType {
  String get tlType => 'textEntityTypeUrl';

  string? extra;
  int? client_id;

  TextEntityTypeUrl({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeEmailAddress extends TextEntityType {
  String get tlType => 'textEntityTypeEmailAddress';

  string? extra;
  int? client_id;

  TextEntityTypeEmailAddress({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeEmailAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypePhoneNumber extends TextEntityType {
  String get tlType => 'textEntityTypePhoneNumber';

  string? extra;
  int? client_id;

  TextEntityTypePhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypePhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeBankCardNumber extends TextEntityType {
  String get tlType => 'textEntityTypeBankCardNumber';

  string? extra;
  int? client_id;

  TextEntityTypeBankCardNumber({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeBankCardNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeBold extends TextEntityType {
  String get tlType => 'textEntityTypeBold';

  string? extra;
  int? client_id;

  TextEntityTypeBold({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeBold.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeItalic extends TextEntityType {
  String get tlType => 'textEntityTypeItalic';

  string? extra;
  int? client_id;

  TextEntityTypeItalic({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeItalic.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeUnderline extends TextEntityType {
  String get tlType => 'textEntityTypeUnderline';

  string? extra;
  int? client_id;

  TextEntityTypeUnderline({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeUnderline.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeStrikethrough extends TextEntityType {
  String get tlType => 'textEntityTypeStrikethrough';

  string? extra;
  int? client_id;

  TextEntityTypeStrikethrough({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeStrikethrough.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeCode extends TextEntityType {
  String get tlType => 'textEntityTypeCode';

  string? extra;
  int? client_id;

  TextEntityTypeCode({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypeCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypePre extends TextEntityType {
  String get tlType => 'textEntityTypePre';

  string? extra;
  int? client_id;

  TextEntityTypePre({
    string? this.extra,
    int? this.client_id,
  });

  TextEntityTypePre.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypePreCode extends TextEntityType {
  String get tlType => 'textEntityTypePreCode';

  string? extra;
  int? client_id;
  string? language;

  TextEntityTypePreCode({
    string? this.extra,
    int? this.client_id,
    string? this.language,
  });

  TextEntityTypePreCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language = map.containsKey('language') ? map['language'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language': language?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeTextUrl extends TextEntityType {
  String get tlType => 'textEntityTypeTextUrl';

  string? extra;
  int? client_id;
  string? url;

  TextEntityTypeTextUrl({
    string? this.extra,
    int? this.client_id,
    string? this.url,
  });

  TextEntityTypeTextUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeMentionName extends TextEntityType {
  String get tlType => 'textEntityTypeMentionName';

  string? extra;
  int? client_id;
  int53? user_id;

  TextEntityTypeMentionName({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  TextEntityTypeMentionName.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextEntityTypeMediaTimestamp extends TextEntityType {
  String get tlType => 'textEntityTypeMediaTimestamp';

  string? extra;
  int? client_id;
  int32? media_timestamp;

  TextEntityTypeMediaTimestamp({
    string? this.extra,
    int? this.client_id,
    int32? this.media_timestamp,
  });

  TextEntityTypeMediaTimestamp.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    media_timestamp =
        map.containsKey('media_timestamp') ? map['media_timestamp'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'media_timestamp': media_timestamp?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputThumbnail extends TdObject {
  String get tlType => 'inputThumbnail';

  string? extra;
  int? client_id;
  InputFile? thumbnail;
  int32? width;
  int32? height;

  InputThumbnail({
    string? this.extra,
    int? this.client_id,
    InputFile? this.thumbnail,
    int32? this.width,
    int32? this.height,
  });

  InputThumbnail.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as InputFile
        : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSchedulingStateSendAtDate extends MessageSchedulingState {
  String get tlType => 'messageSchedulingStateSendAtDate';

  string? extra;
  int? client_id;
  int32? send_date;

  MessageSchedulingStateSendAtDate({
    string? this.extra,
    int? this.client_id,
    int32? this.send_date,
  });

  MessageSchedulingStateSendAtDate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    send_date = map.containsKey('send_date') ? map['send_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'send_date': send_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSchedulingStateSendWhenOnline extends MessageSchedulingState {
  String get tlType => 'messageSchedulingStateSendWhenOnline';

  string? extra;
  int? client_id;

  MessageSchedulingStateSendWhenOnline({
    string? this.extra,
    int? this.client_id,
  });

  MessageSchedulingStateSendWhenOnline.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageSendOptions extends TdObject {
  String get tlType => 'messageSendOptions';

  string? extra;
  int? client_id;
  Bool? disable_notification;
  Bool? from_background;
  MessageSchedulingState? scheduling_state;

  MessageSendOptions({
    string? this.extra,
    int? this.client_id,
    Bool? this.disable_notification,
    Bool? this.from_background,
    MessageSchedulingState? this.scheduling_state,
  });

  MessageSendOptions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    disable_notification = map.containsKey('disable_notification')
        ? map['disable_notification']
        : null;
    from_background =
        map.containsKey('from_background') ? map['from_background'] : null;
    scheduling_state = map.containsKey('scheduling_state')
        ? TlMap.fromMap(map['scheduling_state']) as MessageSchedulingState
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'disable_notification': disable_notification?.toMap(skipNulls: skipNulls),
      'from_background': from_background?.toMap(skipNulls: skipNulls),
      'scheduling_state': scheduling_state?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageCopyOptions extends TdObject {
  String get tlType => 'messageCopyOptions';

  string? extra;
  int? client_id;
  Bool? send_copy;
  Bool? replace_caption;
  FormattedText? new_caption;

  MessageCopyOptions({
    string? this.extra,
    int? this.client_id,
    Bool? this.send_copy,
    Bool? this.replace_caption,
    FormattedText? this.new_caption,
  });

  MessageCopyOptions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    send_copy = map.containsKey('send_copy') ? map['send_copy'] : null;
    replace_caption =
        map.containsKey('replace_caption') ? map['replace_caption'] : null;
    new_caption = map.containsKey('new_caption')
        ? TlMap.fromMap(map['new_caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'send_copy': send_copy?.toMap(skipNulls: skipNulls),
      'replace_caption': replace_caption?.toMap(skipNulls: skipNulls),
      'new_caption': new_caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageText extends InputMessageContent {
  String get tlType => 'inputMessageText';

  string? extra;
  int? client_id;
  FormattedText? text;
  Bool? disable_web_page_preview;
  Bool? clear_draft;

  InputMessageText({
    string? this.extra,
    int? this.client_id,
    FormattedText? this.text,
    Bool? this.disable_web_page_preview,
    Bool? this.clear_draft,
  });

  InputMessageText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
    disable_web_page_preview = map.containsKey('disable_web_page_preview')
        ? map['disable_web_page_preview']
        : null;
    clear_draft = map.containsKey('clear_draft') ? map['clear_draft'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'disable_web_page_preview':
          disable_web_page_preview?.toMap(skipNulls: skipNulls),
      'clear_draft': clear_draft?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageAnimation extends InputMessageContent {
  String get tlType => 'inputMessageAnimation';

  string? extra;
  int? client_id;
  InputFile? animation;
  InputThumbnail? thumbnail;
  vector<int32>? added_sticker_file_ids;
  int32? duration;
  int32? width;
  int32? height;
  FormattedText? caption;

  InputMessageAnimation({
    string? this.extra,
    int? this.client_id,
    InputFile? this.animation,
    InputThumbnail? this.thumbnail,
    vector<int32>? this.added_sticker_file_ids,
    int32? this.duration,
    int32? this.width,
    int32? this.height,
    FormattedText? this.caption,
  });

  InputMessageAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as InputFile
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as InputThumbnail
        : null;
    if (map.containsKey('added_sticker_file_ids') &&
        map['added_sticker_file_ids'] != null) {
      added_sticker_file_ids = [];
      var someValues = map['added_sticker_file_ids'];
      for (var someValue in someValues) {
        added_sticker_file_ids?.add(someValue);
      }
    }
    duration = map.containsKey('duration') ? map['duration'] : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'added_sticker_file_ids':
          added_sticker_file_ids?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageAudio extends InputMessageContent {
  String get tlType => 'inputMessageAudio';

  string? extra;
  int? client_id;
  InputFile? audio;
  InputThumbnail? album_cover_thumbnail;
  int32? duration;
  string? title;
  string? performer;
  FormattedText? caption;

  InputMessageAudio({
    string? this.extra,
    int? this.client_id,
    InputFile? this.audio,
    InputThumbnail? this.album_cover_thumbnail,
    int32? this.duration,
    string? this.title,
    string? this.performer,
    FormattedText? this.caption,
  });

  InputMessageAudio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    audio = map.containsKey('audio')
        ? TlMap.fromMap(map['audio']) as InputFile
        : null;
    album_cover_thumbnail = map.containsKey('album_cover_thumbnail')
        ? TlMap.fromMap(map['album_cover_thumbnail']) as InputThumbnail
        : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    performer = map.containsKey('performer') ? map['performer'] : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'audio': audio?.toMap(skipNulls: skipNulls),
      'album_cover_thumbnail':
          album_cover_thumbnail?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'performer': performer?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageDocument extends InputMessageContent {
  String get tlType => 'inputMessageDocument';

  string? extra;
  int? client_id;
  InputFile? document;
  InputThumbnail? thumbnail;
  Bool? disable_content_type_detection;
  FormattedText? caption;

  InputMessageDocument({
    string? this.extra,
    int? this.client_id,
    InputFile? this.document,
    InputThumbnail? this.thumbnail,
    Bool? this.disable_content_type_detection,
    FormattedText? this.caption,
  });

  InputMessageDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    document = map.containsKey('document')
        ? TlMap.fromMap(map['document']) as InputFile
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as InputThumbnail
        : null;
    disable_content_type_detection =
        map.containsKey('disable_content_type_detection')
            ? map['disable_content_type_detection']
            : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'document': document?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'disable_content_type_detection':
          disable_content_type_detection?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessagePhoto extends InputMessageContent {
  String get tlType => 'inputMessagePhoto';

  string? extra;
  int? client_id;
  InputFile? photo;
  InputThumbnail? thumbnail;
  vector<int32>? added_sticker_file_ids;
  int32? width;
  int32? height;
  FormattedText? caption;
  int32? ttl;

  InputMessagePhoto({
    string? this.extra,
    int? this.client_id,
    InputFile? this.photo,
    InputThumbnail? this.thumbnail,
    vector<int32>? this.added_sticker_file_ids,
    int32? this.width,
    int32? this.height,
    FormattedText? this.caption,
    int32? this.ttl,
  });

  InputMessagePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as InputFile
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as InputThumbnail
        : null;
    if (map.containsKey('added_sticker_file_ids') &&
        map['added_sticker_file_ids'] != null) {
      added_sticker_file_ids = [];
      var someValues = map['added_sticker_file_ids'];
      for (var someValue in someValues) {
        added_sticker_file_ids?.add(someValue);
      }
    }
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
    ttl = map.containsKey('ttl') ? map['ttl'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'added_sticker_file_ids':
          added_sticker_file_ids?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'ttl': ttl?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageSticker extends InputMessageContent {
  String get tlType => 'inputMessageSticker';

  string? extra;
  int? client_id;
  InputFile? sticker;
  InputThumbnail? thumbnail;
  int32? width;
  int32? height;
  string? emoji;

  InputMessageSticker({
    string? this.extra,
    int? this.client_id,
    InputFile? this.sticker,
    InputThumbnail? this.thumbnail,
    int32? this.width,
    int32? this.height,
    string? this.emoji,
  });

  InputMessageSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as InputThumbnail
        : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageVideo extends InputMessageContent {
  String get tlType => 'inputMessageVideo';

  string? extra;
  int? client_id;
  InputFile? video;
  InputThumbnail? thumbnail;
  vector<int32>? added_sticker_file_ids;
  int32? duration;
  int32? width;
  int32? height;
  Bool? supports_streaming;
  FormattedText? caption;
  int32? ttl;

  InputMessageVideo({
    string? this.extra,
    int? this.client_id,
    InputFile? this.video,
    InputThumbnail? this.thumbnail,
    vector<int32>? this.added_sticker_file_ids,
    int32? this.duration,
    int32? this.width,
    int32? this.height,
    Bool? this.supports_streaming,
    FormattedText? this.caption,
    int32? this.ttl,
  });

  InputMessageVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    video = map.containsKey('video')
        ? TlMap.fromMap(map['video']) as InputFile
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as InputThumbnail
        : null;
    if (map.containsKey('added_sticker_file_ids') &&
        map['added_sticker_file_ids'] != null) {
      added_sticker_file_ids = [];
      var someValues = map['added_sticker_file_ids'];
      for (var someValue in someValues) {
        added_sticker_file_ids?.add(someValue);
      }
    }
    duration = map.containsKey('duration') ? map['duration'] : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    supports_streaming = map.containsKey('supports_streaming')
        ? map['supports_streaming']
        : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
    ttl = map.containsKey('ttl') ? map['ttl'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'video': video?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'added_sticker_file_ids':
          added_sticker_file_ids?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'supports_streaming': supports_streaming?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'ttl': ttl?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageVideoNote extends InputMessageContent {
  String get tlType => 'inputMessageVideoNote';

  string? extra;
  int? client_id;
  InputFile? video_note;
  InputThumbnail? thumbnail;
  int32? duration;
  int32? length;

  InputMessageVideoNote({
    string? this.extra,
    int? this.client_id,
    InputFile? this.video_note,
    InputThumbnail? this.thumbnail,
    int32? this.duration,
    int32? this.length,
  });

  InputMessageVideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    video_note = map.containsKey('video_note')
        ? TlMap.fromMap(map['video_note']) as InputFile
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as InputThumbnail
        : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    length = map.containsKey('length') ? map['length'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'video_note': video_note?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'length': length?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageVoiceNote extends InputMessageContent {
  String get tlType => 'inputMessageVoiceNote';

  string? extra;
  int? client_id;
  InputFile? voice_note;
  int32? duration;
  bytes? waveform;
  FormattedText? caption;

  InputMessageVoiceNote({
    string? this.extra,
    int? this.client_id,
    InputFile? this.voice_note,
    int32? this.duration,
    bytes? this.waveform,
    FormattedText? this.caption,
  });

  InputMessageVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    voice_note = map.containsKey('voice_note')
        ? TlMap.fromMap(map['voice_note']) as InputFile
        : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    waveform = map.containsKey('waveform') ? map['waveform'] : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'voice_note': voice_note?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'waveform': waveform?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageLocation extends InputMessageContent {
  String get tlType => 'inputMessageLocation';

  string? extra;
  int? client_id;
  Location? location;
  int32? live_period;
  int32? heading;
  int32? proximity_alert_radius;

  InputMessageLocation({
    string? this.extra,
    int? this.client_id,
    Location? this.location,
    int32? this.live_period,
    int32? this.heading,
    int32? this.proximity_alert_radius,
  });

  InputMessageLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    live_period = map.containsKey('live_period') ? map['live_period'] : null;
    heading = map.containsKey('heading') ? map['heading'] : null;
    proximity_alert_radius = map.containsKey('proximity_alert_radius')
        ? map['proximity_alert_radius']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'live_period': live_period?.toMap(skipNulls: skipNulls),
      'heading': heading?.toMap(skipNulls: skipNulls),
      'proximity_alert_radius':
          proximity_alert_radius?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageVenue extends InputMessageContent {
  String get tlType => 'inputMessageVenue';

  string? extra;
  int? client_id;
  Venue? venue;

  InputMessageVenue({
    string? this.extra,
    int? this.client_id,
    Venue? this.venue,
  });

  InputMessageVenue.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    venue =
        map.containsKey('venue') ? TlMap.fromMap(map['venue']) as Venue : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'venue': venue?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageContact extends InputMessageContent {
  String get tlType => 'inputMessageContact';

  string? extra;
  int? client_id;
  Contact? contact;

  InputMessageContact({
    string? this.extra,
    int? this.client_id,
    Contact? this.contact,
  });

  InputMessageContact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    contact = map.containsKey('contact')
        ? TlMap.fromMap(map['contact']) as Contact
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'contact': contact?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageDice extends InputMessageContent {
  String get tlType => 'inputMessageDice';

  string? extra;
  int? client_id;
  string? emoji;
  Bool? clear_draft;

  InputMessageDice({
    string? this.extra,
    int? this.client_id,
    string? this.emoji,
    Bool? this.clear_draft,
  });

  InputMessageDice.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
    clear_draft = map.containsKey('clear_draft') ? map['clear_draft'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
      'clear_draft': clear_draft?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageGame extends InputMessageContent {
  String get tlType => 'inputMessageGame';

  string? extra;
  int? client_id;
  int53? bot_user_id;
  string? game_short_name;

  InputMessageGame({
    string? this.extra,
    int? this.client_id,
    int53? this.bot_user_id,
    string? this.game_short_name,
  });

  InputMessageGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_user_id = map.containsKey('bot_user_id') ? map['bot_user_id'] : null;
    game_short_name =
        map.containsKey('game_short_name') ? map['game_short_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_user_id': bot_user_id?.toMap(skipNulls: skipNulls),
      'game_short_name': game_short_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageInvoice extends InputMessageContent {
  String get tlType => 'inputMessageInvoice';

  string? extra;
  int? client_id;
  Invoice? invoice;
  string? title;
  string? description;
  string? photo_url;
  int32? photo_size;
  int32? photo_width;
  int32? photo_height;
  bytes? payload;
  string? provider_token;
  string? provider_data;
  string? start_parameter;

  InputMessageInvoice({
    string? this.extra,
    int? this.client_id,
    Invoice? this.invoice,
    string? this.title,
    string? this.description,
    string? this.photo_url,
    int32? this.photo_size,
    int32? this.photo_width,
    int32? this.photo_height,
    bytes? this.payload,
    string? this.provider_token,
    string? this.provider_data,
    string? this.start_parameter,
  });

  InputMessageInvoice.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invoice = map.containsKey('invoice')
        ? TlMap.fromMap(map['invoice']) as Invoice
        : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    photo_url = map.containsKey('photo_url') ? map['photo_url'] : null;
    photo_size = map.containsKey('photo_size') ? map['photo_size'] : null;
    photo_width = map.containsKey('photo_width') ? map['photo_width'] : null;
    photo_height = map.containsKey('photo_height') ? map['photo_height'] : null;
    payload = map.containsKey('payload') ? map['payload'] : null;
    provider_token =
        map.containsKey('provider_token') ? map['provider_token'] : null;
    provider_data =
        map.containsKey('provider_data') ? map['provider_data'] : null;
    start_parameter =
        map.containsKey('start_parameter') ? map['start_parameter'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invoice': invoice?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'photo_url': photo_url?.toMap(skipNulls: skipNulls),
      'photo_size': photo_size?.toMap(skipNulls: skipNulls),
      'photo_width': photo_width?.toMap(skipNulls: skipNulls),
      'photo_height': photo_height?.toMap(skipNulls: skipNulls),
      'payload': payload?.toMap(skipNulls: skipNulls),
      'provider_token': provider_token?.toMap(skipNulls: skipNulls),
      'provider_data': provider_data?.toMap(skipNulls: skipNulls),
      'start_parameter': start_parameter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessagePoll extends InputMessageContent {
  String get tlType => 'inputMessagePoll';

  string? extra;
  int? client_id;
  string? question;
  vector<string>? options;
  Bool? is_anonymous;
  PollType? type;
  int32? open_period;
  int32? close_date;
  Bool? is_closed;

  InputMessagePoll({
    string? this.extra,
    int? this.client_id,
    string? this.question,
    vector<string>? this.options,
    Bool? this.is_anonymous,
    PollType? this.type,
    int32? this.open_period,
    int32? this.close_date,
    Bool? this.is_closed,
  });

  InputMessagePoll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    question = map.containsKey('question') ? map['question'] : null;
    if (map.containsKey('options') && map['options'] != null) {
      options = [];
      var someValues = map['options'];
      for (var someValue in someValues) {
        options?.add(someValue);
      }
    }
    is_anonymous = map.containsKey('is_anonymous') ? map['is_anonymous'] : null;
    type =
        map.containsKey('type') ? TlMap.fromMap(map['type']) as PollType : null;
    open_period = map.containsKey('open_period') ? map['open_period'] : null;
    close_date = map.containsKey('close_date') ? map['close_date'] : null;
    is_closed = map.containsKey('is_closed') ? map['is_closed'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'question': question?.toMap(skipNulls: skipNulls),
      'options': options?.toMap(skipNulls: skipNulls),
      'is_anonymous': is_anonymous?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'open_period': open_period?.toMap(skipNulls: skipNulls),
      'close_date': close_date?.toMap(skipNulls: skipNulls),
      'is_closed': is_closed?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputMessageForwarded extends InputMessageContent {
  String get tlType => 'inputMessageForwarded';

  string? extra;
  int? client_id;
  int53? from_chat_id;
  int53? message_id;
  Bool? in_game_share;
  MessageCopyOptions? copy_options;

  InputMessageForwarded({
    string? this.extra,
    int? this.client_id,
    int53? this.from_chat_id,
    int53? this.message_id,
    Bool? this.in_game_share,
    MessageCopyOptions? this.copy_options,
  });

  InputMessageForwarded.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    from_chat_id = map.containsKey('from_chat_id') ? map['from_chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    in_game_share =
        map.containsKey('in_game_share') ? map['in_game_share'] : null;
    copy_options = map.containsKey('copy_options')
        ? TlMap.fromMap(map['copy_options']) as MessageCopyOptions
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'from_chat_id': from_chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'in_game_share': in_game_share?.toMap(skipNulls: skipNulls),
      'copy_options': copy_options?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterEmpty extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterEmpty';

  string? extra;
  int? client_id;

  SearchMessagesFilterEmpty({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterEmpty.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterAnimation extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterAnimation';

  string? extra;
  int? client_id;

  SearchMessagesFilterAnimation({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterAudio extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterAudio';

  string? extra;
  int? client_id;

  SearchMessagesFilterAudio({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterAudio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterDocument extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterDocument';

  string? extra;
  int? client_id;

  SearchMessagesFilterDocument({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterPhoto extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterPhoto';

  string? extra;
  int? client_id;

  SearchMessagesFilterPhoto({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterVideo extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterVideo';

  string? extra;
  int? client_id;

  SearchMessagesFilterVideo({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterVoiceNote extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterVoiceNote';

  string? extra;
  int? client_id;

  SearchMessagesFilterVoiceNote({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterPhotoAndVideo extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterPhotoAndVideo';

  string? extra;
  int? client_id;

  SearchMessagesFilterPhotoAndVideo({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterPhotoAndVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterUrl extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterUrl';

  string? extra;
  int? client_id;

  SearchMessagesFilterUrl({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterChatPhoto extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterChatPhoto';

  string? extra;
  int? client_id;

  SearchMessagesFilterChatPhoto({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterChatPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterVideoNote extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterVideoNote';

  string? extra;
  int? client_id;

  SearchMessagesFilterVideoNote({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterVideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterVoiceAndVideoNote extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterVoiceAndVideoNote';

  string? extra;
  int? client_id;

  SearchMessagesFilterVoiceAndVideoNote({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterVoiceAndVideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterMention extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterMention';

  string? extra;
  int? client_id;

  SearchMessagesFilterMention({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterMention.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterUnreadMention extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterUnreadMention';

  string? extra;
  int? client_id;

  SearchMessagesFilterUnreadMention({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterUnreadMention.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterFailedToSend extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterFailedToSend';

  string? extra;
  int? client_id;

  SearchMessagesFilterFailedToSend({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterFailedToSend.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessagesFilterPinned extends SearchMessagesFilter {
  String get tlType => 'searchMessagesFilterPinned';

  string? extra;
  int? client_id;

  SearchMessagesFilterPinned({
    string? this.extra,
    int? this.client_id,
  });

  SearchMessagesFilterPinned.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionTyping extends ChatAction {
  String get tlType => 'chatActionTyping';

  string? extra;
  int? client_id;

  ChatActionTyping({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionTyping.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionRecordingVideo extends ChatAction {
  String get tlType => 'chatActionRecordingVideo';

  string? extra;
  int? client_id;

  ChatActionRecordingVideo({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionRecordingVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionUploadingVideo extends ChatAction {
  String get tlType => 'chatActionUploadingVideo';

  string? extra;
  int? client_id;
  int32? progress;

  ChatActionUploadingVideo({
    string? this.extra,
    int? this.client_id,
    int32? this.progress,
  });

  ChatActionUploadingVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    progress = map.containsKey('progress') ? map['progress'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'progress': progress?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionRecordingVoiceNote extends ChatAction {
  String get tlType => 'chatActionRecordingVoiceNote';

  string? extra;
  int? client_id;

  ChatActionRecordingVoiceNote({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionRecordingVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionUploadingVoiceNote extends ChatAction {
  String get tlType => 'chatActionUploadingVoiceNote';

  string? extra;
  int? client_id;
  int32? progress;

  ChatActionUploadingVoiceNote({
    string? this.extra,
    int? this.client_id,
    int32? this.progress,
  });

  ChatActionUploadingVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    progress = map.containsKey('progress') ? map['progress'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'progress': progress?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionUploadingPhoto extends ChatAction {
  String get tlType => 'chatActionUploadingPhoto';

  string? extra;
  int? client_id;
  int32? progress;

  ChatActionUploadingPhoto({
    string? this.extra,
    int? this.client_id,
    int32? this.progress,
  });

  ChatActionUploadingPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    progress = map.containsKey('progress') ? map['progress'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'progress': progress?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionUploadingDocument extends ChatAction {
  String get tlType => 'chatActionUploadingDocument';

  string? extra;
  int? client_id;
  int32? progress;

  ChatActionUploadingDocument({
    string? this.extra,
    int? this.client_id,
    int32? this.progress,
  });

  ChatActionUploadingDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    progress = map.containsKey('progress') ? map['progress'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'progress': progress?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionChoosingSticker extends ChatAction {
  String get tlType => 'chatActionChoosingSticker';

  string? extra;
  int? client_id;

  ChatActionChoosingSticker({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionChoosingSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionChoosingLocation extends ChatAction {
  String get tlType => 'chatActionChoosingLocation';

  string? extra;
  int? client_id;

  ChatActionChoosingLocation({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionChoosingLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionChoosingContact extends ChatAction {
  String get tlType => 'chatActionChoosingContact';

  string? extra;
  int? client_id;

  ChatActionChoosingContact({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionChoosingContact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionStartPlayingGame extends ChatAction {
  String get tlType => 'chatActionStartPlayingGame';

  string? extra;
  int? client_id;

  ChatActionStartPlayingGame({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionStartPlayingGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionRecordingVideoNote extends ChatAction {
  String get tlType => 'chatActionRecordingVideoNote';

  string? extra;
  int? client_id;

  ChatActionRecordingVideoNote({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionRecordingVideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionUploadingVideoNote extends ChatAction {
  String get tlType => 'chatActionUploadingVideoNote';

  string? extra;
  int? client_id;
  int32? progress;

  ChatActionUploadingVideoNote({
    string? this.extra,
    int? this.client_id,
    int32? this.progress,
  });

  ChatActionUploadingVideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    progress = map.containsKey('progress') ? map['progress'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'progress': progress?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionWatchingAnimations extends ChatAction {
  String get tlType => 'chatActionWatchingAnimations';

  string? extra;
  int? client_id;
  string? emoji;

  ChatActionWatchingAnimations({
    string? this.extra,
    int? this.client_id,
    string? this.emoji,
  });

  ChatActionWatchingAnimations.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatActionCancel extends ChatAction {
  String get tlType => 'chatActionCancel';

  string? extra;
  int? client_id;

  ChatActionCancel({
    string? this.extra,
    int? this.client_id,
  });

  ChatActionCancel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserStatusEmpty extends UserStatus {
  String get tlType => 'userStatusEmpty';

  string? extra;
  int? client_id;

  UserStatusEmpty({
    string? this.extra,
    int? this.client_id,
  });

  UserStatusEmpty.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserStatusOnline extends UserStatus {
  String get tlType => 'userStatusOnline';

  string? extra;
  int? client_id;
  int32? expires;

  UserStatusOnline({
    string? this.extra,
    int? this.client_id,
    int32? this.expires,
  });

  UserStatusOnline.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    expires = map.containsKey('expires') ? map['expires'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'expires': expires?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserStatusOffline extends UserStatus {
  String get tlType => 'userStatusOffline';

  string? extra;
  int? client_id;
  int32? was_online;

  UserStatusOffline({
    string? this.extra,
    int? this.client_id,
    int32? this.was_online,
  });

  UserStatusOffline.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    was_online = map.containsKey('was_online') ? map['was_online'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'was_online': was_online?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserStatusRecently extends UserStatus {
  String get tlType => 'userStatusRecently';

  string? extra;
  int? client_id;

  UserStatusRecently({
    string? this.extra,
    int? this.client_id,
  });

  UserStatusRecently.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserStatusLastWeek extends UserStatus {
  String get tlType => 'userStatusLastWeek';

  string? extra;
  int? client_id;

  UserStatusLastWeek({
    string? this.extra,
    int? this.client_id,
  });

  UserStatusLastWeek.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserStatusLastMonth extends UserStatus {
  String get tlType => 'userStatusLastMonth';

  string? extra;
  int? client_id;

  UserStatusLastMonth({
    string? this.extra,
    int? this.client_id,
  });

  UserStatusLastMonth.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Stickers extends TdObject {
  String get tlType => 'stickers';

  string? extra;
  int? client_id;
  vector<Sticker>? stickers;

  Stickers({
    string? this.extra,
    int? this.client_id,
    vector<Sticker>? this.stickers,
  });

  Stickers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('stickers') && map['stickers'] != null) {
      stickers = [];
      var someValues = map['stickers'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Sticker;
        stickers?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'stickers': stickers?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Emojis extends TdObject {
  String get tlType => 'emojis';

  string? extra;
  int? client_id;
  vector<string>? emojis;

  Emojis({
    string? this.extra,
    int? this.client_id,
    vector<string>? this.emojis,
  });

  Emojis.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('emojis') && map['emojis'] != null) {
      emojis = [];
      var someValues = map['emojis'];
      for (var someValue in someValues) {
        emojis?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'emojis': emojis?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StickerSet extends TdObject {
  String get tlType => 'stickerSet';

  string? extra;
  int? client_id;
  int64? id;
  string? title;
  string? name;
  Thumbnail? thumbnail;
  vector<ClosedVectorPath>? thumbnail_outline;
  Bool? is_installed;
  Bool? is_archived;
  Bool? is_official;
  Bool? is_animated;
  Bool? is_masks;
  Bool? is_viewed;
  vector<Sticker>? stickers;
  vector<Emojis>? emojis;

  StickerSet({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    string? this.title,
    string? this.name,
    Thumbnail? this.thumbnail,
    vector<ClosedVectorPath>? this.thumbnail_outline,
    Bool? this.is_installed,
    Bool? this.is_archived,
    Bool? this.is_official,
    Bool? this.is_animated,
    Bool? this.is_masks,
    Bool? this.is_viewed,
    vector<Sticker>? this.stickers,
    vector<Emojis>? this.emojis,
  });

  StickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
    if (map.containsKey('thumbnail_outline') &&
        map['thumbnail_outline'] != null) {
      thumbnail_outline = [];
      var someValues = map['thumbnail_outline'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ClosedVectorPath;
        thumbnail_outline?.add(obj);
      }
    }
    is_installed = map.containsKey('is_installed') ? map['is_installed'] : null;
    is_archived = map.containsKey('is_archived') ? map['is_archived'] : null;
    is_official = map.containsKey('is_official') ? map['is_official'] : null;
    is_animated = map.containsKey('is_animated') ? map['is_animated'] : null;
    is_masks = map.containsKey('is_masks') ? map['is_masks'] : null;
    is_viewed = map.containsKey('is_viewed') ? map['is_viewed'] : null;
    if (map.containsKey('stickers') && map['stickers'] != null) {
      stickers = [];
      var someValues = map['stickers'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Sticker;
        stickers?.add(obj);
      }
    }
    if (map.containsKey('emojis') && map['emojis'] != null) {
      emojis = [];
      var someValues = map['emojis'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Emojis;
        emojis?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'thumbnail_outline': thumbnail_outline?.toMap(skipNulls: skipNulls),
      'is_installed': is_installed?.toMap(skipNulls: skipNulls),
      'is_archived': is_archived?.toMap(skipNulls: skipNulls),
      'is_official': is_official?.toMap(skipNulls: skipNulls),
      'is_animated': is_animated?.toMap(skipNulls: skipNulls),
      'is_masks': is_masks?.toMap(skipNulls: skipNulls),
      'is_viewed': is_viewed?.toMap(skipNulls: skipNulls),
      'stickers': stickers?.toMap(skipNulls: skipNulls),
      'emojis': emojis?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StickerSetInfo extends TdObject {
  String get tlType => 'stickerSetInfo';

  string? extra;
  int? client_id;
  int64? id;
  string? title;
  string? name;
  Thumbnail? thumbnail;
  vector<ClosedVectorPath>? thumbnail_outline;
  Bool? is_installed;
  Bool? is_archived;
  Bool? is_official;
  Bool? is_animated;
  Bool? is_masks;
  Bool? is_viewed;
  int32? size;
  vector<Sticker>? covers;

  StickerSetInfo({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    string? this.title,
    string? this.name,
    Thumbnail? this.thumbnail,
    vector<ClosedVectorPath>? this.thumbnail_outline,
    Bool? this.is_installed,
    Bool? this.is_archived,
    Bool? this.is_official,
    Bool? this.is_animated,
    Bool? this.is_masks,
    Bool? this.is_viewed,
    int32? this.size,
    vector<Sticker>? this.covers,
  });

  StickerSetInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
    if (map.containsKey('thumbnail_outline') &&
        map['thumbnail_outline'] != null) {
      thumbnail_outline = [];
      var someValues = map['thumbnail_outline'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ClosedVectorPath;
        thumbnail_outline?.add(obj);
      }
    }
    is_installed = map.containsKey('is_installed') ? map['is_installed'] : null;
    is_archived = map.containsKey('is_archived') ? map['is_archived'] : null;
    is_official = map.containsKey('is_official') ? map['is_official'] : null;
    is_animated = map.containsKey('is_animated') ? map['is_animated'] : null;
    is_masks = map.containsKey('is_masks') ? map['is_masks'] : null;
    is_viewed = map.containsKey('is_viewed') ? map['is_viewed'] : null;
    size = map.containsKey('size') ? map['size'] : null;
    if (map.containsKey('covers') && map['covers'] != null) {
      covers = [];
      var someValues = map['covers'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Sticker;
        covers?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
      'thumbnail_outline': thumbnail_outline?.toMap(skipNulls: skipNulls),
      'is_installed': is_installed?.toMap(skipNulls: skipNulls),
      'is_archived': is_archived?.toMap(skipNulls: skipNulls),
      'is_official': is_official?.toMap(skipNulls: skipNulls),
      'is_animated': is_animated?.toMap(skipNulls: skipNulls),
      'is_masks': is_masks?.toMap(skipNulls: skipNulls),
      'is_viewed': is_viewed?.toMap(skipNulls: skipNulls),
      'size': size?.toMap(skipNulls: skipNulls),
      'covers': covers?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StickerSets extends TdObject {
  String get tlType => 'stickerSets';

  string? extra;
  int? client_id;
  int32? total_count;
  vector<StickerSetInfo>? sets;

  StickerSets({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    vector<StickerSetInfo>? this.sets,
  });

  StickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('sets') && map['sets'] != null) {
      sets = [];
      var someValues = map['sets'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as StickerSetInfo;
        sets?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'sets': sets?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallDiscardReasonEmpty extends CallDiscardReason {
  String get tlType => 'callDiscardReasonEmpty';

  string? extra;
  int? client_id;

  CallDiscardReasonEmpty({
    string? this.extra,
    int? this.client_id,
  });

  CallDiscardReasonEmpty.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallDiscardReasonMissed extends CallDiscardReason {
  String get tlType => 'callDiscardReasonMissed';

  string? extra;
  int? client_id;

  CallDiscardReasonMissed({
    string? this.extra,
    int? this.client_id,
  });

  CallDiscardReasonMissed.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallDiscardReasonDeclined extends CallDiscardReason {
  String get tlType => 'callDiscardReasonDeclined';

  string? extra;
  int? client_id;

  CallDiscardReasonDeclined({
    string? this.extra,
    int? this.client_id,
  });

  CallDiscardReasonDeclined.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallDiscardReasonDisconnected extends CallDiscardReason {
  String get tlType => 'callDiscardReasonDisconnected';

  string? extra;
  int? client_id;

  CallDiscardReasonDisconnected({
    string? this.extra,
    int? this.client_id,
  });

  CallDiscardReasonDisconnected.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallDiscardReasonHungUp extends CallDiscardReason {
  String get tlType => 'callDiscardReasonHungUp';

  string? extra;
  int? client_id;

  CallDiscardReasonHungUp({
    string? this.extra,
    int? this.client_id,
  });

  CallDiscardReasonHungUp.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProtocol extends TdObject {
  String get tlType => 'callProtocol';

  string? extra;
  int? client_id;
  Bool? udp_p2p;
  Bool? udp_reflector;
  int32? min_layer;
  int32? max_layer;
  vector<string>? library_versions;

  CallProtocol({
    string? this.extra,
    int? this.client_id,
    Bool? this.udp_p2p,
    Bool? this.udp_reflector,
    int32? this.min_layer,
    int32? this.max_layer,
    vector<string>? this.library_versions,
  });

  CallProtocol.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    udp_p2p = map.containsKey('udp_p2p') ? map['udp_p2p'] : null;
    udp_reflector =
        map.containsKey('udp_reflector') ? map['udp_reflector'] : null;
    min_layer = map.containsKey('min_layer') ? map['min_layer'] : null;
    max_layer = map.containsKey('max_layer') ? map['max_layer'] : null;
    if (map.containsKey('library_versions') &&
        map['library_versions'] != null) {
      library_versions = [];
      var someValues = map['library_versions'];
      for (var someValue in someValues) {
        library_versions?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'udp_p2p': udp_p2p?.toMap(skipNulls: skipNulls),
      'udp_reflector': udp_reflector?.toMap(skipNulls: skipNulls),
      'min_layer': min_layer?.toMap(skipNulls: skipNulls),
      'max_layer': max_layer?.toMap(skipNulls: skipNulls),
      'library_versions': library_versions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallServerTypeTelegramReflector extends CallServerType {
  String get tlType => 'callServerTypeTelegramReflector';

  string? extra;
  int? client_id;
  bytes? peer_tag;

  CallServerTypeTelegramReflector({
    string? this.extra,
    int? this.client_id,
    bytes? this.peer_tag,
  });

  CallServerTypeTelegramReflector.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    peer_tag = map.containsKey('peer_tag') ? map['peer_tag'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'peer_tag': peer_tag?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallServerTypeWebrtc extends CallServerType {
  String get tlType => 'callServerTypeWebrtc';

  string? extra;
  int? client_id;
  string? username;
  string? password;
  Bool? supports_turn;
  Bool? supports_stun;

  CallServerTypeWebrtc({
    string? this.extra,
    int? this.client_id,
    string? this.username,
    string? this.password,
    Bool? this.supports_turn,
    Bool? this.supports_stun,
  });

  CallServerTypeWebrtc.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    username = map.containsKey('username') ? map['username'] : null;
    password = map.containsKey('password') ? map['password'] : null;
    supports_turn =
        map.containsKey('supports_turn') ? map['supports_turn'] : null;
    supports_stun =
        map.containsKey('supports_stun') ? map['supports_stun'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
      'supports_turn': supports_turn?.toMap(skipNulls: skipNulls),
      'supports_stun': supports_stun?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallServer extends TdObject {
  String get tlType => 'callServer';

  string? extra;
  int? client_id;
  int64? id;
  string? ip_address;
  string? ipv6_address;
  int32? port;
  CallServerType? type;

  CallServer({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    string? this.ip_address,
    string? this.ipv6_address,
    int32? this.port,
    CallServerType? this.type,
  });

  CallServer.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    ip_address = map.containsKey('ip_address') ? map['ip_address'] : null;
    ipv6_address = map.containsKey('ipv6_address') ? map['ipv6_address'] : null;
    port = map.containsKey('port') ? map['port'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as CallServerType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'ip_address': ip_address?.toMap(skipNulls: skipNulls),
      'ipv6_address': ipv6_address?.toMap(skipNulls: skipNulls),
      'port': port?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallId extends TdObject {
  String get tlType => 'callId';

  string? extra;
  int? client_id;
  int32? id;

  CallId({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
  });

  CallId.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCallId extends TdObject {
  String get tlType => 'groupCallId';

  string? extra;
  int? client_id;
  int32? id;

  GroupCallId({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
  });

  GroupCallId.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallStatePending extends CallState {
  String get tlType => 'callStatePending';

  string? extra;
  int? client_id;
  Bool? is_created;
  Bool? is_received;

  CallStatePending({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_created,
    Bool? this.is_received,
  });

  CallStatePending.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_created = map.containsKey('is_created') ? map['is_created'] : null;
    is_received = map.containsKey('is_received') ? map['is_received'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_created': is_created?.toMap(skipNulls: skipNulls),
      'is_received': is_received?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallStateExchangingKeys extends CallState {
  String get tlType => 'callStateExchangingKeys';

  string? extra;
  int? client_id;

  CallStateExchangingKeys({
    string? this.extra,
    int? this.client_id,
  });

  CallStateExchangingKeys.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallStateReady extends CallState {
  String get tlType => 'callStateReady';

  string? extra;
  int? client_id;
  CallProtocol? protocol;
  vector<CallServer>? servers;
  string? config;
  bytes? encryption_key;
  vector<string>? emojis;
  Bool? allow_p2p;

  CallStateReady({
    string? this.extra,
    int? this.client_id,
    CallProtocol? this.protocol,
    vector<CallServer>? this.servers,
    string? this.config,
    bytes? this.encryption_key,
    vector<string>? this.emojis,
    Bool? this.allow_p2p,
  });

  CallStateReady.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    protocol = map.containsKey('protocol')
        ? TlMap.fromMap(map['protocol']) as CallProtocol
        : null;
    if (map.containsKey('servers') && map['servers'] != null) {
      servers = [];
      var someValues = map['servers'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as CallServer;
        servers?.add(obj);
      }
    }
    config = map.containsKey('config') ? map['config'] : null;
    encryption_key =
        map.containsKey('encryption_key') ? map['encryption_key'] : null;
    if (map.containsKey('emojis') && map['emojis'] != null) {
      emojis = [];
      var someValues = map['emojis'];
      for (var someValue in someValues) {
        emojis?.add(someValue);
      }
    }
    allow_p2p = map.containsKey('allow_p2p') ? map['allow_p2p'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'protocol': protocol?.toMap(skipNulls: skipNulls),
      'servers': servers?.toMap(skipNulls: skipNulls),
      'config': config?.toMap(skipNulls: skipNulls),
      'encryption_key': encryption_key?.toMap(skipNulls: skipNulls),
      'emojis': emojis?.toMap(skipNulls: skipNulls),
      'allow_p2p': allow_p2p?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallStateHangingUp extends CallState {
  String get tlType => 'callStateHangingUp';

  string? extra;
  int? client_id;

  CallStateHangingUp({
    string? this.extra,
    int? this.client_id,
  });

  CallStateHangingUp.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallStateDiscarded extends CallState {
  String get tlType => 'callStateDiscarded';

  string? extra;
  int? client_id;
  CallDiscardReason? reason;
  Bool? need_rating;
  Bool? need_debug_information;

  CallStateDiscarded({
    string? this.extra,
    int? this.client_id,
    CallDiscardReason? this.reason,
    Bool? this.need_rating,
    Bool? this.need_debug_information,
  });

  CallStateDiscarded.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    reason = map.containsKey('reason')
        ? TlMap.fromMap(map['reason']) as CallDiscardReason
        : null;
    need_rating = map.containsKey('need_rating') ? map['need_rating'] : null;
    need_debug_information = map.containsKey('need_debug_information')
        ? map['need_debug_information']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'reason': reason?.toMap(skipNulls: skipNulls),
      'need_rating': need_rating?.toMap(skipNulls: skipNulls),
      'need_debug_information':
          need_debug_information?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallStateError extends CallState {
  String get tlType => 'callStateError';

  string? extra;
  int? client_id;
  Error? error;

  CallStateError({
    string? this.extra,
    int? this.client_id,
    Error? this.error,
  });

  CallStateError.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    error =
        map.containsKey('error') ? TlMap.fromMap(map['error']) as Error : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'error': error?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCallVideoQualityThumbnail extends GroupCallVideoQuality {
  String get tlType => 'groupCallVideoQualityThumbnail';

  string? extra;
  int? client_id;

  GroupCallVideoQualityThumbnail({
    string? this.extra,
    int? this.client_id,
  });

  GroupCallVideoQualityThumbnail.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCallVideoQualityMedium extends GroupCallVideoQuality {
  String get tlType => 'groupCallVideoQualityMedium';

  string? extra;
  int? client_id;

  GroupCallVideoQualityMedium({
    string? this.extra,
    int? this.client_id,
  });

  GroupCallVideoQualityMedium.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCallVideoQualityFull extends GroupCallVideoQuality {
  String get tlType => 'groupCallVideoQualityFull';

  string? extra;
  int? client_id;

  GroupCallVideoQualityFull({
    string? this.extra,
    int? this.client_id,
  });

  GroupCallVideoQualityFull.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCallRecentSpeaker extends TdObject {
  String get tlType => 'groupCallRecentSpeaker';

  string? extra;
  int? client_id;
  MessageSender? participant_id;
  Bool? is_speaking;

  GroupCallRecentSpeaker({
    string? this.extra,
    int? this.client_id,
    MessageSender? this.participant_id,
    Bool? this.is_speaking,
  });

  GroupCallRecentSpeaker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    participant_id = map.containsKey('participant_id')
        ? TlMap.fromMap(map['participant_id']) as MessageSender
        : null;
    is_speaking = map.containsKey('is_speaking') ? map['is_speaking'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'participant_id': participant_id?.toMap(skipNulls: skipNulls),
      'is_speaking': is_speaking?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCall extends TdObject {
  String get tlType => 'groupCall';

  string? extra;
  int? client_id;
  int32? id;
  string? title;
  int32? scheduled_start_date;
  Bool? enabled_start_notification;
  Bool? is_active;
  Bool? is_joined;
  Bool? need_rejoin;
  Bool? can_be_managed;
  int32? participant_count;
  Bool? loaded_all_participants;
  vector<GroupCallRecentSpeaker>? recent_speakers;
  Bool? is_my_video_enabled;
  Bool? is_my_video_paused;
  Bool? can_enable_video;
  Bool? mute_new_participants;
  Bool? can_toggle_mute_new_participants;
  int32? record_duration;
  Bool? is_video_recorded;
  int32? duration;

  GroupCall({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    string? this.title,
    int32? this.scheduled_start_date,
    Bool? this.enabled_start_notification,
    Bool? this.is_active,
    Bool? this.is_joined,
    Bool? this.need_rejoin,
    Bool? this.can_be_managed,
    int32? this.participant_count,
    Bool? this.loaded_all_participants,
    vector<GroupCallRecentSpeaker>? this.recent_speakers,
    Bool? this.is_my_video_enabled,
    Bool? this.is_my_video_paused,
    Bool? this.can_enable_video,
    Bool? this.mute_new_participants,
    Bool? this.can_toggle_mute_new_participants,
    int32? this.record_duration,
    Bool? this.is_video_recorded,
    int32? this.duration,
  });

  GroupCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    scheduled_start_date = map.containsKey('scheduled_start_date')
        ? map['scheduled_start_date']
        : null;
    enabled_start_notification = map.containsKey('enabled_start_notification')
        ? map['enabled_start_notification']
        : null;
    is_active = map.containsKey('is_active') ? map['is_active'] : null;
    is_joined = map.containsKey('is_joined') ? map['is_joined'] : null;
    need_rejoin = map.containsKey('need_rejoin') ? map['need_rejoin'] : null;
    can_be_managed =
        map.containsKey('can_be_managed') ? map['can_be_managed'] : null;
    participant_count =
        map.containsKey('participant_count') ? map['participant_count'] : null;
    loaded_all_participants = map.containsKey('loaded_all_participants')
        ? map['loaded_all_participants']
        : null;
    if (map.containsKey('recent_speakers') && map['recent_speakers'] != null) {
      recent_speakers = [];
      var someValues = map['recent_speakers'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as GroupCallRecentSpeaker;
        recent_speakers?.add(obj);
      }
    }
    is_my_video_enabled = map.containsKey('is_my_video_enabled')
        ? map['is_my_video_enabled']
        : null;
    is_my_video_paused = map.containsKey('is_my_video_paused')
        ? map['is_my_video_paused']
        : null;
    can_enable_video =
        map.containsKey('can_enable_video') ? map['can_enable_video'] : null;
    mute_new_participants = map.containsKey('mute_new_participants')
        ? map['mute_new_participants']
        : null;
    can_toggle_mute_new_participants =
        map.containsKey('can_toggle_mute_new_participants')
            ? map['can_toggle_mute_new_participants']
            : null;
    record_duration =
        map.containsKey('record_duration') ? map['record_duration'] : null;
    is_video_recorded =
        map.containsKey('is_video_recorded') ? map['is_video_recorded'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'scheduled_start_date': scheduled_start_date?.toMap(skipNulls: skipNulls),
      'enabled_start_notification':
          enabled_start_notification?.toMap(skipNulls: skipNulls),
      'is_active': is_active?.toMap(skipNulls: skipNulls),
      'is_joined': is_joined?.toMap(skipNulls: skipNulls),
      'need_rejoin': need_rejoin?.toMap(skipNulls: skipNulls),
      'can_be_managed': can_be_managed?.toMap(skipNulls: skipNulls),
      'participant_count': participant_count?.toMap(skipNulls: skipNulls),
      'loaded_all_participants':
          loaded_all_participants?.toMap(skipNulls: skipNulls),
      'recent_speakers': recent_speakers?.toMap(skipNulls: skipNulls),
      'is_my_video_enabled': is_my_video_enabled?.toMap(skipNulls: skipNulls),
      'is_my_video_paused': is_my_video_paused?.toMap(skipNulls: skipNulls),
      'can_enable_video': can_enable_video?.toMap(skipNulls: skipNulls),
      'mute_new_participants':
          mute_new_participants?.toMap(skipNulls: skipNulls),
      'can_toggle_mute_new_participants':
          can_toggle_mute_new_participants?.toMap(skipNulls: skipNulls),
      'record_duration': record_duration?.toMap(skipNulls: skipNulls),
      'is_video_recorded': is_video_recorded?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCallVideoSourceGroup extends TdObject {
  String get tlType => 'groupCallVideoSourceGroup';

  string? extra;
  int? client_id;
  string? semantics;
  vector<int32>? source_ids;

  GroupCallVideoSourceGroup({
    string? this.extra,
    int? this.client_id,
    string? this.semantics,
    vector<int32>? this.source_ids,
  });

  GroupCallVideoSourceGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    semantics = map.containsKey('semantics') ? map['semantics'] : null;
    if (map.containsKey('source_ids') && map['source_ids'] != null) {
      source_ids = [];
      var someValues = map['source_ids'];
      for (var someValue in someValues) {
        source_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'semantics': semantics?.toMap(skipNulls: skipNulls),
      'source_ids': source_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCallParticipantVideoInfo extends TdObject {
  String get tlType => 'groupCallParticipantVideoInfo';

  string? extra;
  int? client_id;
  vector<GroupCallVideoSourceGroup>? source_groups;
  string? endpoint_id;
  Bool? is_paused;

  GroupCallParticipantVideoInfo({
    string? this.extra,
    int? this.client_id,
    vector<GroupCallVideoSourceGroup>? this.source_groups,
    string? this.endpoint_id,
    Bool? this.is_paused,
  });

  GroupCallParticipantVideoInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('source_groups') && map['source_groups'] != null) {
      source_groups = [];
      var someValues = map['source_groups'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as GroupCallVideoSourceGroup;
        source_groups?.add(obj);
      }
    }
    endpoint_id = map.containsKey('endpoint_id') ? map['endpoint_id'] : null;
    is_paused = map.containsKey('is_paused') ? map['is_paused'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'source_groups': source_groups?.toMap(skipNulls: skipNulls),
      'endpoint_id': endpoint_id?.toMap(skipNulls: skipNulls),
      'is_paused': is_paused?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GroupCallParticipant extends TdObject {
  String get tlType => 'groupCallParticipant';

  string? extra;
  int? client_id;
  MessageSender? participant_id;
  int32? audio_source_id;
  int32? screen_sharing_audio_source_id;
  GroupCallParticipantVideoInfo? video_info;
  GroupCallParticipantVideoInfo? screen_sharing_video_info;
  string? bio;
  Bool? is_current_user;
  Bool? is_speaking;
  Bool? is_hand_raised;
  Bool? can_be_muted_for_all_users;
  Bool? can_be_unmuted_for_all_users;
  Bool? can_be_muted_for_current_user;
  Bool? can_be_unmuted_for_current_user;
  Bool? is_muted_for_all_users;
  Bool? is_muted_for_current_user;
  Bool? can_unmute_self;
  int32? volume_level;
  string? order;

  GroupCallParticipant({
    string? this.extra,
    int? this.client_id,
    MessageSender? this.participant_id,
    int32? this.audio_source_id,
    int32? this.screen_sharing_audio_source_id,
    GroupCallParticipantVideoInfo? this.video_info,
    GroupCallParticipantVideoInfo? this.screen_sharing_video_info,
    string? this.bio,
    Bool? this.is_current_user,
    Bool? this.is_speaking,
    Bool? this.is_hand_raised,
    Bool? this.can_be_muted_for_all_users,
    Bool? this.can_be_unmuted_for_all_users,
    Bool? this.can_be_muted_for_current_user,
    Bool? this.can_be_unmuted_for_current_user,
    Bool? this.is_muted_for_all_users,
    Bool? this.is_muted_for_current_user,
    Bool? this.can_unmute_self,
    int32? this.volume_level,
    string? this.order,
  });

  GroupCallParticipant.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    participant_id = map.containsKey('participant_id')
        ? TlMap.fromMap(map['participant_id']) as MessageSender
        : null;
    audio_source_id =
        map.containsKey('audio_source_id') ? map['audio_source_id'] : null;
    screen_sharing_audio_source_id =
        map.containsKey('screen_sharing_audio_source_id')
            ? map['screen_sharing_audio_source_id']
            : null;
    video_info = map.containsKey('video_info')
        ? TlMap.fromMap(map['video_info']) as GroupCallParticipantVideoInfo
        : null;
    screen_sharing_video_info = map.containsKey('screen_sharing_video_info')
        ? TlMap.fromMap(map['screen_sharing_video_info'])
            as GroupCallParticipantVideoInfo
        : null;
    bio = map.containsKey('bio') ? map['bio'] : null;
    is_current_user =
        map.containsKey('is_current_user') ? map['is_current_user'] : null;
    is_speaking = map.containsKey('is_speaking') ? map['is_speaking'] : null;
    is_hand_raised =
        map.containsKey('is_hand_raised') ? map['is_hand_raised'] : null;
    can_be_muted_for_all_users = map.containsKey('can_be_muted_for_all_users')
        ? map['can_be_muted_for_all_users']
        : null;
    can_be_unmuted_for_all_users =
        map.containsKey('can_be_unmuted_for_all_users')
            ? map['can_be_unmuted_for_all_users']
            : null;
    can_be_muted_for_current_user =
        map.containsKey('can_be_muted_for_current_user')
            ? map['can_be_muted_for_current_user']
            : null;
    can_be_unmuted_for_current_user =
        map.containsKey('can_be_unmuted_for_current_user')
            ? map['can_be_unmuted_for_current_user']
            : null;
    is_muted_for_all_users = map.containsKey('is_muted_for_all_users')
        ? map['is_muted_for_all_users']
        : null;
    is_muted_for_current_user = map.containsKey('is_muted_for_current_user')
        ? map['is_muted_for_current_user']
        : null;
    can_unmute_self =
        map.containsKey('can_unmute_self') ? map['can_unmute_self'] : null;
    volume_level = map.containsKey('volume_level') ? map['volume_level'] : null;
    order = map.containsKey('order') ? map['order'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'participant_id': participant_id?.toMap(skipNulls: skipNulls),
      'audio_source_id': audio_source_id?.toMap(skipNulls: skipNulls),
      'screen_sharing_audio_source_id':
          screen_sharing_audio_source_id?.toMap(skipNulls: skipNulls),
      'video_info': video_info?.toMap(skipNulls: skipNulls),
      'screen_sharing_video_info':
          screen_sharing_video_info?.toMap(skipNulls: skipNulls),
      'bio': bio?.toMap(skipNulls: skipNulls),
      'is_current_user': is_current_user?.toMap(skipNulls: skipNulls),
      'is_speaking': is_speaking?.toMap(skipNulls: skipNulls),
      'is_hand_raised': is_hand_raised?.toMap(skipNulls: skipNulls),
      'can_be_muted_for_all_users':
          can_be_muted_for_all_users?.toMap(skipNulls: skipNulls),
      'can_be_unmuted_for_all_users':
          can_be_unmuted_for_all_users?.toMap(skipNulls: skipNulls),
      'can_be_muted_for_current_user':
          can_be_muted_for_current_user?.toMap(skipNulls: skipNulls),
      'can_be_unmuted_for_current_user':
          can_be_unmuted_for_current_user?.toMap(skipNulls: skipNulls),
      'is_muted_for_all_users':
          is_muted_for_all_users?.toMap(skipNulls: skipNulls),
      'is_muted_for_current_user':
          is_muted_for_current_user?.toMap(skipNulls: skipNulls),
      'can_unmute_self': can_unmute_self?.toMap(skipNulls: skipNulls),
      'volume_level': volume_level?.toMap(skipNulls: skipNulls),
      'order': order?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemEcho extends CallProblem {
  String get tlType => 'callProblemEcho';

  string? extra;
  int? client_id;

  CallProblemEcho({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemEcho.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemNoise extends CallProblem {
  String get tlType => 'callProblemNoise';

  string? extra;
  int? client_id;

  CallProblemNoise({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemNoise.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemInterruptions extends CallProblem {
  String get tlType => 'callProblemInterruptions';

  string? extra;
  int? client_id;

  CallProblemInterruptions({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemInterruptions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemDistortedSpeech extends CallProblem {
  String get tlType => 'callProblemDistortedSpeech';

  string? extra;
  int? client_id;

  CallProblemDistortedSpeech({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemDistortedSpeech.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemSilentLocal extends CallProblem {
  String get tlType => 'callProblemSilentLocal';

  string? extra;
  int? client_id;

  CallProblemSilentLocal({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemSilentLocal.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemSilentRemote extends CallProblem {
  String get tlType => 'callProblemSilentRemote';

  string? extra;
  int? client_id;

  CallProblemSilentRemote({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemSilentRemote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemDropped extends CallProblem {
  String get tlType => 'callProblemDropped';

  string? extra;
  int? client_id;

  CallProblemDropped({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemDropped.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemDistortedVideo extends CallProblem {
  String get tlType => 'callProblemDistortedVideo';

  string? extra;
  int? client_id;

  CallProblemDistortedVideo({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemDistortedVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallProblemPixelatedVideo extends CallProblem {
  String get tlType => 'callProblemPixelatedVideo';

  string? extra;
  int? client_id;

  CallProblemPixelatedVideo({
    string? this.extra,
    int? this.client_id,
  });

  CallProblemPixelatedVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Call extends TdObject {
  String get tlType => 'call';

  string? extra;
  int? client_id;
  int32? id;
  int53? user_id;
  Bool? is_outgoing;
  Bool? is_video;
  CallState? state;

  Call({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    int53? this.user_id,
    Bool? this.is_outgoing,
    Bool? this.is_video,
    CallState? this.state,
  });

  Call.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    is_outgoing = map.containsKey('is_outgoing') ? map['is_outgoing'] : null;
    is_video = map.containsKey('is_video') ? map['is_video'] : null;
    state = map.containsKey('state')
        ? TlMap.fromMap(map['state']) as CallState
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'is_outgoing': is_outgoing?.toMap(skipNulls: skipNulls),
      'is_video': is_video?.toMap(skipNulls: skipNulls),
      'state': state?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PhoneNumberAuthenticationSettings extends TdObject {
  String get tlType => 'phoneNumberAuthenticationSettings';

  string? extra;
  int? client_id;
  Bool? allow_flash_call;
  Bool? allow_missed_call;
  Bool? is_current_phone_number;
  Bool? allow_sms_retriever_api;
  vector<string>? authentication_tokens;

  PhoneNumberAuthenticationSettings({
    string? this.extra,
    int? this.client_id,
    Bool? this.allow_flash_call,
    Bool? this.allow_missed_call,
    Bool? this.is_current_phone_number,
    Bool? this.allow_sms_retriever_api,
    vector<string>? this.authentication_tokens,
  });

  PhoneNumberAuthenticationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    allow_flash_call =
        map.containsKey('allow_flash_call') ? map['allow_flash_call'] : null;
    allow_missed_call =
        map.containsKey('allow_missed_call') ? map['allow_missed_call'] : null;
    is_current_phone_number = map.containsKey('is_current_phone_number')
        ? map['is_current_phone_number']
        : null;
    allow_sms_retriever_api = map.containsKey('allow_sms_retriever_api')
        ? map['allow_sms_retriever_api']
        : null;
    if (map.containsKey('authentication_tokens') &&
        map['authentication_tokens'] != null) {
      authentication_tokens = [];
      var someValues = map['authentication_tokens'];
      for (var someValue in someValues) {
        authentication_tokens?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'allow_flash_call': allow_flash_call?.toMap(skipNulls: skipNulls),
      'allow_missed_call': allow_missed_call?.toMap(skipNulls: skipNulls),
      'is_current_phone_number':
          is_current_phone_number?.toMap(skipNulls: skipNulls),
      'allow_sms_retriever_api':
          allow_sms_retriever_api?.toMap(skipNulls: skipNulls),
      'authentication_tokens':
          authentication_tokens?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Animations extends TdObject {
  String get tlType => 'animations';

  string? extra;
  int? client_id;
  vector<Animation>? animations;

  Animations({
    string? this.extra,
    int? this.client_id,
    vector<Animation>? this.animations,
  });

  Animations.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('animations') && map['animations'] != null) {
      animations = [];
      var someValues = map['animations'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Animation;
        animations?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animations': animations?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DiceStickersRegular extends DiceStickers {
  String get tlType => 'diceStickersRegular';

  string? extra;
  int? client_id;
  Sticker? sticker;

  DiceStickersRegular({
    string? this.extra,
    int? this.client_id,
    Sticker? this.sticker,
  });

  DiceStickersRegular.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as Sticker
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DiceStickersSlotMachine extends DiceStickers {
  String get tlType => 'diceStickersSlotMachine';

  string? extra;
  int? client_id;
  Sticker? background;
  Sticker? lever;
  Sticker? left_reel;
  Sticker? center_reel;
  Sticker? right_reel;

  DiceStickersSlotMachine({
    string? this.extra,
    int? this.client_id,
    Sticker? this.background,
    Sticker? this.lever,
    Sticker? this.left_reel,
    Sticker? this.center_reel,
    Sticker? this.right_reel,
  });

  DiceStickersSlotMachine.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    background = map.containsKey('background')
        ? TlMap.fromMap(map['background']) as Sticker
        : null;
    lever = map.containsKey('lever')
        ? TlMap.fromMap(map['lever']) as Sticker
        : null;
    left_reel = map.containsKey('left_reel')
        ? TlMap.fromMap(map['left_reel']) as Sticker
        : null;
    center_reel = map.containsKey('center_reel')
        ? TlMap.fromMap(map['center_reel']) as Sticker
        : null;
    right_reel = map.containsKey('right_reel')
        ? TlMap.fromMap(map['right_reel']) as Sticker
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'background': background?.toMap(skipNulls: skipNulls),
      'lever': lever?.toMap(skipNulls: skipNulls),
      'left_reel': left_reel?.toMap(skipNulls: skipNulls),
      'center_reel': center_reel?.toMap(skipNulls: skipNulls),
      'right_reel': right_reel?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ImportedContacts extends TdObject {
  String get tlType => 'importedContacts';

  string? extra;
  int? client_id;
  vector<int53>? user_ids;
  vector<int32>? importer_count;

  ImportedContacts({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.user_ids,
    vector<int32>? this.importer_count,
  });

  ImportedContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
    if (map.containsKey('importer_count') && map['importer_count'] != null) {
      importer_count = [];
      var someValues = map['importer_count'];
      for (var someValue in someValues) {
        importer_count?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
      'importer_count': importer_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class HttpUrl extends TdObject {
  String get tlType => 'httpUrl';

  string? extra;
  int? client_id;
  string? url;

  HttpUrl({
    string? this.extra,
    int? this.client_id,
    string? this.url,
  });

  HttpUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultAnimation extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultAnimation';

  string? extra;
  int? client_id;
  string? id;
  string? title;
  string? thumbnail_url;
  string? thumbnail_mime_type;
  string? video_url;
  string? video_mime_type;
  int32? video_duration;
  int32? video_width;
  int32? video_height;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultAnimation({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.title,
    string? this.thumbnail_url,
    string? this.thumbnail_mime_type,
    string? this.video_url,
    string? this.video_mime_type,
    int32? this.video_duration,
    int32? this.video_width,
    int32? this.video_height,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    thumbnail_mime_type = map.containsKey('thumbnail_mime_type')
        ? map['thumbnail_mime_type']
        : null;
    video_url = map.containsKey('video_url') ? map['video_url'] : null;
    video_mime_type =
        map.containsKey('video_mime_type') ? map['video_mime_type'] : null;
    video_duration =
        map.containsKey('video_duration') ? map['video_duration'] : null;
    video_width = map.containsKey('video_width') ? map['video_width'] : null;
    video_height = map.containsKey('video_height') ? map['video_height'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'thumbnail_mime_type': thumbnail_mime_type?.toMap(skipNulls: skipNulls),
      'video_url': video_url?.toMap(skipNulls: skipNulls),
      'video_mime_type': video_mime_type?.toMap(skipNulls: skipNulls),
      'video_duration': video_duration?.toMap(skipNulls: skipNulls),
      'video_width': video_width?.toMap(skipNulls: skipNulls),
      'video_height': video_height?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultArticle extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultArticle';

  string? extra;
  int? client_id;
  string? id;
  string? url;
  Bool? hide_url;
  string? title;
  string? description;
  string? thumbnail_url;
  int32? thumbnail_width;
  int32? thumbnail_height;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultArticle({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.url,
    Bool? this.hide_url,
    string? this.title,
    string? this.description,
    string? this.thumbnail_url,
    int32? this.thumbnail_width,
    int32? this.thumbnail_height,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultArticle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    hide_url = map.containsKey('hide_url') ? map['hide_url'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    thumbnail_width =
        map.containsKey('thumbnail_width') ? map['thumbnail_width'] : null;
    thumbnail_height =
        map.containsKey('thumbnail_height') ? map['thumbnail_height'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'hide_url': hide_url?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'thumbnail_width': thumbnail_width?.toMap(skipNulls: skipNulls),
      'thumbnail_height': thumbnail_height?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultAudio extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultAudio';

  string? extra;
  int? client_id;
  string? id;
  string? title;
  string? performer;
  string? audio_url;
  int32? audio_duration;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultAudio({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.title,
    string? this.performer,
    string? this.audio_url,
    int32? this.audio_duration,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultAudio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    performer = map.containsKey('performer') ? map['performer'] : null;
    audio_url = map.containsKey('audio_url') ? map['audio_url'] : null;
    audio_duration =
        map.containsKey('audio_duration') ? map['audio_duration'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'performer': performer?.toMap(skipNulls: skipNulls),
      'audio_url': audio_url?.toMap(skipNulls: skipNulls),
      'audio_duration': audio_duration?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultContact extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultContact';

  string? extra;
  int? client_id;
  string? id;
  Contact? contact;
  string? thumbnail_url;
  int32? thumbnail_width;
  int32? thumbnail_height;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultContact({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Contact? this.contact,
    string? this.thumbnail_url,
    int32? this.thumbnail_width,
    int32? this.thumbnail_height,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultContact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    contact = map.containsKey('contact')
        ? TlMap.fromMap(map['contact']) as Contact
        : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    thumbnail_width =
        map.containsKey('thumbnail_width') ? map['thumbnail_width'] : null;
    thumbnail_height =
        map.containsKey('thumbnail_height') ? map['thumbnail_height'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'contact': contact?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'thumbnail_width': thumbnail_width?.toMap(skipNulls: skipNulls),
      'thumbnail_height': thumbnail_height?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultDocument extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultDocument';

  string? extra;
  int? client_id;
  string? id;
  string? title;
  string? description;
  string? document_url;
  string? mime_type;
  string? thumbnail_url;
  int32? thumbnail_width;
  int32? thumbnail_height;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultDocument({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.title,
    string? this.description,
    string? this.document_url,
    string? this.mime_type,
    string? this.thumbnail_url,
    int32? this.thumbnail_width,
    int32? this.thumbnail_height,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    document_url = map.containsKey('document_url') ? map['document_url'] : null;
    mime_type = map.containsKey('mime_type') ? map['mime_type'] : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    thumbnail_width =
        map.containsKey('thumbnail_width') ? map['thumbnail_width'] : null;
    thumbnail_height =
        map.containsKey('thumbnail_height') ? map['thumbnail_height'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'document_url': document_url?.toMap(skipNulls: skipNulls),
      'mime_type': mime_type?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'thumbnail_width': thumbnail_width?.toMap(skipNulls: skipNulls),
      'thumbnail_height': thumbnail_height?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultGame extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultGame';

  string? extra;
  int? client_id;
  string? id;
  string? game_short_name;
  ReplyMarkup? reply_markup;

  InputInlineQueryResultGame({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.game_short_name,
    ReplyMarkup? this.reply_markup,
  });

  InputInlineQueryResultGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    game_short_name =
        map.containsKey('game_short_name') ? map['game_short_name'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'game_short_name': game_short_name?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultLocation extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultLocation';

  string? extra;
  int? client_id;
  string? id;
  Location? location;
  int32? live_period;
  string? title;
  string? thumbnail_url;
  int32? thumbnail_width;
  int32? thumbnail_height;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultLocation({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Location? this.location,
    int32? this.live_period,
    string? this.title,
    string? this.thumbnail_url,
    int32? this.thumbnail_width,
    int32? this.thumbnail_height,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    live_period = map.containsKey('live_period') ? map['live_period'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    thumbnail_width =
        map.containsKey('thumbnail_width') ? map['thumbnail_width'] : null;
    thumbnail_height =
        map.containsKey('thumbnail_height') ? map['thumbnail_height'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'live_period': live_period?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'thumbnail_width': thumbnail_width?.toMap(skipNulls: skipNulls),
      'thumbnail_height': thumbnail_height?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultPhoto extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultPhoto';

  string? extra;
  int? client_id;
  string? id;
  string? title;
  string? description;
  string? thumbnail_url;
  string? photo_url;
  int32? photo_width;
  int32? photo_height;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultPhoto({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.title,
    string? this.description,
    string? this.thumbnail_url,
    string? this.photo_url,
    int32? this.photo_width,
    int32? this.photo_height,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    photo_url = map.containsKey('photo_url') ? map['photo_url'] : null;
    photo_width = map.containsKey('photo_width') ? map['photo_width'] : null;
    photo_height = map.containsKey('photo_height') ? map['photo_height'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'photo_url': photo_url?.toMap(skipNulls: skipNulls),
      'photo_width': photo_width?.toMap(skipNulls: skipNulls),
      'photo_height': photo_height?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultSticker extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultSticker';

  string? extra;
  int? client_id;
  string? id;
  string? thumbnail_url;
  string? sticker_url;
  int32? sticker_width;
  int32? sticker_height;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultSticker({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.thumbnail_url,
    string? this.sticker_url,
    int32? this.sticker_width,
    int32? this.sticker_height,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    sticker_url = map.containsKey('sticker_url') ? map['sticker_url'] : null;
    sticker_width =
        map.containsKey('sticker_width') ? map['sticker_width'] : null;
    sticker_height =
        map.containsKey('sticker_height') ? map['sticker_height'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'sticker_url': sticker_url?.toMap(skipNulls: skipNulls),
      'sticker_width': sticker_width?.toMap(skipNulls: skipNulls),
      'sticker_height': sticker_height?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultVenue extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultVenue';

  string? extra;
  int? client_id;
  string? id;
  Venue? venue;
  string? thumbnail_url;
  int32? thumbnail_width;
  int32? thumbnail_height;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultVenue({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Venue? this.venue,
    string? this.thumbnail_url,
    int32? this.thumbnail_width,
    int32? this.thumbnail_height,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultVenue.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    venue =
        map.containsKey('venue') ? TlMap.fromMap(map['venue']) as Venue : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    thumbnail_width =
        map.containsKey('thumbnail_width') ? map['thumbnail_width'] : null;
    thumbnail_height =
        map.containsKey('thumbnail_height') ? map['thumbnail_height'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'venue': venue?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'thumbnail_width': thumbnail_width?.toMap(skipNulls: skipNulls),
      'thumbnail_height': thumbnail_height?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultVideo extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultVideo';

  string? extra;
  int? client_id;
  string? id;
  string? title;
  string? description;
  string? thumbnail_url;
  string? video_url;
  string? mime_type;
  int32? video_width;
  int32? video_height;
  int32? video_duration;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultVideo({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.title,
    string? this.description,
    string? this.thumbnail_url,
    string? this.video_url,
    string? this.mime_type,
    int32? this.video_width,
    int32? this.video_height,
    int32? this.video_duration,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    thumbnail_url =
        map.containsKey('thumbnail_url') ? map['thumbnail_url'] : null;
    video_url = map.containsKey('video_url') ? map['video_url'] : null;
    mime_type = map.containsKey('mime_type') ? map['mime_type'] : null;
    video_width = map.containsKey('video_width') ? map['video_width'] : null;
    video_height = map.containsKey('video_height') ? map['video_height'] : null;
    video_duration =
        map.containsKey('video_duration') ? map['video_duration'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'thumbnail_url': thumbnail_url?.toMap(skipNulls: skipNulls),
      'video_url': video_url?.toMap(skipNulls: skipNulls),
      'mime_type': mime_type?.toMap(skipNulls: skipNulls),
      'video_width': video_width?.toMap(skipNulls: skipNulls),
      'video_height': video_height?.toMap(skipNulls: skipNulls),
      'video_duration': video_duration?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputInlineQueryResultVoiceNote extends InputInlineQueryResult {
  String get tlType => 'inputInlineQueryResultVoiceNote';

  string? extra;
  int? client_id;
  string? id;
  string? title;
  string? voice_note_url;
  int32? voice_note_duration;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  InputInlineQueryResultVoiceNote({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.title,
    string? this.voice_note_url,
    int32? this.voice_note_duration,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  InputInlineQueryResultVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    voice_note_url =
        map.containsKey('voice_note_url') ? map['voice_note_url'] : null;
    voice_note_duration = map.containsKey('voice_note_duration')
        ? map['voice_note_duration']
        : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'voice_note_url': voice_note_url?.toMap(skipNulls: skipNulls),
      'voice_note_duration': voice_note_duration?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultArticle extends InlineQueryResult {
  String get tlType => 'inlineQueryResultArticle';

  string? extra;
  int? client_id;
  string? id;
  string? url;
  Bool? hide_url;
  string? title;
  string? description;
  Thumbnail? thumbnail;

  InlineQueryResultArticle({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.url,
    Bool? this.hide_url,
    string? this.title,
    string? this.description,
    Thumbnail? this.thumbnail,
  });

  InlineQueryResultArticle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    hide_url = map.containsKey('hide_url') ? map['hide_url'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'hide_url': hide_url?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultContact extends InlineQueryResult {
  String get tlType => 'inlineQueryResultContact';

  string? extra;
  int? client_id;
  string? id;
  Contact? contact;
  Thumbnail? thumbnail;

  InlineQueryResultContact({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Contact? this.contact,
    Thumbnail? this.thumbnail,
  });

  InlineQueryResultContact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    contact = map.containsKey('contact')
        ? TlMap.fromMap(map['contact']) as Contact
        : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'contact': contact?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultLocation extends InlineQueryResult {
  String get tlType => 'inlineQueryResultLocation';

  string? extra;
  int? client_id;
  string? id;
  Location? location;
  string? title;
  Thumbnail? thumbnail;

  InlineQueryResultLocation({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Location? this.location,
    string? this.title,
    Thumbnail? this.thumbnail,
  });

  InlineQueryResultLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    title = map.containsKey('title') ? map['title'] : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultVenue extends InlineQueryResult {
  String get tlType => 'inlineQueryResultVenue';

  string? extra;
  int? client_id;
  string? id;
  Venue? venue;
  Thumbnail? thumbnail;

  InlineQueryResultVenue({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Venue? this.venue,
    Thumbnail? this.thumbnail,
  });

  InlineQueryResultVenue.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    venue =
        map.containsKey('venue') ? TlMap.fromMap(map['venue']) as Venue : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as Thumbnail
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'venue': venue?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultGame extends InlineQueryResult {
  String get tlType => 'inlineQueryResultGame';

  string? extra;
  int? client_id;
  string? id;
  Game? game;

  InlineQueryResultGame({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Game? this.game,
  });

  InlineQueryResultGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    game = map.containsKey('game') ? TlMap.fromMap(map['game']) as Game : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'game': game?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultAnimation extends InlineQueryResult {
  String get tlType => 'inlineQueryResultAnimation';

  string? extra;
  int? client_id;
  string? id;
  Animation? animation;
  string? title;

  InlineQueryResultAnimation({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Animation? this.animation,
    string? this.title,
  });

  InlineQueryResultAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as Animation
        : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultAudio extends InlineQueryResult {
  String get tlType => 'inlineQueryResultAudio';

  string? extra;
  int? client_id;
  string? id;
  Audio? audio;

  InlineQueryResultAudio({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Audio? this.audio,
  });

  InlineQueryResultAudio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    audio =
        map.containsKey('audio') ? TlMap.fromMap(map['audio']) as Audio : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'audio': audio?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultDocument extends InlineQueryResult {
  String get tlType => 'inlineQueryResultDocument';

  string? extra;
  int? client_id;
  string? id;
  Document? document;
  string? title;
  string? description;

  InlineQueryResultDocument({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Document? this.document,
    string? this.title,
    string? this.description,
  });

  InlineQueryResultDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    document = map.containsKey('document')
        ? TlMap.fromMap(map['document']) as Document
        : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'document': document?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultPhoto extends InlineQueryResult {
  String get tlType => 'inlineQueryResultPhoto';

  string? extra;
  int? client_id;
  string? id;
  Photo? photo;
  string? title;
  string? description;

  InlineQueryResultPhoto({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Photo? this.photo,
    string? this.title,
    string? this.description,
  });

  InlineQueryResultPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultSticker extends InlineQueryResult {
  String get tlType => 'inlineQueryResultSticker';

  string? extra;
  int? client_id;
  string? id;
  Sticker? sticker;

  InlineQueryResultSticker({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Sticker? this.sticker,
  });

  InlineQueryResultSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as Sticker
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultVideo extends InlineQueryResult {
  String get tlType => 'inlineQueryResultVideo';

  string? extra;
  int? client_id;
  string? id;
  Video? video;
  string? title;
  string? description;

  InlineQueryResultVideo({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    Video? this.video,
    string? this.title,
    string? this.description,
  });

  InlineQueryResultVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    video =
        map.containsKey('video') ? TlMap.fromMap(map['video']) as Video : null;
    title = map.containsKey('title') ? map['title'] : null;
    description = map.containsKey('description') ? map['description'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'video': video?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResultVoiceNote extends InlineQueryResult {
  String get tlType => 'inlineQueryResultVoiceNote';

  string? extra;
  int? client_id;
  string? id;
  VoiceNote? voice_note;
  string? title;

  InlineQueryResultVoiceNote({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    VoiceNote? this.voice_note,
    string? this.title,
  });

  InlineQueryResultVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    voice_note = map.containsKey('voice_note')
        ? TlMap.fromMap(map['voice_note']) as VoiceNote
        : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'voice_note': voice_note?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InlineQueryResults extends TdObject {
  String get tlType => 'inlineQueryResults';

  string? extra;
  int? client_id;
  int64? inline_query_id;
  string? next_offset;
  vector<InlineQueryResult>? results;
  string? switch_pm_text;
  string? switch_pm_parameter;

  InlineQueryResults({
    string? this.extra,
    int? this.client_id,
    int64? this.inline_query_id,
    string? this.next_offset,
    vector<InlineQueryResult>? this.results,
    string? this.switch_pm_text,
    string? this.switch_pm_parameter,
  });

  InlineQueryResults.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_query_id =
        map.containsKey('inline_query_id') ? map['inline_query_id'] : null;
    next_offset = map.containsKey('next_offset') ? map['next_offset'] : null;
    if (map.containsKey('results') && map['results'] != null) {
      results = [];
      var someValues = map['results'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InlineQueryResult;
        results?.add(obj);
      }
    }
    switch_pm_text =
        map.containsKey('switch_pm_text') ? map['switch_pm_text'] : null;
    switch_pm_parameter = map.containsKey('switch_pm_parameter')
        ? map['switch_pm_parameter']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_query_id': inline_query_id?.toMap(skipNulls: skipNulls),
      'next_offset': next_offset?.toMap(skipNulls: skipNulls),
      'results': results?.toMap(skipNulls: skipNulls),
      'switch_pm_text': switch_pm_text?.toMap(skipNulls: skipNulls),
      'switch_pm_parameter': switch_pm_parameter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallbackQueryPayloadData extends CallbackQueryPayload {
  String get tlType => 'callbackQueryPayloadData';

  string? extra;
  int? client_id;
  bytes? data;

  CallbackQueryPayloadData({
    string? this.extra,
    int? this.client_id,
    bytes? this.data,
  });

  CallbackQueryPayloadData.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallbackQueryPayloadDataWithPassword extends CallbackQueryPayload {
  String get tlType => 'callbackQueryPayloadDataWithPassword';

  string? extra;
  int? client_id;
  string? password;
  bytes? data;

  CallbackQueryPayloadDataWithPassword({
    string? this.extra,
    int? this.client_id,
    string? this.password,
    bytes? this.data,
  });

  CallbackQueryPayloadDataWithPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    password = map.containsKey('password') ? map['password'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallbackQueryPayloadGame extends CallbackQueryPayload {
  String get tlType => 'callbackQueryPayloadGame';

  string? extra;
  int? client_id;
  string? game_short_name;

  CallbackQueryPayloadGame({
    string? this.extra,
    int? this.client_id,
    string? this.game_short_name,
  });

  CallbackQueryPayloadGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    game_short_name =
        map.containsKey('game_short_name') ? map['game_short_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'game_short_name': game_short_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CallbackQueryAnswer extends TdObject {
  String get tlType => 'callbackQueryAnswer';

  string? extra;
  int? client_id;
  string? text;
  Bool? show_alert;
  string? url;

  CallbackQueryAnswer({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    Bool? this.show_alert,
    string? this.url,
  });

  CallbackQueryAnswer.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    show_alert = map.containsKey('show_alert') ? map['show_alert'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'show_alert': show_alert?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CustomRequestResult extends TdObject {
  String get tlType => 'customRequestResult';

  string? extra;
  int? client_id;
  string? result;

  CustomRequestResult({
    string? this.extra,
    int? this.client_id,
    string? this.result,
  });

  CustomRequestResult.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    result = map.containsKey('result') ? map['result'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'result': result?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GameHighScore extends TdObject {
  String get tlType => 'gameHighScore';

  string? extra;
  int? client_id;
  int32? position;
  int53? user_id;
  int32? score;

  GameHighScore({
    string? this.extra,
    int? this.client_id,
    int32? this.position,
    int53? this.user_id,
    int32? this.score,
  });

  GameHighScore.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    position = map.containsKey('position') ? map['position'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    score = map.containsKey('score') ? map['score'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'position': position?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'score': score?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GameHighScores extends TdObject {
  String get tlType => 'gameHighScores';

  string? extra;
  int? client_id;
  vector<GameHighScore>? scores;

  GameHighScores({
    string? this.extra,
    int? this.client_id,
    vector<GameHighScore>? this.scores,
  });

  GameHighScores.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('scores') && map['scores'] != null) {
      scores = [];
      var someValues = map['scores'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as GameHighScore;
        scores?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'scores': scores?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMessageEdited extends ChatEventAction {
  String get tlType => 'chatEventMessageEdited';

  string? extra;
  int? client_id;
  Message? old_message;
  Message? new_message;

  ChatEventMessageEdited({
    string? this.extra,
    int? this.client_id,
    Message? this.old_message,
    Message? this.new_message,
  });

  ChatEventMessageEdited.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_message = map.containsKey('old_message')
        ? TlMap.fromMap(map['old_message']) as Message
        : null;
    new_message = map.containsKey('new_message')
        ? TlMap.fromMap(map['new_message']) as Message
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_message': old_message?.toMap(skipNulls: skipNulls),
      'new_message': new_message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMessageDeleted extends ChatEventAction {
  String get tlType => 'chatEventMessageDeleted';

  string? extra;
  int? client_id;
  Message? message;

  ChatEventMessageDeleted({
    string? this.extra,
    int? this.client_id,
    Message? this.message,
  });

  ChatEventMessageDeleted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventPollStopped extends ChatEventAction {
  String get tlType => 'chatEventPollStopped';

  string? extra;
  int? client_id;
  Message? message;

  ChatEventPollStopped({
    string? this.extra,
    int? this.client_id,
    Message? this.message,
  });

  ChatEventPollStopped.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMessagePinned extends ChatEventAction {
  String get tlType => 'chatEventMessagePinned';

  string? extra;
  int? client_id;
  Message? message;

  ChatEventMessagePinned({
    string? this.extra,
    int? this.client_id,
    Message? this.message,
  });

  ChatEventMessagePinned.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMessageUnpinned extends ChatEventAction {
  String get tlType => 'chatEventMessageUnpinned';

  string? extra;
  int? client_id;
  Message? message;

  ChatEventMessageUnpinned({
    string? this.extra,
    int? this.client_id,
    Message? this.message,
  });

  ChatEventMessageUnpinned.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMemberJoined extends ChatEventAction {
  String get tlType => 'chatEventMemberJoined';

  string? extra;
  int? client_id;

  ChatEventMemberJoined({
    string? this.extra,
    int? this.client_id,
  });

  ChatEventMemberJoined.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMemberJoinedByInviteLink extends ChatEventAction {
  String get tlType => 'chatEventMemberJoinedByInviteLink';

  string? extra;
  int? client_id;
  ChatInviteLink? invite_link;

  ChatEventMemberJoinedByInviteLink({
    string? this.extra,
    int? this.client_id,
    ChatInviteLink? this.invite_link,
  });

  ChatEventMemberJoinedByInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invite_link = map.containsKey('invite_link')
        ? TlMap.fromMap(map['invite_link']) as ChatInviteLink
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMemberJoinedByRequest extends ChatEventAction {
  String get tlType => 'chatEventMemberJoinedByRequest';

  string? extra;
  int? client_id;
  int53? approver_user_id;
  ChatInviteLink? invite_link;

  ChatEventMemberJoinedByRequest({
    string? this.extra,
    int? this.client_id,
    int53? this.approver_user_id,
    ChatInviteLink? this.invite_link,
  });

  ChatEventMemberJoinedByRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    approver_user_id =
        map.containsKey('approver_user_id') ? map['approver_user_id'] : null;
    invite_link = map.containsKey('invite_link')
        ? TlMap.fromMap(map['invite_link']) as ChatInviteLink
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'approver_user_id': approver_user_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMemberLeft extends ChatEventAction {
  String get tlType => 'chatEventMemberLeft';

  string? extra;
  int? client_id;

  ChatEventMemberLeft({
    string? this.extra,
    int? this.client_id,
  });

  ChatEventMemberLeft.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMemberInvited extends ChatEventAction {
  String get tlType => 'chatEventMemberInvited';

  string? extra;
  int? client_id;
  int53? user_id;
  ChatMemberStatus? status;

  ChatEventMemberInvited({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    ChatMemberStatus? this.status,
  });

  ChatEventMemberInvited.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    status = map.containsKey('status')
        ? TlMap.fromMap(map['status']) as ChatMemberStatus
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'status': status?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMemberPromoted extends ChatEventAction {
  String get tlType => 'chatEventMemberPromoted';

  string? extra;
  int? client_id;
  int53? user_id;
  ChatMemberStatus? old_status;
  ChatMemberStatus? new_status;

  ChatEventMemberPromoted({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    ChatMemberStatus? this.old_status,
    ChatMemberStatus? this.new_status,
  });

  ChatEventMemberPromoted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    old_status = map.containsKey('old_status')
        ? TlMap.fromMap(map['old_status']) as ChatMemberStatus
        : null;
    new_status = map.containsKey('new_status')
        ? TlMap.fromMap(map['new_status']) as ChatMemberStatus
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'old_status': old_status?.toMap(skipNulls: skipNulls),
      'new_status': new_status?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMemberRestricted extends ChatEventAction {
  String get tlType => 'chatEventMemberRestricted';

  string? extra;
  int? client_id;
  MessageSender? member_id;
  ChatMemberStatus? old_status;
  ChatMemberStatus? new_status;

  ChatEventMemberRestricted({
    string? this.extra,
    int? this.client_id,
    MessageSender? this.member_id,
    ChatMemberStatus? this.old_status,
    ChatMemberStatus? this.new_status,
  });

  ChatEventMemberRestricted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    member_id = map.containsKey('member_id')
        ? TlMap.fromMap(map['member_id']) as MessageSender
        : null;
    old_status = map.containsKey('old_status')
        ? TlMap.fromMap(map['old_status']) as ChatMemberStatus
        : null;
    new_status = map.containsKey('new_status')
        ? TlMap.fromMap(map['new_status']) as ChatMemberStatus
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'member_id': member_id?.toMap(skipNulls: skipNulls),
      'old_status': old_status?.toMap(skipNulls: skipNulls),
      'new_status': new_status?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventTitleChanged extends ChatEventAction {
  String get tlType => 'chatEventTitleChanged';

  string? extra;
  int? client_id;
  string? old_title;
  string? new_title;

  ChatEventTitleChanged({
    string? this.extra,
    int? this.client_id,
    string? this.old_title,
    string? this.new_title,
  });

  ChatEventTitleChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_title = map.containsKey('old_title') ? map['old_title'] : null;
    new_title = map.containsKey('new_title') ? map['new_title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_title': old_title?.toMap(skipNulls: skipNulls),
      'new_title': new_title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventPermissionsChanged extends ChatEventAction {
  String get tlType => 'chatEventPermissionsChanged';

  string? extra;
  int? client_id;
  ChatPermissions? old_permissions;
  ChatPermissions? new_permissions;

  ChatEventPermissionsChanged({
    string? this.extra,
    int? this.client_id,
    ChatPermissions? this.old_permissions,
    ChatPermissions? this.new_permissions,
  });

  ChatEventPermissionsChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_permissions = map.containsKey('old_permissions')
        ? TlMap.fromMap(map['old_permissions']) as ChatPermissions
        : null;
    new_permissions = map.containsKey('new_permissions')
        ? TlMap.fromMap(map['new_permissions']) as ChatPermissions
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_permissions': old_permissions?.toMap(skipNulls: skipNulls),
      'new_permissions': new_permissions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventDescriptionChanged extends ChatEventAction {
  String get tlType => 'chatEventDescriptionChanged';

  string? extra;
  int? client_id;
  string? old_description;
  string? new_description;

  ChatEventDescriptionChanged({
    string? this.extra,
    int? this.client_id,
    string? this.old_description,
    string? this.new_description,
  });

  ChatEventDescriptionChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_description =
        map.containsKey('old_description') ? map['old_description'] : null;
    new_description =
        map.containsKey('new_description') ? map['new_description'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_description': old_description?.toMap(skipNulls: skipNulls),
      'new_description': new_description?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventUsernameChanged extends ChatEventAction {
  String get tlType => 'chatEventUsernameChanged';

  string? extra;
  int? client_id;
  string? old_username;
  string? new_username;

  ChatEventUsernameChanged({
    string? this.extra,
    int? this.client_id,
    string? this.old_username,
    string? this.new_username,
  });

  ChatEventUsernameChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_username = map.containsKey('old_username') ? map['old_username'] : null;
    new_username = map.containsKey('new_username') ? map['new_username'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_username': old_username?.toMap(skipNulls: skipNulls),
      'new_username': new_username?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventPhotoChanged extends ChatEventAction {
  String get tlType => 'chatEventPhotoChanged';

  string? extra;
  int? client_id;
  ChatPhoto? old_photo;
  ChatPhoto? new_photo;

  ChatEventPhotoChanged({
    string? this.extra,
    int? this.client_id,
    ChatPhoto? this.old_photo,
    ChatPhoto? this.new_photo,
  });

  ChatEventPhotoChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_photo = map.containsKey('old_photo')
        ? TlMap.fromMap(map['old_photo']) as ChatPhoto
        : null;
    new_photo = map.containsKey('new_photo')
        ? TlMap.fromMap(map['new_photo']) as ChatPhoto
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_photo': old_photo?.toMap(skipNulls: skipNulls),
      'new_photo': new_photo?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventInvitesToggled extends ChatEventAction {
  String get tlType => 'chatEventInvitesToggled';

  string? extra;
  int? client_id;
  Bool? can_invite_users;

  ChatEventInvitesToggled({
    string? this.extra,
    int? this.client_id,
    Bool? this.can_invite_users,
  });

  ChatEventInvitesToggled.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    can_invite_users =
        map.containsKey('can_invite_users') ? map['can_invite_users'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'can_invite_users': can_invite_users?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventLinkedChatChanged extends ChatEventAction {
  String get tlType => 'chatEventLinkedChatChanged';

  string? extra;
  int? client_id;
  int53? old_linked_chat_id;
  int53? new_linked_chat_id;

  ChatEventLinkedChatChanged({
    string? this.extra,
    int? this.client_id,
    int53? this.old_linked_chat_id,
    int53? this.new_linked_chat_id,
  });

  ChatEventLinkedChatChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_linked_chat_id = map.containsKey('old_linked_chat_id')
        ? map['old_linked_chat_id']
        : null;
    new_linked_chat_id = map.containsKey('new_linked_chat_id')
        ? map['new_linked_chat_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_linked_chat_id': old_linked_chat_id?.toMap(skipNulls: skipNulls),
      'new_linked_chat_id': new_linked_chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventSlowModeDelayChanged extends ChatEventAction {
  String get tlType => 'chatEventSlowModeDelayChanged';

  string? extra;
  int? client_id;
  int32? old_slow_mode_delay;
  int32? new_slow_mode_delay;

  ChatEventSlowModeDelayChanged({
    string? this.extra,
    int? this.client_id,
    int32? this.old_slow_mode_delay,
    int32? this.new_slow_mode_delay,
  });

  ChatEventSlowModeDelayChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_slow_mode_delay = map.containsKey('old_slow_mode_delay')
        ? map['old_slow_mode_delay']
        : null;
    new_slow_mode_delay = map.containsKey('new_slow_mode_delay')
        ? map['new_slow_mode_delay']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_slow_mode_delay': old_slow_mode_delay?.toMap(skipNulls: skipNulls),
      'new_slow_mode_delay': new_slow_mode_delay?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventMessageTtlChanged extends ChatEventAction {
  String get tlType => 'chatEventMessageTtlChanged';

  string? extra;
  int? client_id;
  int32? old_message_ttl;
  int32? new_message_ttl;

  ChatEventMessageTtlChanged({
    string? this.extra,
    int? this.client_id,
    int32? this.old_message_ttl,
    int32? this.new_message_ttl,
  });

  ChatEventMessageTtlChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_message_ttl =
        map.containsKey('old_message_ttl') ? map['old_message_ttl'] : null;
    new_message_ttl =
        map.containsKey('new_message_ttl') ? map['new_message_ttl'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_message_ttl': old_message_ttl?.toMap(skipNulls: skipNulls),
      'new_message_ttl': new_message_ttl?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventSignMessagesToggled extends ChatEventAction {
  String get tlType => 'chatEventSignMessagesToggled';

  string? extra;
  int? client_id;
  Bool? sign_messages;

  ChatEventSignMessagesToggled({
    string? this.extra,
    int? this.client_id,
    Bool? this.sign_messages,
  });

  ChatEventSignMessagesToggled.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sign_messages =
        map.containsKey('sign_messages') ? map['sign_messages'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sign_messages': sign_messages?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventHasProtectedContentToggled extends ChatEventAction {
  String get tlType => 'chatEventHasProtectedContentToggled';

  string? extra;
  int? client_id;
  Bool? has_protected_content;

  ChatEventHasProtectedContentToggled({
    string? this.extra,
    int? this.client_id,
    Bool? this.has_protected_content,
  });

  ChatEventHasProtectedContentToggled.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    has_protected_content = map.containsKey('has_protected_content')
        ? map['has_protected_content']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'has_protected_content':
          has_protected_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventStickerSetChanged extends ChatEventAction {
  String get tlType => 'chatEventStickerSetChanged';

  string? extra;
  int? client_id;
  int64? old_sticker_set_id;
  int64? new_sticker_set_id;

  ChatEventStickerSetChanged({
    string? this.extra,
    int? this.client_id,
    int64? this.old_sticker_set_id,
    int64? this.new_sticker_set_id,
  });

  ChatEventStickerSetChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_sticker_set_id = map.containsKey('old_sticker_set_id')
        ? map['old_sticker_set_id']
        : null;
    new_sticker_set_id = map.containsKey('new_sticker_set_id')
        ? map['new_sticker_set_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_sticker_set_id': old_sticker_set_id?.toMap(skipNulls: skipNulls),
      'new_sticker_set_id': new_sticker_set_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventLocationChanged extends ChatEventAction {
  String get tlType => 'chatEventLocationChanged';

  string? extra;
  int? client_id;
  ChatLocation? old_location;
  ChatLocation? new_location;

  ChatEventLocationChanged({
    string? this.extra,
    int? this.client_id,
    ChatLocation? this.old_location,
    ChatLocation? this.new_location,
  });

  ChatEventLocationChanged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_location = map.containsKey('old_location')
        ? TlMap.fromMap(map['old_location']) as ChatLocation
        : null;
    new_location = map.containsKey('new_location')
        ? TlMap.fromMap(map['new_location']) as ChatLocation
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_location': old_location?.toMap(skipNulls: skipNulls),
      'new_location': new_location?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventIsAllHistoryAvailableToggled extends ChatEventAction {
  String get tlType => 'chatEventIsAllHistoryAvailableToggled';

  string? extra;
  int? client_id;
  Bool? is_all_history_available;

  ChatEventIsAllHistoryAvailableToggled({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_all_history_available,
  });

  ChatEventIsAllHistoryAvailableToggled.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_all_history_available = map.containsKey('is_all_history_available')
        ? map['is_all_history_available']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_all_history_available':
          is_all_history_available?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventInviteLinkEdited extends ChatEventAction {
  String get tlType => 'chatEventInviteLinkEdited';

  string? extra;
  int? client_id;
  ChatInviteLink? old_invite_link;
  ChatInviteLink? new_invite_link;

  ChatEventInviteLinkEdited({
    string? this.extra,
    int? this.client_id,
    ChatInviteLink? this.old_invite_link,
    ChatInviteLink? this.new_invite_link,
  });

  ChatEventInviteLinkEdited.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_invite_link = map.containsKey('old_invite_link')
        ? TlMap.fromMap(map['old_invite_link']) as ChatInviteLink
        : null;
    new_invite_link = map.containsKey('new_invite_link')
        ? TlMap.fromMap(map['new_invite_link']) as ChatInviteLink
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_invite_link': old_invite_link?.toMap(skipNulls: skipNulls),
      'new_invite_link': new_invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventInviteLinkRevoked extends ChatEventAction {
  String get tlType => 'chatEventInviteLinkRevoked';

  string? extra;
  int? client_id;
  ChatInviteLink? invite_link;

  ChatEventInviteLinkRevoked({
    string? this.extra,
    int? this.client_id,
    ChatInviteLink? this.invite_link,
  });

  ChatEventInviteLinkRevoked.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invite_link = map.containsKey('invite_link')
        ? TlMap.fromMap(map['invite_link']) as ChatInviteLink
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventInviteLinkDeleted extends ChatEventAction {
  String get tlType => 'chatEventInviteLinkDeleted';

  string? extra;
  int? client_id;
  ChatInviteLink? invite_link;

  ChatEventInviteLinkDeleted({
    string? this.extra,
    int? this.client_id,
    ChatInviteLink? this.invite_link,
  });

  ChatEventInviteLinkDeleted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invite_link = map.containsKey('invite_link')
        ? TlMap.fromMap(map['invite_link']) as ChatInviteLink
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventVideoChatCreated extends ChatEventAction {
  String get tlType => 'chatEventVideoChatCreated';

  string? extra;
  int? client_id;
  int32? group_call_id;

  ChatEventVideoChatCreated({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  ChatEventVideoChatCreated.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventVideoChatEnded extends ChatEventAction {
  String get tlType => 'chatEventVideoChatEnded';

  string? extra;
  int? client_id;
  int32? group_call_id;

  ChatEventVideoChatEnded({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  ChatEventVideoChatEnded.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventVideoChatParticipantIsMutedToggled extends ChatEventAction {
  String get tlType => 'chatEventVideoChatParticipantIsMutedToggled';

  string? extra;
  int? client_id;
  MessageSender? participant_id;
  Bool? is_muted;

  ChatEventVideoChatParticipantIsMutedToggled({
    string? this.extra,
    int? this.client_id,
    MessageSender? this.participant_id,
    Bool? this.is_muted,
  });

  ChatEventVideoChatParticipantIsMutedToggled.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    participant_id = map.containsKey('participant_id')
        ? TlMap.fromMap(map['participant_id']) as MessageSender
        : null;
    is_muted = map.containsKey('is_muted') ? map['is_muted'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'participant_id': participant_id?.toMap(skipNulls: skipNulls),
      'is_muted': is_muted?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventVideoChatParticipantVolumeLevelChanged extends ChatEventAction {
  String get tlType => 'chatEventVideoChatParticipantVolumeLevelChanged';

  string? extra;
  int? client_id;
  MessageSender? participant_id;
  int32? volume_level;

  ChatEventVideoChatParticipantVolumeLevelChanged({
    string? this.extra,
    int? this.client_id,
    MessageSender? this.participant_id,
    int32? this.volume_level,
  });

  ChatEventVideoChatParticipantVolumeLevelChanged.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    participant_id = map.containsKey('participant_id')
        ? TlMap.fromMap(map['participant_id']) as MessageSender
        : null;
    volume_level = map.containsKey('volume_level') ? map['volume_level'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'participant_id': participant_id?.toMap(skipNulls: skipNulls),
      'volume_level': volume_level?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventVideoChatMuteNewParticipantsToggled extends ChatEventAction {
  String get tlType => 'chatEventVideoChatMuteNewParticipantsToggled';

  string? extra;
  int? client_id;
  Bool? mute_new_participants;

  ChatEventVideoChatMuteNewParticipantsToggled({
    string? this.extra,
    int? this.client_id,
    Bool? this.mute_new_participants,
  });

  ChatEventVideoChatMuteNewParticipantsToggled.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    mute_new_participants = map.containsKey('mute_new_participants')
        ? map['mute_new_participants']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'mute_new_participants':
          mute_new_participants?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEvent extends TdObject {
  String get tlType => 'chatEvent';

  string? extra;
  int? client_id;
  int64? id;
  int32? date;
  MessageSender? member_id;
  ChatEventAction? action;

  ChatEvent({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    int32? this.date,
    MessageSender? this.member_id,
    ChatEventAction? this.action,
  });

  ChatEvent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    date = map.containsKey('date') ? map['date'] : null;
    member_id = map.containsKey('member_id')
        ? TlMap.fromMap(map['member_id']) as MessageSender
        : null;
    action = map.containsKey('action')
        ? TlMap.fromMap(map['action']) as ChatEventAction
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'member_id': member_id?.toMap(skipNulls: skipNulls),
      'action': action?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEvents extends TdObject {
  String get tlType => 'chatEvents';

  string? extra;
  int? client_id;
  vector<ChatEvent>? events;

  ChatEvents({
    string? this.extra,
    int? this.client_id,
    vector<ChatEvent>? this.events,
  });

  ChatEvents.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('events') && map['events'] != null) {
      events = [];
      var someValues = map['events'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatEvent;
        events?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'events': events?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatEventLogFilters extends TdObject {
  String get tlType => 'chatEventLogFilters';

  string? extra;
  int? client_id;
  Bool? message_edits;
  Bool? message_deletions;
  Bool? message_pins;
  Bool? member_joins;
  Bool? member_leaves;
  Bool? member_invites;
  Bool? member_promotions;
  Bool? member_restrictions;
  Bool? info_changes;
  Bool? setting_changes;
  Bool? invite_link_changes;
  Bool? video_chat_changes;

  ChatEventLogFilters({
    string? this.extra,
    int? this.client_id,
    Bool? this.message_edits,
    Bool? this.message_deletions,
    Bool? this.message_pins,
    Bool? this.member_joins,
    Bool? this.member_leaves,
    Bool? this.member_invites,
    Bool? this.member_promotions,
    Bool? this.member_restrictions,
    Bool? this.info_changes,
    Bool? this.setting_changes,
    Bool? this.invite_link_changes,
    Bool? this.video_chat_changes,
  });

  ChatEventLogFilters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_edits =
        map.containsKey('message_edits') ? map['message_edits'] : null;
    message_deletions =
        map.containsKey('message_deletions') ? map['message_deletions'] : null;
    message_pins = map.containsKey('message_pins') ? map['message_pins'] : null;
    member_joins = map.containsKey('member_joins') ? map['member_joins'] : null;
    member_leaves =
        map.containsKey('member_leaves') ? map['member_leaves'] : null;
    member_invites =
        map.containsKey('member_invites') ? map['member_invites'] : null;
    member_promotions =
        map.containsKey('member_promotions') ? map['member_promotions'] : null;
    member_restrictions = map.containsKey('member_restrictions')
        ? map['member_restrictions']
        : null;
    info_changes = map.containsKey('info_changes') ? map['info_changes'] : null;
    setting_changes =
        map.containsKey('setting_changes') ? map['setting_changes'] : null;
    invite_link_changes = map.containsKey('invite_link_changes')
        ? map['invite_link_changes']
        : null;
    video_chat_changes = map.containsKey('video_chat_changes')
        ? map['video_chat_changes']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_edits': message_edits?.toMap(skipNulls: skipNulls),
      'message_deletions': message_deletions?.toMap(skipNulls: skipNulls),
      'message_pins': message_pins?.toMap(skipNulls: skipNulls),
      'member_joins': member_joins?.toMap(skipNulls: skipNulls),
      'member_leaves': member_leaves?.toMap(skipNulls: skipNulls),
      'member_invites': member_invites?.toMap(skipNulls: skipNulls),
      'member_promotions': member_promotions?.toMap(skipNulls: skipNulls),
      'member_restrictions': member_restrictions?.toMap(skipNulls: skipNulls),
      'info_changes': info_changes?.toMap(skipNulls: skipNulls),
      'setting_changes': setting_changes?.toMap(skipNulls: skipNulls),
      'invite_link_changes': invite_link_changes?.toMap(skipNulls: skipNulls),
      'video_chat_changes': video_chat_changes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LanguagePackStringValueOrdinary extends LanguagePackStringValue {
  String get tlType => 'languagePackStringValueOrdinary';

  string? extra;
  int? client_id;
  string? value;

  LanguagePackStringValueOrdinary({
    string? this.extra,
    int? this.client_id,
    string? this.value,
  });

  LanguagePackStringValueOrdinary.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LanguagePackStringValuePluralized extends LanguagePackStringValue {
  String get tlType => 'languagePackStringValuePluralized';

  string? extra;
  int? client_id;
  string? zero_value;
  string? one_value;
  string? two_value;
  string? few_value;
  string? many_value;
  string? other_value;

  LanguagePackStringValuePluralized({
    string? this.extra,
    int? this.client_id,
    string? this.zero_value,
    string? this.one_value,
    string? this.two_value,
    string? this.few_value,
    string? this.many_value,
    string? this.other_value,
  });

  LanguagePackStringValuePluralized.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    zero_value = map.containsKey('zero_value') ? map['zero_value'] : null;
    one_value = map.containsKey('one_value') ? map['one_value'] : null;
    two_value = map.containsKey('two_value') ? map['two_value'] : null;
    few_value = map.containsKey('few_value') ? map['few_value'] : null;
    many_value = map.containsKey('many_value') ? map['many_value'] : null;
    other_value = map.containsKey('other_value') ? map['other_value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'zero_value': zero_value?.toMap(skipNulls: skipNulls),
      'one_value': one_value?.toMap(skipNulls: skipNulls),
      'two_value': two_value?.toMap(skipNulls: skipNulls),
      'few_value': few_value?.toMap(skipNulls: skipNulls),
      'many_value': many_value?.toMap(skipNulls: skipNulls),
      'other_value': other_value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LanguagePackStringValueDeleted extends LanguagePackStringValue {
  String get tlType => 'languagePackStringValueDeleted';

  string? extra;
  int? client_id;

  LanguagePackStringValueDeleted({
    string? this.extra,
    int? this.client_id,
  });

  LanguagePackStringValueDeleted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LanguagePackString extends TdObject {
  String get tlType => 'languagePackString';

  string? extra;
  int? client_id;
  string? key;
  LanguagePackStringValue? value;

  LanguagePackString({
    string? this.extra,
    int? this.client_id,
    string? this.key,
    LanguagePackStringValue? this.value,
  });

  LanguagePackString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    key = map.containsKey('key') ? map['key'] : null;
    value = map.containsKey('value')
        ? TlMap.fromMap(map['value']) as LanguagePackStringValue
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'key': key?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LanguagePackStrings extends TdObject {
  String get tlType => 'languagePackStrings';

  string? extra;
  int? client_id;
  vector<LanguagePackString>? strings;

  LanguagePackStrings({
    string? this.extra,
    int? this.client_id,
    vector<LanguagePackString>? this.strings,
  });

  LanguagePackStrings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('strings') && map['strings'] != null) {
      strings = [];
      var someValues = map['strings'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as LanguagePackString;
        strings?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'strings': strings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LanguagePackInfo extends TdObject {
  String get tlType => 'languagePackInfo';

  string? extra;
  int? client_id;
  string? id;
  string? base_language_pack_id;
  string? name;
  string? native_name;
  string? plural_code;
  Bool? is_official;
  Bool? is_rtl;
  Bool? is_beta;
  Bool? is_installed;
  int32? total_string_count;
  int32? translated_string_count;
  int32? local_string_count;
  string? translation_url;

  LanguagePackInfo({
    string? this.extra,
    int? this.client_id,
    string? this.id,
    string? this.base_language_pack_id,
    string? this.name,
    string? this.native_name,
    string? this.plural_code,
    Bool? this.is_official,
    Bool? this.is_rtl,
    Bool? this.is_beta,
    Bool? this.is_installed,
    int32? this.total_string_count,
    int32? this.translated_string_count,
    int32? this.local_string_count,
    string? this.translation_url,
  });

  LanguagePackInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    base_language_pack_id = map.containsKey('base_language_pack_id')
        ? map['base_language_pack_id']
        : null;
    name = map.containsKey('name') ? map['name'] : null;
    native_name = map.containsKey('native_name') ? map['native_name'] : null;
    plural_code = map.containsKey('plural_code') ? map['plural_code'] : null;
    is_official = map.containsKey('is_official') ? map['is_official'] : null;
    is_rtl = map.containsKey('is_rtl') ? map['is_rtl'] : null;
    is_beta = map.containsKey('is_beta') ? map['is_beta'] : null;
    is_installed = map.containsKey('is_installed') ? map['is_installed'] : null;
    total_string_count = map.containsKey('total_string_count')
        ? map['total_string_count']
        : null;
    translated_string_count = map.containsKey('translated_string_count')
        ? map['translated_string_count']
        : null;
    local_string_count = map.containsKey('local_string_count')
        ? map['local_string_count']
        : null;
    translation_url =
        map.containsKey('translation_url') ? map['translation_url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'base_language_pack_id':
          base_language_pack_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'native_name': native_name?.toMap(skipNulls: skipNulls),
      'plural_code': plural_code?.toMap(skipNulls: skipNulls),
      'is_official': is_official?.toMap(skipNulls: skipNulls),
      'is_rtl': is_rtl?.toMap(skipNulls: skipNulls),
      'is_beta': is_beta?.toMap(skipNulls: skipNulls),
      'is_installed': is_installed?.toMap(skipNulls: skipNulls),
      'total_string_count': total_string_count?.toMap(skipNulls: skipNulls),
      'translated_string_count':
          translated_string_count?.toMap(skipNulls: skipNulls),
      'local_string_count': local_string_count?.toMap(skipNulls: skipNulls),
      'translation_url': translation_url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LocalizationTargetInfo extends TdObject {
  String get tlType => 'localizationTargetInfo';

  string? extra;
  int? client_id;
  vector<LanguagePackInfo>? language_packs;

  LocalizationTargetInfo({
    string? this.extra,
    int? this.client_id,
    vector<LanguagePackInfo>? this.language_packs,
  });

  LocalizationTargetInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('language_packs') && map['language_packs'] != null) {
      language_packs = [];
      var someValues = map['language_packs'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as LanguagePackInfo;
        language_packs?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_packs': language_packs?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenFirebaseCloudMessaging extends DeviceToken {
  String get tlType => 'deviceTokenFirebaseCloudMessaging';

  string? extra;
  int? client_id;
  string? token;
  Bool? encrypt;

  DeviceTokenFirebaseCloudMessaging({
    string? this.extra,
    int? this.client_id,
    string? this.token,
    Bool? this.encrypt,
  });

  DeviceTokenFirebaseCloudMessaging.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    token = map.containsKey('token') ? map['token'] : null;
    encrypt = map.containsKey('encrypt') ? map['encrypt'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'token': token?.toMap(skipNulls: skipNulls),
      'encrypt': encrypt?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenApplePush extends DeviceToken {
  String get tlType => 'deviceTokenApplePush';

  string? extra;
  int? client_id;
  string? device_token;
  Bool? is_app_sandbox;

  DeviceTokenApplePush({
    string? this.extra,
    int? this.client_id,
    string? this.device_token,
    Bool? this.is_app_sandbox,
  });

  DeviceTokenApplePush.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    device_token = map.containsKey('device_token') ? map['device_token'] : null;
    is_app_sandbox =
        map.containsKey('is_app_sandbox') ? map['is_app_sandbox'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'device_token': device_token?.toMap(skipNulls: skipNulls),
      'is_app_sandbox': is_app_sandbox?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenApplePushVoIP extends DeviceToken {
  String get tlType => 'deviceTokenApplePushVoIP';

  string? extra;
  int? client_id;
  string? device_token;
  Bool? is_app_sandbox;
  Bool? encrypt;

  DeviceTokenApplePushVoIP({
    string? this.extra,
    int? this.client_id,
    string? this.device_token,
    Bool? this.is_app_sandbox,
    Bool? this.encrypt,
  });

  DeviceTokenApplePushVoIP.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    device_token = map.containsKey('device_token') ? map['device_token'] : null;
    is_app_sandbox =
        map.containsKey('is_app_sandbox') ? map['is_app_sandbox'] : null;
    encrypt = map.containsKey('encrypt') ? map['encrypt'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'device_token': device_token?.toMap(skipNulls: skipNulls),
      'is_app_sandbox': is_app_sandbox?.toMap(skipNulls: skipNulls),
      'encrypt': encrypt?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenWindowsPush extends DeviceToken {
  String get tlType => 'deviceTokenWindowsPush';

  string? extra;
  int? client_id;
  string? access_token;

  DeviceTokenWindowsPush({
    string? this.extra,
    int? this.client_id,
    string? this.access_token,
  });

  DeviceTokenWindowsPush.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    access_token = map.containsKey('access_token') ? map['access_token'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'access_token': access_token?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenMicrosoftPush extends DeviceToken {
  String get tlType => 'deviceTokenMicrosoftPush';

  string? extra;
  int? client_id;
  string? channel_uri;

  DeviceTokenMicrosoftPush({
    string? this.extra,
    int? this.client_id,
    string? this.channel_uri,
  });

  DeviceTokenMicrosoftPush.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    channel_uri = map.containsKey('channel_uri') ? map['channel_uri'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'channel_uri': channel_uri?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenMicrosoftPushVoIP extends DeviceToken {
  String get tlType => 'deviceTokenMicrosoftPushVoIP';

  string? extra;
  int? client_id;
  string? channel_uri;

  DeviceTokenMicrosoftPushVoIP({
    string? this.extra,
    int? this.client_id,
    string? this.channel_uri,
  });

  DeviceTokenMicrosoftPushVoIP.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    channel_uri = map.containsKey('channel_uri') ? map['channel_uri'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'channel_uri': channel_uri?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenWebPush extends DeviceToken {
  String get tlType => 'deviceTokenWebPush';

  string? extra;
  int? client_id;
  string? endpoint;
  string? p256dh_base64url;
  string? auth_base64url;

  DeviceTokenWebPush({
    string? this.extra,
    int? this.client_id,
    string? this.endpoint,
    string? this.p256dh_base64url,
    string? this.auth_base64url,
  });

  DeviceTokenWebPush.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    endpoint = map.containsKey('endpoint') ? map['endpoint'] : null;
    p256dh_base64url =
        map.containsKey('p256dh_base64url') ? map['p256dh_base64url'] : null;
    auth_base64url =
        map.containsKey('auth_base64url') ? map['auth_base64url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'endpoint': endpoint?.toMap(skipNulls: skipNulls),
      'p256dh_base64url': p256dh_base64url?.toMap(skipNulls: skipNulls),
      'auth_base64url': auth_base64url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenSimplePush extends DeviceToken {
  String get tlType => 'deviceTokenSimplePush';

  string? extra;
  int? client_id;
  string? endpoint;

  DeviceTokenSimplePush({
    string? this.extra,
    int? this.client_id,
    string? this.endpoint,
  });

  DeviceTokenSimplePush.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    endpoint = map.containsKey('endpoint') ? map['endpoint'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'endpoint': endpoint?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenUbuntuPush extends DeviceToken {
  String get tlType => 'deviceTokenUbuntuPush';

  string? extra;
  int? client_id;
  string? token;

  DeviceTokenUbuntuPush({
    string? this.extra,
    int? this.client_id,
    string? this.token,
  });

  DeviceTokenUbuntuPush.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    token = map.containsKey('token') ? map['token'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'token': token?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenBlackBerryPush extends DeviceToken {
  String get tlType => 'deviceTokenBlackBerryPush';

  string? extra;
  int? client_id;
  string? token;

  DeviceTokenBlackBerryPush({
    string? this.extra,
    int? this.client_id,
    string? this.token,
  });

  DeviceTokenBlackBerryPush.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    token = map.containsKey('token') ? map['token'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'token': token?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeviceTokenTizenPush extends DeviceToken {
  String get tlType => 'deviceTokenTizenPush';

  string? extra;
  int? client_id;
  string? reg_id;

  DeviceTokenTizenPush({
    string? this.extra,
    int? this.client_id,
    string? this.reg_id,
  });

  DeviceTokenTizenPush.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    reg_id = map.containsKey('reg_id') ? map['reg_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'reg_id': reg_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushReceiverId extends TdObject {
  String get tlType => 'pushReceiverId';

  string? extra;
  int? client_id;
  int64? id;

  PushReceiverId({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
  });

  PushReceiverId.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BackgroundFillSolid extends BackgroundFill {
  String get tlType => 'backgroundFillSolid';

  string? extra;
  int? client_id;
  int32? color;

  BackgroundFillSolid({
    string? this.extra,
    int? this.client_id,
    int32? this.color,
  });

  BackgroundFillSolid.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    color = map.containsKey('color') ? map['color'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'color': color?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BackgroundFillGradient extends BackgroundFill {
  String get tlType => 'backgroundFillGradient';

  string? extra;
  int? client_id;
  int32? top_color;
  int32? bottom_color;
  int32? rotation_angle;

  BackgroundFillGradient({
    string? this.extra,
    int? this.client_id,
    int32? this.top_color,
    int32? this.bottom_color,
    int32? this.rotation_angle,
  });

  BackgroundFillGradient.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    top_color = map.containsKey('top_color') ? map['top_color'] : null;
    bottom_color = map.containsKey('bottom_color') ? map['bottom_color'] : null;
    rotation_angle =
        map.containsKey('rotation_angle') ? map['rotation_angle'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'top_color': top_color?.toMap(skipNulls: skipNulls),
      'bottom_color': bottom_color?.toMap(skipNulls: skipNulls),
      'rotation_angle': rotation_angle?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BackgroundFillFreeformGradient extends BackgroundFill {
  String get tlType => 'backgroundFillFreeformGradient';

  string? extra;
  int? client_id;
  vector<int32>? colors;

  BackgroundFillFreeformGradient({
    string? this.extra,
    int? this.client_id,
    vector<int32>? this.colors,
  });

  BackgroundFillFreeformGradient.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('colors') && map['colors'] != null) {
      colors = [];
      var someValues = map['colors'];
      for (var someValue in someValues) {
        colors?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'colors': colors?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BackgroundTypeWallpaper extends BackgroundType {
  String get tlType => 'backgroundTypeWallpaper';

  string? extra;
  int? client_id;
  Bool? is_blurred;
  Bool? is_moving;

  BackgroundTypeWallpaper({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_blurred,
    Bool? this.is_moving,
  });

  BackgroundTypeWallpaper.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_blurred = map.containsKey('is_blurred') ? map['is_blurred'] : null;
    is_moving = map.containsKey('is_moving') ? map['is_moving'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_blurred': is_blurred?.toMap(skipNulls: skipNulls),
      'is_moving': is_moving?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BackgroundTypePattern extends BackgroundType {
  String get tlType => 'backgroundTypePattern';

  string? extra;
  int? client_id;
  BackgroundFill? fill;
  int32? intensity;
  Bool? is_inverted;
  Bool? is_moving;

  BackgroundTypePattern({
    string? this.extra,
    int? this.client_id,
    BackgroundFill? this.fill,
    int32? this.intensity,
    Bool? this.is_inverted,
    Bool? this.is_moving,
  });

  BackgroundTypePattern.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    fill = map.containsKey('fill')
        ? TlMap.fromMap(map['fill']) as BackgroundFill
        : null;
    intensity = map.containsKey('intensity') ? map['intensity'] : null;
    is_inverted = map.containsKey('is_inverted') ? map['is_inverted'] : null;
    is_moving = map.containsKey('is_moving') ? map['is_moving'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'fill': fill?.toMap(skipNulls: skipNulls),
      'intensity': intensity?.toMap(skipNulls: skipNulls),
      'is_inverted': is_inverted?.toMap(skipNulls: skipNulls),
      'is_moving': is_moving?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BackgroundTypeFill extends BackgroundType {
  String get tlType => 'backgroundTypeFill';

  string? extra;
  int? client_id;
  BackgroundFill? fill;

  BackgroundTypeFill({
    string? this.extra,
    int? this.client_id,
    BackgroundFill? this.fill,
  });

  BackgroundTypeFill.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    fill = map.containsKey('fill')
        ? TlMap.fromMap(map['fill']) as BackgroundFill
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'fill': fill?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Background extends TdObject {
  String get tlType => 'background';

  string? extra;
  int? client_id;
  int64? id;
  Bool? is_default;
  Bool? is_dark;
  string? name;
  Document? document;
  BackgroundType? type;

  Background({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    Bool? this.is_default,
    Bool? this.is_dark,
    string? this.name,
    Document? this.document,
    BackgroundType? this.type,
  });

  Background.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    is_default = map.containsKey('is_default') ? map['is_default'] : null;
    is_dark = map.containsKey('is_dark') ? map['is_dark'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    document = map.containsKey('document')
        ? TlMap.fromMap(map['document']) as Document
        : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as BackgroundType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'is_default': is_default?.toMap(skipNulls: skipNulls),
      'is_dark': is_dark?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'document': document?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Backgrounds extends TdObject {
  String get tlType => 'backgrounds';

  string? extra;
  int? client_id;
  vector<Background>? backgrounds;

  Backgrounds({
    string? this.extra,
    int? this.client_id,
    vector<Background>? this.backgrounds,
  });

  Backgrounds.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('backgrounds') && map['backgrounds'] != null) {
      backgrounds = [];
      var someValues = map['backgrounds'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Background;
        backgrounds?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'backgrounds': backgrounds?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputBackgroundLocal extends InputBackground {
  String get tlType => 'inputBackgroundLocal';

  string? extra;
  int? client_id;
  InputFile? background;

  InputBackgroundLocal({
    string? this.extra,
    int? this.client_id,
    InputFile? this.background,
  });

  InputBackgroundLocal.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    background = map.containsKey('background')
        ? TlMap.fromMap(map['background']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'background': background?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputBackgroundRemote extends InputBackground {
  String get tlType => 'inputBackgroundRemote';

  string? extra;
  int? client_id;
  int64? background_id;

  InputBackgroundRemote({
    string? this.extra,
    int? this.client_id,
    int64? this.background_id,
  });

  InputBackgroundRemote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    background_id =
        map.containsKey('background_id') ? map['background_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'background_id': background_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ThemeSettings extends TdObject {
  String get tlType => 'themeSettings';

  string? extra;
  int? client_id;
  int32? accent_color;
  Background? background;
  BackgroundFill? outgoing_message_fill;
  Bool? animate_outgoing_message_fill;
  int32? outgoing_message_accent_color;

  ThemeSettings({
    string? this.extra,
    int? this.client_id,
    int32? this.accent_color,
    Background? this.background,
    BackgroundFill? this.outgoing_message_fill,
    Bool? this.animate_outgoing_message_fill,
    int32? this.outgoing_message_accent_color,
  });

  ThemeSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    accent_color = map.containsKey('accent_color') ? map['accent_color'] : null;
    background = map.containsKey('background')
        ? TlMap.fromMap(map['background']) as Background
        : null;
    outgoing_message_fill = map.containsKey('outgoing_message_fill')
        ? TlMap.fromMap(map['outgoing_message_fill']) as BackgroundFill
        : null;
    animate_outgoing_message_fill =
        map.containsKey('animate_outgoing_message_fill')
            ? map['animate_outgoing_message_fill']
            : null;
    outgoing_message_accent_color =
        map.containsKey('outgoing_message_accent_color')
            ? map['outgoing_message_accent_color']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'accent_color': accent_color?.toMap(skipNulls: skipNulls),
      'background': background?.toMap(skipNulls: skipNulls),
      'outgoing_message_fill':
          outgoing_message_fill?.toMap(skipNulls: skipNulls),
      'animate_outgoing_message_fill':
          animate_outgoing_message_fill?.toMap(skipNulls: skipNulls),
      'outgoing_message_accent_color':
          outgoing_message_accent_color?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatTheme extends TdObject {
  String get tlType => 'chatTheme';

  string? extra;
  int? client_id;
  string? name;
  ThemeSettings? light_settings;
  ThemeSettings? dark_settings;

  ChatTheme({
    string? this.extra,
    int? this.client_id,
    string? this.name,
    ThemeSettings? this.light_settings,
    ThemeSettings? this.dark_settings,
  });

  ChatTheme.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    light_settings = map.containsKey('light_settings')
        ? TlMap.fromMap(map['light_settings']) as ThemeSettings
        : null;
    dark_settings = map.containsKey('dark_settings')
        ? TlMap.fromMap(map['dark_settings']) as ThemeSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'light_settings': light_settings?.toMap(skipNulls: skipNulls),
      'dark_settings': dark_settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Hashtags extends TdObject {
  String get tlType => 'hashtags';

  string? extra;
  int? client_id;
  vector<string>? hashtags;

  Hashtags({
    string? this.extra,
    int? this.client_id,
    vector<string>? this.hashtags,
  });

  Hashtags.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('hashtags') && map['hashtags'] != null) {
      hashtags = [];
      var someValues = map['hashtags'];
      for (var someValue in someValues) {
        hashtags?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'hashtags': hashtags?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CanTransferOwnershipResultOk extends CanTransferOwnershipResult {
  String get tlType => 'canTransferOwnershipResultOk';

  string? extra;
  int? client_id;

  CanTransferOwnershipResultOk({
    string? this.extra,
    int? this.client_id,
  });

  CanTransferOwnershipResultOk.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CanTransferOwnershipResultPasswordNeeded
    extends CanTransferOwnershipResult {
  String get tlType => 'canTransferOwnershipResultPasswordNeeded';

  string? extra;
  int? client_id;

  CanTransferOwnershipResultPasswordNeeded({
    string? this.extra,
    int? this.client_id,
  });

  CanTransferOwnershipResultPasswordNeeded.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CanTransferOwnershipResultPasswordTooFresh
    extends CanTransferOwnershipResult {
  String get tlType => 'canTransferOwnershipResultPasswordTooFresh';

  string? extra;
  int? client_id;
  int32? retry_after;

  CanTransferOwnershipResultPasswordTooFresh({
    string? this.extra,
    int? this.client_id,
    int32? this.retry_after,
  });

  CanTransferOwnershipResultPasswordTooFresh.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    retry_after = map.containsKey('retry_after') ? map['retry_after'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'retry_after': retry_after?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CanTransferOwnershipResultSessionTooFresh
    extends CanTransferOwnershipResult {
  String get tlType => 'canTransferOwnershipResultSessionTooFresh';

  string? extra;
  int? client_id;
  int32? retry_after;

  CanTransferOwnershipResultSessionTooFresh({
    string? this.extra,
    int? this.client_id,
    int32? this.retry_after,
  });

  CanTransferOwnershipResultSessionTooFresh.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    retry_after = map.containsKey('retry_after') ? map['retry_after'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'retry_after': retry_after?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckChatUsernameResultOk extends CheckChatUsernameResult {
  String get tlType => 'checkChatUsernameResultOk';

  string? extra;
  int? client_id;

  CheckChatUsernameResultOk({
    string? this.extra,
    int? this.client_id,
  });

  CheckChatUsernameResultOk.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckChatUsernameResultUsernameInvalid extends CheckChatUsernameResult {
  String get tlType => 'checkChatUsernameResultUsernameInvalid';

  string? extra;
  int? client_id;

  CheckChatUsernameResultUsernameInvalid({
    string? this.extra,
    int? this.client_id,
  });

  CheckChatUsernameResultUsernameInvalid.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckChatUsernameResultUsernameOccupied extends CheckChatUsernameResult {
  String get tlType => 'checkChatUsernameResultUsernameOccupied';

  string? extra;
  int? client_id;

  CheckChatUsernameResultUsernameOccupied({
    string? this.extra,
    int? this.client_id,
  });

  CheckChatUsernameResultUsernameOccupied.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckChatUsernameResultPublicChatsTooMuch
    extends CheckChatUsernameResult {
  String get tlType => 'checkChatUsernameResultPublicChatsTooMuch';

  string? extra;
  int? client_id;

  CheckChatUsernameResultPublicChatsTooMuch({
    string? this.extra,
    int? this.client_id,
  });

  CheckChatUsernameResultPublicChatsTooMuch.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckChatUsernameResultPublicGroupsUnavailable
    extends CheckChatUsernameResult {
  String get tlType => 'checkChatUsernameResultPublicGroupsUnavailable';

  string? extra;
  int? client_id;

  CheckChatUsernameResultPublicGroupsUnavailable({
    string? this.extra,
    int? this.client_id,
  });

  CheckChatUsernameResultPublicGroupsUnavailable.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckStickerSetNameResultOk extends CheckStickerSetNameResult {
  String get tlType => 'checkStickerSetNameResultOk';

  string? extra;
  int? client_id;

  CheckStickerSetNameResultOk({
    string? this.extra,
    int? this.client_id,
  });

  CheckStickerSetNameResultOk.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckStickerSetNameResultNameInvalid extends CheckStickerSetNameResult {
  String get tlType => 'checkStickerSetNameResultNameInvalid';

  string? extra;
  int? client_id;

  CheckStickerSetNameResultNameInvalid({
    string? this.extra,
    int? this.client_id,
  });

  CheckStickerSetNameResultNameInvalid.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckStickerSetNameResultNameOccupied extends CheckStickerSetNameResult {
  String get tlType => 'checkStickerSetNameResultNameOccupied';

  string? extra;
  int? client_id;

  CheckStickerSetNameResultNameOccupied({
    string? this.extra,
    int? this.client_id,
  });

  CheckStickerSetNameResultNameOccupied.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResetPasswordResultOk extends ResetPasswordResult {
  String get tlType => 'resetPasswordResultOk';

  string? extra;
  int? client_id;

  ResetPasswordResultOk({
    string? this.extra,
    int? this.client_id,
  });

  ResetPasswordResultOk.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResetPasswordResultPending extends ResetPasswordResult {
  String get tlType => 'resetPasswordResultPending';

  string? extra;
  int? client_id;
  int32? pending_reset_date;

  ResetPasswordResultPending({
    string? this.extra,
    int? this.client_id,
    int32? this.pending_reset_date,
  });

  ResetPasswordResultPending.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    pending_reset_date = map.containsKey('pending_reset_date')
        ? map['pending_reset_date']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'pending_reset_date': pending_reset_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResetPasswordResultDeclined extends ResetPasswordResult {
  String get tlType => 'resetPasswordResultDeclined';

  string? extra;
  int? client_id;
  int32? retry_date;

  ResetPasswordResultDeclined({
    string? this.extra,
    int? this.client_id,
    int32? this.retry_date,
  });

  ResetPasswordResultDeclined.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    retry_date = map.containsKey('retry_date') ? map['retry_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'retry_date': retry_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageFileTypePrivate extends MessageFileType {
  String get tlType => 'messageFileTypePrivate';

  string? extra;
  int? client_id;
  string? name;

  MessageFileTypePrivate({
    string? this.extra,
    int? this.client_id,
    string? this.name,
  });

  MessageFileTypePrivate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageFileTypeGroup extends MessageFileType {
  String get tlType => 'messageFileTypeGroup';

  string? extra;
  int? client_id;
  string? title;

  MessageFileTypeGroup({
    string? this.extra,
    int? this.client_id,
    string? this.title,
  });

  MessageFileTypeGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageFileTypeUnknown extends MessageFileType {
  String get tlType => 'messageFileTypeUnknown';

  string? extra;
  int? client_id;

  MessageFileTypeUnknown({
    string? this.extra,
    int? this.client_id,
  });

  MessageFileTypeUnknown.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentHidden extends PushMessageContent {
  String get tlType => 'pushMessageContentHidden';

  string? extra;
  int? client_id;
  Bool? is_pinned;

  PushMessageContentHidden({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_pinned,
  });

  PushMessageContentHidden.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentAnimation extends PushMessageContent {
  String get tlType => 'pushMessageContentAnimation';

  string? extra;
  int? client_id;
  Animation? animation;
  string? caption;
  Bool? is_pinned;

  PushMessageContentAnimation({
    string? this.extra,
    int? this.client_id,
    Animation? this.animation,
    string? this.caption,
    Bool? this.is_pinned,
  });

  PushMessageContentAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as Animation
        : null;
    caption = map.containsKey('caption') ? map['caption'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentAudio extends PushMessageContent {
  String get tlType => 'pushMessageContentAudio';

  string? extra;
  int? client_id;
  Audio? audio;
  Bool? is_pinned;

  PushMessageContentAudio({
    string? this.extra,
    int? this.client_id,
    Audio? this.audio,
    Bool? this.is_pinned,
  });

  PushMessageContentAudio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    audio =
        map.containsKey('audio') ? TlMap.fromMap(map['audio']) as Audio : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'audio': audio?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentContact extends PushMessageContent {
  String get tlType => 'pushMessageContentContact';

  string? extra;
  int? client_id;
  string? name;
  Bool? is_pinned;

  PushMessageContentContact({
    string? this.extra,
    int? this.client_id,
    string? this.name,
    Bool? this.is_pinned,
  });

  PushMessageContentContact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentContactRegistered extends PushMessageContent {
  String get tlType => 'pushMessageContentContactRegistered';

  string? extra;
  int? client_id;

  PushMessageContentContactRegistered({
    string? this.extra,
    int? this.client_id,
  });

  PushMessageContentContactRegistered.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentDocument extends PushMessageContent {
  String get tlType => 'pushMessageContentDocument';

  string? extra;
  int? client_id;
  Document? document;
  Bool? is_pinned;

  PushMessageContentDocument({
    string? this.extra,
    int? this.client_id,
    Document? this.document,
    Bool? this.is_pinned,
  });

  PushMessageContentDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    document = map.containsKey('document')
        ? TlMap.fromMap(map['document']) as Document
        : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'document': document?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentGame extends PushMessageContent {
  String get tlType => 'pushMessageContentGame';

  string? extra;
  int? client_id;
  string? title;
  Bool? is_pinned;

  PushMessageContentGame({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    Bool? this.is_pinned,
  });

  PushMessageContentGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentGameScore extends PushMessageContent {
  String get tlType => 'pushMessageContentGameScore';

  string? extra;
  int? client_id;
  string? title;
  int32? score;
  Bool? is_pinned;

  PushMessageContentGameScore({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    int32? this.score,
    Bool? this.is_pinned,
  });

  PushMessageContentGameScore.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    score = map.containsKey('score') ? map['score'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'score': score?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentInvoice extends PushMessageContent {
  String get tlType => 'pushMessageContentInvoice';

  string? extra;
  int? client_id;
  string? price;
  Bool? is_pinned;

  PushMessageContentInvoice({
    string? this.extra,
    int? this.client_id,
    string? this.price,
    Bool? this.is_pinned,
  });

  PushMessageContentInvoice.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    price = map.containsKey('price') ? map['price'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'price': price?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentLocation extends PushMessageContent {
  String get tlType => 'pushMessageContentLocation';

  string? extra;
  int? client_id;
  Bool? is_live;
  Bool? is_pinned;

  PushMessageContentLocation({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_live,
    Bool? this.is_pinned,
  });

  PushMessageContentLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_live = map.containsKey('is_live') ? map['is_live'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_live': is_live?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentPhoto extends PushMessageContent {
  String get tlType => 'pushMessageContentPhoto';

  string? extra;
  int? client_id;
  Photo? photo;
  string? caption;
  Bool? is_secret;
  Bool? is_pinned;

  PushMessageContentPhoto({
    string? this.extra,
    int? this.client_id,
    Photo? this.photo,
    string? this.caption,
    Bool? this.is_secret,
    Bool? this.is_pinned,
  });

  PushMessageContentPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo =
        map.containsKey('photo') ? TlMap.fromMap(map['photo']) as Photo : null;
    caption = map.containsKey('caption') ? map['caption'] : null;
    is_secret = map.containsKey('is_secret') ? map['is_secret'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'is_secret': is_secret?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentPoll extends PushMessageContent {
  String get tlType => 'pushMessageContentPoll';

  string? extra;
  int? client_id;
  string? question;
  Bool? is_regular;
  Bool? is_pinned;

  PushMessageContentPoll({
    string? this.extra,
    int? this.client_id,
    string? this.question,
    Bool? this.is_regular,
    Bool? this.is_pinned,
  });

  PushMessageContentPoll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    question = map.containsKey('question') ? map['question'] : null;
    is_regular = map.containsKey('is_regular') ? map['is_regular'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'question': question?.toMap(skipNulls: skipNulls),
      'is_regular': is_regular?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentScreenshotTaken extends PushMessageContent {
  String get tlType => 'pushMessageContentScreenshotTaken';

  string? extra;
  int? client_id;

  PushMessageContentScreenshotTaken({
    string? this.extra,
    int? this.client_id,
  });

  PushMessageContentScreenshotTaken.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentSticker extends PushMessageContent {
  String get tlType => 'pushMessageContentSticker';

  string? extra;
  int? client_id;
  Sticker? sticker;
  string? emoji;
  Bool? is_pinned;

  PushMessageContentSticker({
    string? this.extra,
    int? this.client_id,
    Sticker? this.sticker,
    string? this.emoji,
    Bool? this.is_pinned,
  });

  PushMessageContentSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as Sticker
        : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentText extends PushMessageContent {
  String get tlType => 'pushMessageContentText';

  string? extra;
  int? client_id;
  string? text;
  Bool? is_pinned;

  PushMessageContentText({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    Bool? this.is_pinned,
  });

  PushMessageContentText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentVideo extends PushMessageContent {
  String get tlType => 'pushMessageContentVideo';

  string? extra;
  int? client_id;
  Video? video;
  string? caption;
  Bool? is_secret;
  Bool? is_pinned;

  PushMessageContentVideo({
    string? this.extra,
    int? this.client_id,
    Video? this.video,
    string? this.caption,
    Bool? this.is_secret,
    Bool? this.is_pinned,
  });

  PushMessageContentVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    video =
        map.containsKey('video') ? TlMap.fromMap(map['video']) as Video : null;
    caption = map.containsKey('caption') ? map['caption'] : null;
    is_secret = map.containsKey('is_secret') ? map['is_secret'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'video': video?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
      'is_secret': is_secret?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentVideoNote extends PushMessageContent {
  String get tlType => 'pushMessageContentVideoNote';

  string? extra;
  int? client_id;
  VideoNote? video_note;
  Bool? is_pinned;

  PushMessageContentVideoNote({
    string? this.extra,
    int? this.client_id,
    VideoNote? this.video_note,
    Bool? this.is_pinned,
  });

  PushMessageContentVideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    video_note = map.containsKey('video_note')
        ? TlMap.fromMap(map['video_note']) as VideoNote
        : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'video_note': video_note?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentVoiceNote extends PushMessageContent {
  String get tlType => 'pushMessageContentVoiceNote';

  string? extra;
  int? client_id;
  VoiceNote? voice_note;
  Bool? is_pinned;

  PushMessageContentVoiceNote({
    string? this.extra,
    int? this.client_id,
    VoiceNote? this.voice_note,
    Bool? this.is_pinned,
  });

  PushMessageContentVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    voice_note = map.containsKey('voice_note')
        ? TlMap.fromMap(map['voice_note']) as VoiceNote
        : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'voice_note': voice_note?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentBasicGroupChatCreate extends PushMessageContent {
  String get tlType => 'pushMessageContentBasicGroupChatCreate';

  string? extra;
  int? client_id;

  PushMessageContentBasicGroupChatCreate({
    string? this.extra,
    int? this.client_id,
  });

  PushMessageContentBasicGroupChatCreate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentChatAddMembers extends PushMessageContent {
  String get tlType => 'pushMessageContentChatAddMembers';

  string? extra;
  int? client_id;
  string? member_name;
  Bool? is_current_user;
  Bool? is_returned;

  PushMessageContentChatAddMembers({
    string? this.extra,
    int? this.client_id,
    string? this.member_name,
    Bool? this.is_current_user,
    Bool? this.is_returned,
  });

  PushMessageContentChatAddMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    member_name = map.containsKey('member_name') ? map['member_name'] : null;
    is_current_user =
        map.containsKey('is_current_user') ? map['is_current_user'] : null;
    is_returned = map.containsKey('is_returned') ? map['is_returned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'member_name': member_name?.toMap(skipNulls: skipNulls),
      'is_current_user': is_current_user?.toMap(skipNulls: skipNulls),
      'is_returned': is_returned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentChatChangePhoto extends PushMessageContent {
  String get tlType => 'pushMessageContentChatChangePhoto';

  string? extra;
  int? client_id;

  PushMessageContentChatChangePhoto({
    string? this.extra,
    int? this.client_id,
  });

  PushMessageContentChatChangePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentChatChangeTitle extends PushMessageContent {
  String get tlType => 'pushMessageContentChatChangeTitle';

  string? extra;
  int? client_id;
  string? title;

  PushMessageContentChatChangeTitle({
    string? this.extra,
    int? this.client_id,
    string? this.title,
  });

  PushMessageContentChatChangeTitle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentChatSetTheme extends PushMessageContent {
  String get tlType => 'pushMessageContentChatSetTheme';

  string? extra;
  int? client_id;
  string? theme_name;

  PushMessageContentChatSetTheme({
    string? this.extra,
    int? this.client_id,
    string? this.theme_name,
  });

  PushMessageContentChatSetTheme.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    theme_name = map.containsKey('theme_name') ? map['theme_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'theme_name': theme_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentChatDeleteMember extends PushMessageContent {
  String get tlType => 'pushMessageContentChatDeleteMember';

  string? extra;
  int? client_id;
  string? member_name;
  Bool? is_current_user;
  Bool? is_left;

  PushMessageContentChatDeleteMember({
    string? this.extra,
    int? this.client_id,
    string? this.member_name,
    Bool? this.is_current_user,
    Bool? this.is_left,
  });

  PushMessageContentChatDeleteMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    member_name = map.containsKey('member_name') ? map['member_name'] : null;
    is_current_user =
        map.containsKey('is_current_user') ? map['is_current_user'] : null;
    is_left = map.containsKey('is_left') ? map['is_left'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'member_name': member_name?.toMap(skipNulls: skipNulls),
      'is_current_user': is_current_user?.toMap(skipNulls: skipNulls),
      'is_left': is_left?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentChatJoinByLink extends PushMessageContent {
  String get tlType => 'pushMessageContentChatJoinByLink';

  string? extra;
  int? client_id;

  PushMessageContentChatJoinByLink({
    string? this.extra,
    int? this.client_id,
  });

  PushMessageContentChatJoinByLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentChatJoinByRequest extends PushMessageContent {
  String get tlType => 'pushMessageContentChatJoinByRequest';

  string? extra;
  int? client_id;

  PushMessageContentChatJoinByRequest({
    string? this.extra,
    int? this.client_id,
  });

  PushMessageContentChatJoinByRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentMessageForwards extends PushMessageContent {
  String get tlType => 'pushMessageContentMessageForwards';

  string? extra;
  int? client_id;
  int32? total_count;

  PushMessageContentMessageForwards({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
  });

  PushMessageContentMessageForwards.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PushMessageContentMediaAlbum extends PushMessageContent {
  String get tlType => 'pushMessageContentMediaAlbum';

  string? extra;
  int? client_id;
  int32? total_count;
  Bool? has_photos;
  Bool? has_videos;
  Bool? has_audios;
  Bool? has_documents;

  PushMessageContentMediaAlbum({
    string? this.extra,
    int? this.client_id,
    int32? this.total_count,
    Bool? this.has_photos,
    Bool? this.has_videos,
    Bool? this.has_audios,
    Bool? this.has_documents,
  });

  PushMessageContentMediaAlbum.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    has_photos = map.containsKey('has_photos') ? map['has_photos'] : null;
    has_videos = map.containsKey('has_videos') ? map['has_videos'] : null;
    has_audios = map.containsKey('has_audios') ? map['has_audios'] : null;
    has_documents =
        map.containsKey('has_documents') ? map['has_documents'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'has_photos': has_photos?.toMap(skipNulls: skipNulls),
      'has_videos': has_videos?.toMap(skipNulls: skipNulls),
      'has_audios': has_audios?.toMap(skipNulls: skipNulls),
      'has_documents': has_documents?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationTypeNewMessage extends NotificationType {
  String get tlType => 'notificationTypeNewMessage';

  string? extra;
  int? client_id;
  Message? message;

  NotificationTypeNewMessage({
    string? this.extra,
    int? this.client_id,
    Message? this.message,
  });

  NotificationTypeNewMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationTypeNewSecretChat extends NotificationType {
  String get tlType => 'notificationTypeNewSecretChat';

  string? extra;
  int? client_id;

  NotificationTypeNewSecretChat({
    string? this.extra,
    int? this.client_id,
  });

  NotificationTypeNewSecretChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationTypeNewCall extends NotificationType {
  String get tlType => 'notificationTypeNewCall';

  string? extra;
  int? client_id;
  int32? call_id;

  NotificationTypeNewCall({
    string? this.extra,
    int? this.client_id,
    int32? this.call_id,
  });

  NotificationTypeNewCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    call_id = map.containsKey('call_id') ? map['call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'call_id': call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationTypeNewPushMessage extends NotificationType {
  String get tlType => 'notificationTypeNewPushMessage';

  string? extra;
  int? client_id;
  int53? message_id;
  MessageSender? sender_id;
  string? sender_name;
  Bool? is_outgoing;
  PushMessageContent? content;

  NotificationTypeNewPushMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.message_id,
    MessageSender? this.sender_id,
    string? this.sender_name,
    Bool? this.is_outgoing,
    PushMessageContent? this.content,
  });

  NotificationTypeNewPushMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    sender_id = map.containsKey('sender_id')
        ? TlMap.fromMap(map['sender_id']) as MessageSender
        : null;
    sender_name = map.containsKey('sender_name') ? map['sender_name'] : null;
    is_outgoing = map.containsKey('is_outgoing') ? map['is_outgoing'] : null;
    content = map.containsKey('content')
        ? TlMap.fromMap(map['content']) as PushMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'sender_id': sender_id?.toMap(skipNulls: skipNulls),
      'sender_name': sender_name?.toMap(skipNulls: skipNulls),
      'is_outgoing': is_outgoing?.toMap(skipNulls: skipNulls),
      'content': content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationGroupTypeMessages extends NotificationGroupType {
  String get tlType => 'notificationGroupTypeMessages';

  string? extra;
  int? client_id;

  NotificationGroupTypeMessages({
    string? this.extra,
    int? this.client_id,
  });

  NotificationGroupTypeMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationGroupTypeMentions extends NotificationGroupType {
  String get tlType => 'notificationGroupTypeMentions';

  string? extra;
  int? client_id;

  NotificationGroupTypeMentions({
    string? this.extra,
    int? this.client_id,
  });

  NotificationGroupTypeMentions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationGroupTypeSecretChat extends NotificationGroupType {
  String get tlType => 'notificationGroupTypeSecretChat';

  string? extra;
  int? client_id;

  NotificationGroupTypeSecretChat({
    string? this.extra,
    int? this.client_id,
  });

  NotificationGroupTypeSecretChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationGroupTypeCalls extends NotificationGroupType {
  String get tlType => 'notificationGroupTypeCalls';

  string? extra;
  int? client_id;

  NotificationGroupTypeCalls({
    string? this.extra,
    int? this.client_id,
  });

  NotificationGroupTypeCalls.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Notification extends TdObject {
  String get tlType => 'notification';

  string? extra;
  int? client_id;
  int32? id;
  int32? date;
  Bool? is_silent;
  NotificationType? type;

  Notification({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    int32? this.date,
    Bool? this.is_silent,
    NotificationType? this.type,
  });

  Notification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    date = map.containsKey('date') ? map['date'] : null;
    is_silent = map.containsKey('is_silent') ? map['is_silent'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as NotificationType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'is_silent': is_silent?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NotificationGroup extends TdObject {
  String get tlType => 'notificationGroup';

  string? extra;
  int? client_id;
  int32? id;
  NotificationGroupType? type;
  int53? chat_id;
  int32? total_count;
  vector<Notification>? notifications;

  NotificationGroup({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    NotificationGroupType? this.type,
    int53? this.chat_id,
    int32? this.total_count,
    vector<Notification>? this.notifications,
  });

  NotificationGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as NotificationGroupType
        : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('notifications') && map['notifications'] != null) {
      notifications = [];
      var someValues = map['notifications'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Notification;
        notifications?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'notifications': notifications?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class OptionValueBoolean extends OptionValue {
  String get tlType => 'optionValueBoolean';

  string? extra;
  int? client_id;
  Bool? value;

  OptionValueBoolean({
    string? this.extra,
    int? this.client_id,
    Bool? this.value,
  });

  OptionValueBoolean.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class OptionValueEmpty extends OptionValue {
  String get tlType => 'optionValueEmpty';

  string? extra;
  int? client_id;

  OptionValueEmpty({
    string? this.extra,
    int? this.client_id,
  });

  OptionValueEmpty.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class OptionValueInteger extends OptionValue {
  String get tlType => 'optionValueInteger';

  string? extra;
  int? client_id;
  int64? value;

  OptionValueInteger({
    string? this.extra,
    int? this.client_id,
    int64? this.value,
  });

  OptionValueInteger.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class OptionValueString extends OptionValue {
  String get tlType => 'optionValueString';

  string? extra;
  int? client_id;
  string? value;

  OptionValueString({
    string? this.extra,
    int? this.client_id,
    string? this.value,
  });

  OptionValueString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JsonObjectMember extends TdObject {
  String get tlType => 'jsonObjectMember';

  string? extra;
  int? client_id;
  string? key;
  JsonValue? value;

  JsonObjectMember({
    string? this.extra,
    int? this.client_id,
    string? this.key,
    JsonValue? this.value,
  });

  JsonObjectMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    key = map.containsKey('key') ? map['key'] : null;
    value = map.containsKey('value')
        ? TlMap.fromMap(map['value']) as JsonValue
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'key': key?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JsonValueNull extends JsonValue {
  String get tlType => 'jsonValueNull';

  string? extra;
  int? client_id;

  JsonValueNull({
    string? this.extra,
    int? this.client_id,
  });

  JsonValueNull.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JsonValueBoolean extends JsonValue {
  String get tlType => 'jsonValueBoolean';

  string? extra;
  int? client_id;
  Bool? value;

  JsonValueBoolean({
    string? this.extra,
    int? this.client_id,
    Bool? this.value,
  });

  JsonValueBoolean.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JsonValueNumber extends JsonValue {
  String get tlType => 'jsonValueNumber';

  string? extra;
  int? client_id;
  double? value;

  JsonValueNumber({
    string? this.extra,
    int? this.client_id,
    double? this.value,
  });

  JsonValueNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JsonValueString extends JsonValue {
  String get tlType => 'jsonValueString';

  string? extra;
  int? client_id;
  string? value;

  JsonValueString({
    string? this.extra,
    int? this.client_id,
    string? this.value,
  });

  JsonValueString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JsonValueArray extends JsonValue {
  String get tlType => 'jsonValueArray';

  string? extra;
  int? client_id;
  vector<JsonValue>? values;

  JsonValueArray({
    string? this.extra,
    int? this.client_id,
    vector<JsonValue>? this.values,
  });

  JsonValueArray.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('values') && map['values'] != null) {
      values = [];
      var someValues = map['values'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as JsonValue;
        values?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'values': values?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JsonValueObject extends JsonValue {
  String get tlType => 'jsonValueObject';

  string? extra;
  int? client_id;
  vector<JsonObjectMember>? members;

  JsonValueObject({
    string? this.extra,
    int? this.client_id,
    vector<JsonObjectMember>? this.members,
  });

  JsonValueObject.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('members') && map['members'] != null) {
      members = [];
      var someValues = map['members'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as JsonObjectMember;
        members?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'members': members?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRuleAllowAll extends UserPrivacySettingRule {
  String get tlType => 'userPrivacySettingRuleAllowAll';

  string? extra;
  int? client_id;

  UserPrivacySettingRuleAllowAll({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingRuleAllowAll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRuleAllowContacts extends UserPrivacySettingRule {
  String get tlType => 'userPrivacySettingRuleAllowContacts';

  string? extra;
  int? client_id;

  UserPrivacySettingRuleAllowContacts({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingRuleAllowContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRuleAllowUsers extends UserPrivacySettingRule {
  String get tlType => 'userPrivacySettingRuleAllowUsers';

  string? extra;
  int? client_id;
  vector<int53>? user_ids;

  UserPrivacySettingRuleAllowUsers({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.user_ids,
  });

  UserPrivacySettingRuleAllowUsers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRuleAllowChatMembers extends UserPrivacySettingRule {
  String get tlType => 'userPrivacySettingRuleAllowChatMembers';

  string? extra;
  int? client_id;
  vector<int53>? chat_ids;

  UserPrivacySettingRuleAllowChatMembers({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.chat_ids,
  });

  UserPrivacySettingRuleAllowChatMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('chat_ids') && map['chat_ids'] != null) {
      chat_ids = [];
      var someValues = map['chat_ids'];
      for (var someValue in someValues) {
        chat_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_ids': chat_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRuleRestrictAll extends UserPrivacySettingRule {
  String get tlType => 'userPrivacySettingRuleRestrictAll';

  string? extra;
  int? client_id;

  UserPrivacySettingRuleRestrictAll({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingRuleRestrictAll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRuleRestrictContacts extends UserPrivacySettingRule {
  String get tlType => 'userPrivacySettingRuleRestrictContacts';

  string? extra;
  int? client_id;

  UserPrivacySettingRuleRestrictContacts({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingRuleRestrictContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRuleRestrictUsers extends UserPrivacySettingRule {
  String get tlType => 'userPrivacySettingRuleRestrictUsers';

  string? extra;
  int? client_id;
  vector<int53>? user_ids;

  UserPrivacySettingRuleRestrictUsers({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.user_ids,
  });

  UserPrivacySettingRuleRestrictUsers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRuleRestrictChatMembers extends UserPrivacySettingRule {
  String get tlType => 'userPrivacySettingRuleRestrictChatMembers';

  string? extra;
  int? client_id;
  vector<int53>? chat_ids;

  UserPrivacySettingRuleRestrictChatMembers({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.chat_ids,
  });

  UserPrivacySettingRuleRestrictChatMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('chat_ids') && map['chat_ids'] != null) {
      chat_ids = [];
      var someValues = map['chat_ids'];
      for (var someValue in someValues) {
        chat_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_ids': chat_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingRules extends TdObject {
  String get tlType => 'userPrivacySettingRules';

  string? extra;
  int? client_id;
  vector<UserPrivacySettingRule>? rules;

  UserPrivacySettingRules({
    string? this.extra,
    int? this.client_id,
    vector<UserPrivacySettingRule>? this.rules,
  });

  UserPrivacySettingRules.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('rules') && map['rules'] != null) {
      rules = [];
      var someValues = map['rules'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as UserPrivacySettingRule;
        rules?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'rules': rules?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingShowStatus extends UserPrivacySetting {
  String get tlType => 'userPrivacySettingShowStatus';

  string? extra;
  int? client_id;

  UserPrivacySettingShowStatus({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingShowStatus.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingShowProfilePhoto extends UserPrivacySetting {
  String get tlType => 'userPrivacySettingShowProfilePhoto';

  string? extra;
  int? client_id;

  UserPrivacySettingShowProfilePhoto({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingShowProfilePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingShowLinkInForwardedMessages extends UserPrivacySetting {
  String get tlType => 'userPrivacySettingShowLinkInForwardedMessages';

  string? extra;
  int? client_id;

  UserPrivacySettingShowLinkInForwardedMessages({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingShowLinkInForwardedMessages.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingShowPhoneNumber extends UserPrivacySetting {
  String get tlType => 'userPrivacySettingShowPhoneNumber';

  string? extra;
  int? client_id;

  UserPrivacySettingShowPhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingShowPhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingAllowChatInvites extends UserPrivacySetting {
  String get tlType => 'userPrivacySettingAllowChatInvites';

  string? extra;
  int? client_id;

  UserPrivacySettingAllowChatInvites({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingAllowChatInvites.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingAllowCalls extends UserPrivacySetting {
  String get tlType => 'userPrivacySettingAllowCalls';

  string? extra;
  int? client_id;

  UserPrivacySettingAllowCalls({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingAllowCalls.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingAllowPeerToPeerCalls extends UserPrivacySetting {
  String get tlType => 'userPrivacySettingAllowPeerToPeerCalls';

  string? extra;
  int? client_id;

  UserPrivacySettingAllowPeerToPeerCalls({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingAllowPeerToPeerCalls.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UserPrivacySettingAllowFindingByPhoneNumber extends UserPrivacySetting {
  String get tlType => 'userPrivacySettingAllowFindingByPhoneNumber';

  string? extra;
  int? client_id;

  UserPrivacySettingAllowFindingByPhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  UserPrivacySettingAllowFindingByPhoneNumber.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AccountTtl extends TdObject {
  String get tlType => 'accountTtl';

  string? extra;
  int? client_id;
  int32? days;

  AccountTtl({
    string? this.extra,
    int? this.client_id,
    int32? this.days,
  });

  AccountTtl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    days = map.containsKey('days') ? map['days'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'days': days?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Session extends TdObject {
  String get tlType => 'session';

  string? extra;
  int? client_id;
  int64? id;
  Bool? is_current;
  Bool? is_password_pending;
  Bool? can_accept_secret_chats;
  Bool? can_accept_calls;
  int32? api_id;
  string? application_name;
  string? application_version;
  Bool? is_official_application;
  string? device_model;
  string? platform;
  string? system_version;
  int32? log_in_date;
  int32? last_active_date;
  string? ip;
  string? country;
  string? region;

  Session({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    Bool? this.is_current,
    Bool? this.is_password_pending,
    Bool? this.can_accept_secret_chats,
    Bool? this.can_accept_calls,
    int32? this.api_id,
    string? this.application_name,
    string? this.application_version,
    Bool? this.is_official_application,
    string? this.device_model,
    string? this.platform,
    string? this.system_version,
    int32? this.log_in_date,
    int32? this.last_active_date,
    string? this.ip,
    string? this.country,
    string? this.region,
  });

  Session.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    is_current = map.containsKey('is_current') ? map['is_current'] : null;
    is_password_pending = map.containsKey('is_password_pending')
        ? map['is_password_pending']
        : null;
    can_accept_secret_chats = map.containsKey('can_accept_secret_chats')
        ? map['can_accept_secret_chats']
        : null;
    can_accept_calls =
        map.containsKey('can_accept_calls') ? map['can_accept_calls'] : null;
    api_id = map.containsKey('api_id') ? map['api_id'] : null;
    application_name =
        map.containsKey('application_name') ? map['application_name'] : null;
    application_version = map.containsKey('application_version')
        ? map['application_version']
        : null;
    is_official_application = map.containsKey('is_official_application')
        ? map['is_official_application']
        : null;
    device_model = map.containsKey('device_model') ? map['device_model'] : null;
    platform = map.containsKey('platform') ? map['platform'] : null;
    system_version =
        map.containsKey('system_version') ? map['system_version'] : null;
    log_in_date = map.containsKey('log_in_date') ? map['log_in_date'] : null;
    last_active_date =
        map.containsKey('last_active_date') ? map['last_active_date'] : null;
    ip = map.containsKey('ip') ? map['ip'] : null;
    country = map.containsKey('country') ? map['country'] : null;
    region = map.containsKey('region') ? map['region'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'is_current': is_current?.toMap(skipNulls: skipNulls),
      'is_password_pending': is_password_pending?.toMap(skipNulls: skipNulls),
      'can_accept_secret_chats':
          can_accept_secret_chats?.toMap(skipNulls: skipNulls),
      'can_accept_calls': can_accept_calls?.toMap(skipNulls: skipNulls),
      'api_id': api_id?.toMap(skipNulls: skipNulls),
      'application_name': application_name?.toMap(skipNulls: skipNulls),
      'application_version': application_version?.toMap(skipNulls: skipNulls),
      'is_official_application':
          is_official_application?.toMap(skipNulls: skipNulls),
      'device_model': device_model?.toMap(skipNulls: skipNulls),
      'platform': platform?.toMap(skipNulls: skipNulls),
      'system_version': system_version?.toMap(skipNulls: skipNulls),
      'log_in_date': log_in_date?.toMap(skipNulls: skipNulls),
      'last_active_date': last_active_date?.toMap(skipNulls: skipNulls),
      'ip': ip?.toMap(skipNulls: skipNulls),
      'country': country?.toMap(skipNulls: skipNulls),
      'region': region?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Sessions extends TdObject {
  String get tlType => 'sessions';

  string? extra;
  int? client_id;
  vector<Session>? sessions;
  int32? inactive_session_ttl_days;

  Sessions({
    string? this.extra,
    int? this.client_id,
    vector<Session>? this.sessions,
    int32? this.inactive_session_ttl_days,
  });

  Sessions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('sessions') && map['sessions'] != null) {
      sessions = [];
      var someValues = map['sessions'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Session;
        sessions?.add(obj);
      }
    }
    inactive_session_ttl_days = map.containsKey('inactive_session_ttl_days')
        ? map['inactive_session_ttl_days']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sessions': sessions?.toMap(skipNulls: skipNulls),
      'inactive_session_ttl_days':
          inactive_session_ttl_days?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ConnectedWebsite extends TdObject {
  String get tlType => 'connectedWebsite';

  string? extra;
  int? client_id;
  int64? id;
  string? domain_name;
  int53? bot_user_id;
  string? browser;
  string? platform;
  int32? log_in_date;
  int32? last_active_date;
  string? ip;
  string? location;

  ConnectedWebsite({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    string? this.domain_name,
    int53? this.bot_user_id,
    string? this.browser,
    string? this.platform,
    int32? this.log_in_date,
    int32? this.last_active_date,
    string? this.ip,
    string? this.location,
  });

  ConnectedWebsite.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    domain_name = map.containsKey('domain_name') ? map['domain_name'] : null;
    bot_user_id = map.containsKey('bot_user_id') ? map['bot_user_id'] : null;
    browser = map.containsKey('browser') ? map['browser'] : null;
    platform = map.containsKey('platform') ? map['platform'] : null;
    log_in_date = map.containsKey('log_in_date') ? map['log_in_date'] : null;
    last_active_date =
        map.containsKey('last_active_date') ? map['last_active_date'] : null;
    ip = map.containsKey('ip') ? map['ip'] : null;
    location = map.containsKey('location') ? map['location'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'domain_name': domain_name?.toMap(skipNulls: skipNulls),
      'bot_user_id': bot_user_id?.toMap(skipNulls: skipNulls),
      'browser': browser?.toMap(skipNulls: skipNulls),
      'platform': platform?.toMap(skipNulls: skipNulls),
      'log_in_date': log_in_date?.toMap(skipNulls: skipNulls),
      'last_active_date': last_active_date?.toMap(skipNulls: skipNulls),
      'ip': ip?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ConnectedWebsites extends TdObject {
  String get tlType => 'connectedWebsites';

  string? extra;
  int? client_id;
  vector<ConnectedWebsite>? websites;

  ConnectedWebsites({
    string? this.extra,
    int? this.client_id,
    vector<ConnectedWebsite>? this.websites,
  });

  ConnectedWebsites.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('websites') && map['websites'] != null) {
      websites = [];
      var someValues = map['websites'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ConnectedWebsite;
        websites?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'websites': websites?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatReportReasonSpam extends ChatReportReason {
  String get tlType => 'chatReportReasonSpam';

  string? extra;
  int? client_id;

  ChatReportReasonSpam({
    string? this.extra,
    int? this.client_id,
  });

  ChatReportReasonSpam.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatReportReasonViolence extends ChatReportReason {
  String get tlType => 'chatReportReasonViolence';

  string? extra;
  int? client_id;

  ChatReportReasonViolence({
    string? this.extra,
    int? this.client_id,
  });

  ChatReportReasonViolence.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatReportReasonPornography extends ChatReportReason {
  String get tlType => 'chatReportReasonPornography';

  string? extra;
  int? client_id;

  ChatReportReasonPornography({
    string? this.extra,
    int? this.client_id,
  });

  ChatReportReasonPornography.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatReportReasonChildAbuse extends ChatReportReason {
  String get tlType => 'chatReportReasonChildAbuse';

  string? extra;
  int? client_id;

  ChatReportReasonChildAbuse({
    string? this.extra,
    int? this.client_id,
  });

  ChatReportReasonChildAbuse.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatReportReasonCopyright extends ChatReportReason {
  String get tlType => 'chatReportReasonCopyright';

  string? extra;
  int? client_id;

  ChatReportReasonCopyright({
    string? this.extra,
    int? this.client_id,
  });

  ChatReportReasonCopyright.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatReportReasonUnrelatedLocation extends ChatReportReason {
  String get tlType => 'chatReportReasonUnrelatedLocation';

  string? extra;
  int? client_id;

  ChatReportReasonUnrelatedLocation({
    string? this.extra,
    int? this.client_id,
  });

  ChatReportReasonUnrelatedLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatReportReasonFake extends ChatReportReason {
  String get tlType => 'chatReportReasonFake';

  string? extra;
  int? client_id;

  ChatReportReasonFake({
    string? this.extra,
    int? this.client_id,
  });

  ChatReportReasonFake.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatReportReasonCustom extends ChatReportReason {
  String get tlType => 'chatReportReasonCustom';

  string? extra;
  int? client_id;

  ChatReportReasonCustom({
    string? this.extra,
    int? this.client_id,
  });

  ChatReportReasonCustom.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeActiveSessions extends InternalLinkType {
  String get tlType => 'internalLinkTypeActiveSessions';

  string? extra;
  int? client_id;

  InternalLinkTypeActiveSessions({
    string? this.extra,
    int? this.client_id,
  });

  InternalLinkTypeActiveSessions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeAuthenticationCode extends InternalLinkType {
  String get tlType => 'internalLinkTypeAuthenticationCode';

  string? extra;
  int? client_id;
  string? code;

  InternalLinkTypeAuthenticationCode({
    string? this.extra,
    int? this.client_id,
    string? this.code,
  });

  InternalLinkTypeAuthenticationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code = map.containsKey('code') ? map['code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code': code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeBackground extends InternalLinkType {
  String get tlType => 'internalLinkTypeBackground';

  string? extra;
  int? client_id;
  string? background_name;

  InternalLinkTypeBackground({
    string? this.extra,
    int? this.client_id,
    string? this.background_name,
  });

  InternalLinkTypeBackground.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    background_name =
        map.containsKey('background_name') ? map['background_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'background_name': background_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeBotStart extends InternalLinkType {
  String get tlType => 'internalLinkTypeBotStart';

  string? extra;
  int? client_id;
  string? bot_username;
  string? start_parameter;

  InternalLinkTypeBotStart({
    string? this.extra,
    int? this.client_id,
    string? this.bot_username,
    string? this.start_parameter,
  });

  InternalLinkTypeBotStart.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_username = map.containsKey('bot_username') ? map['bot_username'] : null;
    start_parameter =
        map.containsKey('start_parameter') ? map['start_parameter'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_username': bot_username?.toMap(skipNulls: skipNulls),
      'start_parameter': start_parameter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeBotStartInGroup extends InternalLinkType {
  String get tlType => 'internalLinkTypeBotStartInGroup';

  string? extra;
  int? client_id;
  string? bot_username;
  string? start_parameter;

  InternalLinkTypeBotStartInGroup({
    string? this.extra,
    int? this.client_id,
    string? this.bot_username,
    string? this.start_parameter,
  });

  InternalLinkTypeBotStartInGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_username = map.containsKey('bot_username') ? map['bot_username'] : null;
    start_parameter =
        map.containsKey('start_parameter') ? map['start_parameter'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_username': bot_username?.toMap(skipNulls: skipNulls),
      'start_parameter': start_parameter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeChangePhoneNumber extends InternalLinkType {
  String get tlType => 'internalLinkTypeChangePhoneNumber';

  string? extra;
  int? client_id;

  InternalLinkTypeChangePhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  InternalLinkTypeChangePhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeChatInvite extends InternalLinkType {
  String get tlType => 'internalLinkTypeChatInvite';

  string? extra;
  int? client_id;
  string? invite_link;

  InternalLinkTypeChatInvite({
    string? this.extra,
    int? this.client_id,
    string? this.invite_link,
  });

  InternalLinkTypeChatInvite.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeFilterSettings extends InternalLinkType {
  String get tlType => 'internalLinkTypeFilterSettings';

  string? extra;
  int? client_id;

  InternalLinkTypeFilterSettings({
    string? this.extra,
    int? this.client_id,
  });

  InternalLinkTypeFilterSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeGame extends InternalLinkType {
  String get tlType => 'internalLinkTypeGame';

  string? extra;
  int? client_id;
  string? bot_username;
  string? game_short_name;

  InternalLinkTypeGame({
    string? this.extra,
    int? this.client_id,
    string? this.bot_username,
    string? this.game_short_name,
  });

  InternalLinkTypeGame.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_username = map.containsKey('bot_username') ? map['bot_username'] : null;
    game_short_name =
        map.containsKey('game_short_name') ? map['game_short_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_username': bot_username?.toMap(skipNulls: skipNulls),
      'game_short_name': game_short_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeLanguagePack extends InternalLinkType {
  String get tlType => 'internalLinkTypeLanguagePack';

  string? extra;
  int? client_id;
  string? language_pack_id;

  InternalLinkTypeLanguagePack({
    string? this.extra,
    int? this.client_id,
    string? this.language_pack_id,
  });

  InternalLinkTypeLanguagePack.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeMessage extends InternalLinkType {
  String get tlType => 'internalLinkTypeMessage';

  string? extra;
  int? client_id;
  string? url;

  InternalLinkTypeMessage({
    string? this.extra,
    int? this.client_id,
    string? this.url,
  });

  InternalLinkTypeMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeMessageDraft extends InternalLinkType {
  String get tlType => 'internalLinkTypeMessageDraft';

  string? extra;
  int? client_id;
  FormattedText? text;
  Bool? contains_link;

  InternalLinkTypeMessageDraft({
    string? this.extra,
    int? this.client_id,
    FormattedText? this.text,
    Bool? this.contains_link,
  });

  InternalLinkTypeMessageDraft.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
    contains_link =
        map.containsKey('contains_link') ? map['contains_link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'contains_link': contains_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypePassportDataRequest extends InternalLinkType {
  String get tlType => 'internalLinkTypePassportDataRequest';

  string? extra;
  int? client_id;
  int53? bot_user_id;
  string? scope;
  string? public_key;
  string? nonce;
  string? callback_url;

  InternalLinkTypePassportDataRequest({
    string? this.extra,
    int? this.client_id,
    int53? this.bot_user_id,
    string? this.scope,
    string? this.public_key,
    string? this.nonce,
    string? this.callback_url,
  });

  InternalLinkTypePassportDataRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_user_id = map.containsKey('bot_user_id') ? map['bot_user_id'] : null;
    scope = map.containsKey('scope') ? map['scope'] : null;
    public_key = map.containsKey('public_key') ? map['public_key'] : null;
    nonce = map.containsKey('nonce') ? map['nonce'] : null;
    callback_url = map.containsKey('callback_url') ? map['callback_url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_user_id': bot_user_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
      'public_key': public_key?.toMap(skipNulls: skipNulls),
      'nonce': nonce?.toMap(skipNulls: skipNulls),
      'callback_url': callback_url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypePhoneNumberConfirmation extends InternalLinkType {
  String get tlType => 'internalLinkTypePhoneNumberConfirmation';

  string? extra;
  int? client_id;
  string? hash;
  string? phone_number;

  InternalLinkTypePhoneNumberConfirmation({
    string? this.extra,
    int? this.client_id,
    string? this.hash,
    string? this.phone_number,
  });

  InternalLinkTypePhoneNumberConfirmation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    hash = map.containsKey('hash') ? map['hash'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'hash': hash?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeProxy extends InternalLinkType {
  String get tlType => 'internalLinkTypeProxy';

  string? extra;
  int? client_id;
  string? server;
  int32? port;
  ProxyType? type;

  InternalLinkTypeProxy({
    string? this.extra,
    int? this.client_id,
    string? this.server,
    int32? this.port,
    ProxyType? this.type,
  });

  InternalLinkTypeProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    server = map.containsKey('server') ? map['server'] : null;
    port = map.containsKey('port') ? map['port'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as ProxyType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'server': server?.toMap(skipNulls: skipNulls),
      'port': port?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypePublicChat extends InternalLinkType {
  String get tlType => 'internalLinkTypePublicChat';

  string? extra;
  int? client_id;
  string? chat_username;

  InternalLinkTypePublicChat({
    string? this.extra,
    int? this.client_id,
    string? this.chat_username,
  });

  InternalLinkTypePublicChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_username =
        map.containsKey('chat_username') ? map['chat_username'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_username': chat_username?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeQrCodeAuthentication extends InternalLinkType {
  String get tlType => 'internalLinkTypeQrCodeAuthentication';

  string? extra;
  int? client_id;

  InternalLinkTypeQrCodeAuthentication({
    string? this.extra,
    int? this.client_id,
  });

  InternalLinkTypeQrCodeAuthentication.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeSettings extends InternalLinkType {
  String get tlType => 'internalLinkTypeSettings';

  string? extra;
  int? client_id;

  InternalLinkTypeSettings({
    string? this.extra,
    int? this.client_id,
  });

  InternalLinkTypeSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeStickerSet extends InternalLinkType {
  String get tlType => 'internalLinkTypeStickerSet';

  string? extra;
  int? client_id;
  string? sticker_set_name;

  InternalLinkTypeStickerSet({
    string? this.extra,
    int? this.client_id,
    string? this.sticker_set_name,
  });

  InternalLinkTypeStickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker_set_name =
        map.containsKey('sticker_set_name') ? map['sticker_set_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker_set_name': sticker_set_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeTheme extends InternalLinkType {
  String get tlType => 'internalLinkTypeTheme';

  string? extra;
  int? client_id;
  string? theme_name;

  InternalLinkTypeTheme({
    string? this.extra,
    int? this.client_id,
    string? this.theme_name,
  });

  InternalLinkTypeTheme.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    theme_name = map.containsKey('theme_name') ? map['theme_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'theme_name': theme_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeThemeSettings extends InternalLinkType {
  String get tlType => 'internalLinkTypeThemeSettings';

  string? extra;
  int? client_id;

  InternalLinkTypeThemeSettings({
    string? this.extra,
    int? this.client_id,
  });

  InternalLinkTypeThemeSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeUnknownDeepLink extends InternalLinkType {
  String get tlType => 'internalLinkTypeUnknownDeepLink';

  string? extra;
  int? client_id;
  string? link;

  InternalLinkTypeUnknownDeepLink({
    string? this.extra,
    int? this.client_id,
    string? this.link,
  });

  InternalLinkTypeUnknownDeepLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    link = map.containsKey('link') ? map['link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeUnsupportedProxy extends InternalLinkType {
  String get tlType => 'internalLinkTypeUnsupportedProxy';

  string? extra;
  int? client_id;

  InternalLinkTypeUnsupportedProxy({
    string? this.extra,
    int? this.client_id,
  });

  InternalLinkTypeUnsupportedProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InternalLinkTypeVideoChat extends InternalLinkType {
  String get tlType => 'internalLinkTypeVideoChat';

  string? extra;
  int? client_id;
  string? chat_username;
  string? invite_hash;
  Bool? is_live_stream;

  InternalLinkTypeVideoChat({
    string? this.extra,
    int? this.client_id,
    string? this.chat_username,
    string? this.invite_hash,
    Bool? this.is_live_stream,
  });

  InternalLinkTypeVideoChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_username =
        map.containsKey('chat_username') ? map['chat_username'] : null;
    invite_hash = map.containsKey('invite_hash') ? map['invite_hash'] : null;
    is_live_stream =
        map.containsKey('is_live_stream') ? map['is_live_stream'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_username': chat_username?.toMap(skipNulls: skipNulls),
      'invite_hash': invite_hash?.toMap(skipNulls: skipNulls),
      'is_live_stream': is_live_stream?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageLink extends TdObject {
  String get tlType => 'messageLink';

  string? extra;
  int? client_id;
  string? link;
  Bool? is_public;

  MessageLink({
    string? this.extra,
    int? this.client_id,
    string? this.link,
    Bool? this.is_public,
  });

  MessageLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    link = map.containsKey('link') ? map['link'] : null;
    is_public = map.containsKey('is_public') ? map['is_public'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
      'is_public': is_public?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageLinkInfo extends TdObject {
  String get tlType => 'messageLinkInfo';

  string? extra;
  int? client_id;
  Bool? is_public;
  int53? chat_id;
  Message? message;
  int32? media_timestamp;
  Bool? for_album;
  Bool? for_comment;

  MessageLinkInfo({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_public,
    int53? this.chat_id,
    Message? this.message,
    int32? this.media_timestamp,
    Bool? this.for_album,
    Bool? this.for_comment,
  });

  MessageLinkInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_public = map.containsKey('is_public') ? map['is_public'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
    media_timestamp =
        map.containsKey('media_timestamp') ? map['media_timestamp'] : null;
    for_album = map.containsKey('for_album') ? map['for_album'] : null;
    for_comment = map.containsKey('for_comment') ? map['for_comment'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_public': is_public?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
      'media_timestamp': media_timestamp?.toMap(skipNulls: skipNulls),
      'for_album': for_album?.toMap(skipNulls: skipNulls),
      'for_comment': for_comment?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FilePart extends TdObject {
  String get tlType => 'filePart';

  string? extra;
  int? client_id;
  bytes? data;

  FilePart({
    string? this.extra,
    int? this.client_id,
    bytes? this.data,
  });

  FilePart.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeNone extends FileType {
  String get tlType => 'fileTypeNone';

  string? extra;
  int? client_id;

  FileTypeNone({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeNone.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeAnimation extends FileType {
  String get tlType => 'fileTypeAnimation';

  string? extra;
  int? client_id;

  FileTypeAnimation({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeAudio extends FileType {
  String get tlType => 'fileTypeAudio';

  string? extra;
  int? client_id;

  FileTypeAudio({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeAudio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeDocument extends FileType {
  String get tlType => 'fileTypeDocument';

  string? extra;
  int? client_id;

  FileTypeDocument({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeDocument.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypePhoto extends FileType {
  String get tlType => 'fileTypePhoto';

  string? extra;
  int? client_id;

  FileTypePhoto({
    string? this.extra,
    int? this.client_id,
  });

  FileTypePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeProfilePhoto extends FileType {
  String get tlType => 'fileTypeProfilePhoto';

  string? extra;
  int? client_id;

  FileTypeProfilePhoto({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeProfilePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeSecret extends FileType {
  String get tlType => 'fileTypeSecret';

  string? extra;
  int? client_id;

  FileTypeSecret({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeSecret.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeSecretThumbnail extends FileType {
  String get tlType => 'fileTypeSecretThumbnail';

  string? extra;
  int? client_id;

  FileTypeSecretThumbnail({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeSecretThumbnail.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeSecure extends FileType {
  String get tlType => 'fileTypeSecure';

  string? extra;
  int? client_id;

  FileTypeSecure({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeSecure.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeSticker extends FileType {
  String get tlType => 'fileTypeSticker';

  string? extra;
  int? client_id;

  FileTypeSticker({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeThumbnail extends FileType {
  String get tlType => 'fileTypeThumbnail';

  string? extra;
  int? client_id;

  FileTypeThumbnail({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeThumbnail.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeUnknown extends FileType {
  String get tlType => 'fileTypeUnknown';

  string? extra;
  int? client_id;

  FileTypeUnknown({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeUnknown.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeVideo extends FileType {
  String get tlType => 'fileTypeVideo';

  string? extra;
  int? client_id;

  FileTypeVideo({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeVideo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeVideoNote extends FileType {
  String get tlType => 'fileTypeVideoNote';

  string? extra;
  int? client_id;

  FileTypeVideoNote({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeVideoNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeVoiceNote extends FileType {
  String get tlType => 'fileTypeVoiceNote';

  string? extra;
  int? client_id;

  FileTypeVoiceNote({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeVoiceNote.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FileTypeWallpaper extends FileType {
  String get tlType => 'fileTypeWallpaper';

  string? extra;
  int? client_id;

  FileTypeWallpaper({
    string? this.extra,
    int? this.client_id,
  });

  FileTypeWallpaper.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StorageStatisticsByFileType extends TdObject {
  String get tlType => 'storageStatisticsByFileType';

  string? extra;
  int? client_id;
  FileType? file_type;
  int53? size;
  int32? count;

  StorageStatisticsByFileType({
    string? this.extra,
    int? this.client_id,
    FileType? this.file_type,
    int53? this.size,
    int32? this.count,
  });

  StorageStatisticsByFileType.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_type = map.containsKey('file_type')
        ? TlMap.fromMap(map['file_type']) as FileType
        : null;
    size = map.containsKey('size') ? map['size'] : null;
    count = map.containsKey('count') ? map['count'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_type': file_type?.toMap(skipNulls: skipNulls),
      'size': size?.toMap(skipNulls: skipNulls),
      'count': count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StorageStatisticsByChat extends TdObject {
  String get tlType => 'storageStatisticsByChat';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? size;
  int32? count;
  vector<StorageStatisticsByFileType>? by_file_type;

  StorageStatisticsByChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.size,
    int32? this.count,
    vector<StorageStatisticsByFileType>? this.by_file_type,
  });

  StorageStatisticsByChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    size = map.containsKey('size') ? map['size'] : null;
    count = map.containsKey('count') ? map['count'] : null;
    if (map.containsKey('by_file_type') && map['by_file_type'] != null) {
      by_file_type = [];
      var someValues = map['by_file_type'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as StorageStatisticsByFileType;
        by_file_type?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'size': size?.toMap(skipNulls: skipNulls),
      'count': count?.toMap(skipNulls: skipNulls),
      'by_file_type': by_file_type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StorageStatistics extends TdObject {
  String get tlType => 'storageStatistics';

  string? extra;
  int? client_id;
  int53? size;
  int32? count;
  vector<StorageStatisticsByChat>? by_chat;

  StorageStatistics({
    string? this.extra,
    int? this.client_id,
    int53? this.size,
    int32? this.count,
    vector<StorageStatisticsByChat>? this.by_chat,
  });

  StorageStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    size = map.containsKey('size') ? map['size'] : null;
    count = map.containsKey('count') ? map['count'] : null;
    if (map.containsKey('by_chat') && map['by_chat'] != null) {
      by_chat = [];
      var someValues = map['by_chat'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as StorageStatisticsByChat;
        by_chat?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'size': size?.toMap(skipNulls: skipNulls),
      'count': count?.toMap(skipNulls: skipNulls),
      'by_chat': by_chat?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StorageStatisticsFast extends TdObject {
  String get tlType => 'storageStatisticsFast';

  string? extra;
  int? client_id;
  int53? files_size;
  int32? file_count;
  int53? database_size;
  int53? language_pack_database_size;
  int53? log_size;

  StorageStatisticsFast({
    string? this.extra,
    int? this.client_id,
    int53? this.files_size,
    int32? this.file_count,
    int53? this.database_size,
    int53? this.language_pack_database_size,
    int53? this.log_size,
  });

  StorageStatisticsFast.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    files_size = map.containsKey('files_size') ? map['files_size'] : null;
    file_count = map.containsKey('file_count') ? map['file_count'] : null;
    database_size =
        map.containsKey('database_size') ? map['database_size'] : null;
    language_pack_database_size = map.containsKey('language_pack_database_size')
        ? map['language_pack_database_size']
        : null;
    log_size = map.containsKey('log_size') ? map['log_size'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'files_size': files_size?.toMap(skipNulls: skipNulls),
      'file_count': file_count?.toMap(skipNulls: skipNulls),
      'database_size': database_size?.toMap(skipNulls: skipNulls),
      'language_pack_database_size':
          language_pack_database_size?.toMap(skipNulls: skipNulls),
      'log_size': log_size?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DatabaseStatistics extends TdObject {
  String get tlType => 'databaseStatistics';

  string? extra;
  int? client_id;
  string? statistics;

  DatabaseStatistics({
    string? this.extra,
    int? this.client_id,
    string? this.statistics,
  });

  DatabaseStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    statistics = map.containsKey('statistics') ? map['statistics'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'statistics': statistics?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NetworkTypeNone extends NetworkType {
  String get tlType => 'networkTypeNone';

  string? extra;
  int? client_id;

  NetworkTypeNone({
    string? this.extra,
    int? this.client_id,
  });

  NetworkTypeNone.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NetworkTypeMobile extends NetworkType {
  String get tlType => 'networkTypeMobile';

  string? extra;
  int? client_id;

  NetworkTypeMobile({
    string? this.extra,
    int? this.client_id,
  });

  NetworkTypeMobile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NetworkTypeMobileRoaming extends NetworkType {
  String get tlType => 'networkTypeMobileRoaming';

  string? extra;
  int? client_id;

  NetworkTypeMobileRoaming({
    string? this.extra,
    int? this.client_id,
  });

  NetworkTypeMobileRoaming.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NetworkTypeWiFi extends NetworkType {
  String get tlType => 'networkTypeWiFi';

  string? extra;
  int? client_id;

  NetworkTypeWiFi({
    string? this.extra,
    int? this.client_id,
  });

  NetworkTypeWiFi.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NetworkTypeOther extends NetworkType {
  String get tlType => 'networkTypeOther';

  string? extra;
  int? client_id;

  NetworkTypeOther({
    string? this.extra,
    int? this.client_id,
  });

  NetworkTypeOther.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NetworkStatisticsEntryFile extends NetworkStatisticsEntry {
  String get tlType => 'networkStatisticsEntryFile';

  string? extra;
  int? client_id;
  FileType? file_type;
  NetworkType? network_type;
  int53? sent_bytes;
  int53? received_bytes;

  NetworkStatisticsEntryFile({
    string? this.extra,
    int? this.client_id,
    FileType? this.file_type,
    NetworkType? this.network_type,
    int53? this.sent_bytes,
    int53? this.received_bytes,
  });

  NetworkStatisticsEntryFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_type = map.containsKey('file_type')
        ? TlMap.fromMap(map['file_type']) as FileType
        : null;
    network_type = map.containsKey('network_type')
        ? TlMap.fromMap(map['network_type']) as NetworkType
        : null;
    sent_bytes = map.containsKey('sent_bytes') ? map['sent_bytes'] : null;
    received_bytes =
        map.containsKey('received_bytes') ? map['received_bytes'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_type': file_type?.toMap(skipNulls: skipNulls),
      'network_type': network_type?.toMap(skipNulls: skipNulls),
      'sent_bytes': sent_bytes?.toMap(skipNulls: skipNulls),
      'received_bytes': received_bytes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NetworkStatisticsEntryCall extends NetworkStatisticsEntry {
  String get tlType => 'networkStatisticsEntryCall';

  string? extra;
  int? client_id;
  NetworkType? network_type;
  int53? sent_bytes;
  int53? received_bytes;
  double? duration;

  NetworkStatisticsEntryCall({
    string? this.extra,
    int? this.client_id,
    NetworkType? this.network_type,
    int53? this.sent_bytes,
    int53? this.received_bytes,
    double? this.duration,
  });

  NetworkStatisticsEntryCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    network_type = map.containsKey('network_type')
        ? TlMap.fromMap(map['network_type']) as NetworkType
        : null;
    sent_bytes = map.containsKey('sent_bytes') ? map['sent_bytes'] : null;
    received_bytes =
        map.containsKey('received_bytes') ? map['received_bytes'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'network_type': network_type?.toMap(skipNulls: skipNulls),
      'sent_bytes': sent_bytes?.toMap(skipNulls: skipNulls),
      'received_bytes': received_bytes?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class NetworkStatistics extends TdObject {
  String get tlType => 'networkStatistics';

  string? extra;
  int? client_id;
  int32? since_date;
  vector<NetworkStatisticsEntry>? entries;

  NetworkStatistics({
    string? this.extra,
    int? this.client_id,
    int32? this.since_date,
    vector<NetworkStatisticsEntry>? this.entries,
  });

  NetworkStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    since_date = map.containsKey('since_date') ? map['since_date'] : null;
    if (map.containsKey('entries') && map['entries'] != null) {
      entries = [];
      var someValues = map['entries'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as NetworkStatisticsEntry;
        entries?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'since_date': since_date?.toMap(skipNulls: skipNulls),
      'entries': entries?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AutoDownloadSettings extends TdObject {
  String get tlType => 'autoDownloadSettings';

  string? extra;
  int? client_id;
  Bool? is_auto_download_enabled;
  int32? max_photo_file_size;
  int32? max_video_file_size;
  int32? max_other_file_size;
  int32? video_upload_bitrate;
  Bool? preload_large_videos;
  Bool? preload_next_audio;
  Bool? use_less_data_for_calls;

  AutoDownloadSettings({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_auto_download_enabled,
    int32? this.max_photo_file_size,
    int32? this.max_video_file_size,
    int32? this.max_other_file_size,
    int32? this.video_upload_bitrate,
    Bool? this.preload_large_videos,
    Bool? this.preload_next_audio,
    Bool? this.use_less_data_for_calls,
  });

  AutoDownloadSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_auto_download_enabled = map.containsKey('is_auto_download_enabled')
        ? map['is_auto_download_enabled']
        : null;
    max_photo_file_size = map.containsKey('max_photo_file_size')
        ? map['max_photo_file_size']
        : null;
    max_video_file_size = map.containsKey('max_video_file_size')
        ? map['max_video_file_size']
        : null;
    max_other_file_size = map.containsKey('max_other_file_size')
        ? map['max_other_file_size']
        : null;
    video_upload_bitrate = map.containsKey('video_upload_bitrate')
        ? map['video_upload_bitrate']
        : null;
    preload_large_videos = map.containsKey('preload_large_videos')
        ? map['preload_large_videos']
        : null;
    preload_next_audio = map.containsKey('preload_next_audio')
        ? map['preload_next_audio']
        : null;
    use_less_data_for_calls = map.containsKey('use_less_data_for_calls')
        ? map['use_less_data_for_calls']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_auto_download_enabled':
          is_auto_download_enabled?.toMap(skipNulls: skipNulls),
      'max_photo_file_size': max_photo_file_size?.toMap(skipNulls: skipNulls),
      'max_video_file_size': max_video_file_size?.toMap(skipNulls: skipNulls),
      'max_other_file_size': max_other_file_size?.toMap(skipNulls: skipNulls),
      'video_upload_bitrate': video_upload_bitrate?.toMap(skipNulls: skipNulls),
      'preload_large_videos': preload_large_videos?.toMap(skipNulls: skipNulls),
      'preload_next_audio': preload_next_audio?.toMap(skipNulls: skipNulls),
      'use_less_data_for_calls':
          use_less_data_for_calls?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AutoDownloadSettingsPresets extends TdObject {
  String get tlType => 'autoDownloadSettingsPresets';

  string? extra;
  int? client_id;
  AutoDownloadSettings? low;
  AutoDownloadSettings? medium;
  AutoDownloadSettings? high;

  AutoDownloadSettingsPresets({
    string? this.extra,
    int? this.client_id,
    AutoDownloadSettings? this.low,
    AutoDownloadSettings? this.medium,
    AutoDownloadSettings? this.high,
  });

  AutoDownloadSettingsPresets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    low = map.containsKey('low')
        ? TlMap.fromMap(map['low']) as AutoDownloadSettings
        : null;
    medium = map.containsKey('medium')
        ? TlMap.fromMap(map['medium']) as AutoDownloadSettings
        : null;
    high = map.containsKey('high')
        ? TlMap.fromMap(map['high']) as AutoDownloadSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'low': low?.toMap(skipNulls: skipNulls),
      'medium': medium?.toMap(skipNulls: skipNulls),
      'high': high?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ConnectionStateWaitingForNetwork extends ConnectionState {
  String get tlType => 'connectionStateWaitingForNetwork';

  string? extra;
  int? client_id;

  ConnectionStateWaitingForNetwork({
    string? this.extra,
    int? this.client_id,
  });

  ConnectionStateWaitingForNetwork.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ConnectionStateConnectingToProxy extends ConnectionState {
  String get tlType => 'connectionStateConnectingToProxy';

  string? extra;
  int? client_id;

  ConnectionStateConnectingToProxy({
    string? this.extra,
    int? this.client_id,
  });

  ConnectionStateConnectingToProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ConnectionStateConnecting extends ConnectionState {
  String get tlType => 'connectionStateConnecting';

  string? extra;
  int? client_id;

  ConnectionStateConnecting({
    string? this.extra,
    int? this.client_id,
  });

  ConnectionStateConnecting.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ConnectionStateUpdating extends ConnectionState {
  String get tlType => 'connectionStateUpdating';

  string? extra;
  int? client_id;

  ConnectionStateUpdating({
    string? this.extra,
    int? this.client_id,
  });

  ConnectionStateUpdating.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ConnectionStateReady extends ConnectionState {
  String get tlType => 'connectionStateReady';

  string? extra;
  int? client_id;

  ConnectionStateReady({
    string? this.extra,
    int? this.client_id,
  });

  ConnectionStateReady.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TopChatCategoryUsers extends TopChatCategory {
  String get tlType => 'topChatCategoryUsers';

  string? extra;
  int? client_id;

  TopChatCategoryUsers({
    string? this.extra,
    int? this.client_id,
  });

  TopChatCategoryUsers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TopChatCategoryBots extends TopChatCategory {
  String get tlType => 'topChatCategoryBots';

  string? extra;
  int? client_id;

  TopChatCategoryBots({
    string? this.extra,
    int? this.client_id,
  });

  TopChatCategoryBots.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TopChatCategoryGroups extends TopChatCategory {
  String get tlType => 'topChatCategoryGroups';

  string? extra;
  int? client_id;

  TopChatCategoryGroups({
    string? this.extra,
    int? this.client_id,
  });

  TopChatCategoryGroups.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TopChatCategoryChannels extends TopChatCategory {
  String get tlType => 'topChatCategoryChannels';

  string? extra;
  int? client_id;

  TopChatCategoryChannels({
    string? this.extra,
    int? this.client_id,
  });

  TopChatCategoryChannels.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TopChatCategoryInlineBots extends TopChatCategory {
  String get tlType => 'topChatCategoryInlineBots';

  string? extra;
  int? client_id;

  TopChatCategoryInlineBots({
    string? this.extra,
    int? this.client_id,
  });

  TopChatCategoryInlineBots.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TopChatCategoryCalls extends TopChatCategory {
  String get tlType => 'topChatCategoryCalls';

  string? extra;
  int? client_id;

  TopChatCategoryCalls({
    string? this.extra,
    int? this.client_id,
  });

  TopChatCategoryCalls.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TopChatCategoryForwardChats extends TopChatCategory {
  String get tlType => 'topChatCategoryForwardChats';

  string? extra;
  int? client_id;

  TopChatCategoryForwardChats({
    string? this.extra,
    int? this.client_id,
  });

  TopChatCategoryForwardChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TMeUrlTypeUser extends TMeUrlType {
  String get tlType => 'tMeUrlTypeUser';

  string? extra;
  int? client_id;
  int53? user_id;

  TMeUrlTypeUser({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  TMeUrlTypeUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TMeUrlTypeSupergroup extends TMeUrlType {
  String get tlType => 'tMeUrlTypeSupergroup';

  string? extra;
  int? client_id;
  int53? supergroup_id;

  TMeUrlTypeSupergroup({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
  });

  TMeUrlTypeSupergroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TMeUrlTypeChatInvite extends TMeUrlType {
  String get tlType => 'tMeUrlTypeChatInvite';

  string? extra;
  int? client_id;
  ChatInviteLinkInfo? info;

  TMeUrlTypeChatInvite({
    string? this.extra,
    int? this.client_id,
    ChatInviteLinkInfo? this.info,
  });

  TMeUrlTypeChatInvite.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    info = map.containsKey('info')
        ? TlMap.fromMap(map['info']) as ChatInviteLinkInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'info': info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TMeUrlTypeStickerSet extends TMeUrlType {
  String get tlType => 'tMeUrlTypeStickerSet';

  string? extra;
  int? client_id;
  int64? sticker_set_id;

  TMeUrlTypeStickerSet({
    string? this.extra,
    int? this.client_id,
    int64? this.sticker_set_id,
  });

  TMeUrlTypeStickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker_set_id =
        map.containsKey('sticker_set_id') ? map['sticker_set_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker_set_id': sticker_set_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TMeUrl extends TdObject {
  String get tlType => 'tMeUrl';

  string? extra;
  int? client_id;
  string? url;
  TMeUrlType? type;

  TMeUrl({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    TMeUrlType? this.type,
  });

  TMeUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as TMeUrlType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TMeUrls extends TdObject {
  String get tlType => 'tMeUrls';

  string? extra;
  int? client_id;
  vector<TMeUrl>? urls;

  TMeUrls({
    string? this.extra,
    int? this.client_id,
    vector<TMeUrl>? this.urls,
  });

  TMeUrls.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('urls') && map['urls'] != null) {
      urls = [];
      var someValues = map['urls'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as TMeUrl;
        urls?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'urls': urls?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SuggestedActionEnableArchiveAndMuteNewChats extends SuggestedAction {
  String get tlType => 'suggestedActionEnableArchiveAndMuteNewChats';

  string? extra;
  int? client_id;

  SuggestedActionEnableArchiveAndMuteNewChats({
    string? this.extra,
    int? this.client_id,
  });

  SuggestedActionEnableArchiveAndMuteNewChats.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SuggestedActionCheckPassword extends SuggestedAction {
  String get tlType => 'suggestedActionCheckPassword';

  string? extra;
  int? client_id;

  SuggestedActionCheckPassword({
    string? this.extra,
    int? this.client_id,
  });

  SuggestedActionCheckPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SuggestedActionCheckPhoneNumber extends SuggestedAction {
  String get tlType => 'suggestedActionCheckPhoneNumber';

  string? extra;
  int? client_id;

  SuggestedActionCheckPhoneNumber({
    string? this.extra,
    int? this.client_id,
  });

  SuggestedActionCheckPhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SuggestedActionViewChecksHint extends SuggestedAction {
  String get tlType => 'suggestedActionViewChecksHint';

  string? extra;
  int? client_id;

  SuggestedActionViewChecksHint({
    string? this.extra,
    int? this.client_id,
  });

  SuggestedActionViewChecksHint.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SuggestedActionConvertToBroadcastGroup extends SuggestedAction {
  String get tlType => 'suggestedActionConvertToBroadcastGroup';

  string? extra;
  int? client_id;
  int53? supergroup_id;

  SuggestedActionConvertToBroadcastGroup({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
  });

  SuggestedActionConvertToBroadcastGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SuggestedActionSetPassword extends SuggestedAction {
  String get tlType => 'suggestedActionSetPassword';

  string? extra;
  int? client_id;
  int32? authorization_delay;

  SuggestedActionSetPassword({
    string? this.extra,
    int? this.client_id,
    int32? this.authorization_delay,
  });

  SuggestedActionSetPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    authorization_delay = map.containsKey('authorization_delay')
        ? map['authorization_delay']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'authorization_delay': authorization_delay?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Count extends TdObject {
  String get tlType => 'count';

  string? extra;
  int? client_id;
  int32? count;

  Count({
    string? this.extra,
    int? this.client_id,
    int32? this.count,
  });

  Count.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    count = map.containsKey('count') ? map['count'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'count': count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Text extends TdObject {
  String get tlType => 'text';

  string? extra;
  int? client_id;
  string? text;

  Text({
    string? this.extra,
    int? this.client_id,
    string? this.text,
  });

  Text.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Seconds extends TdObject {
  String get tlType => 'seconds';

  string? extra;
  int? client_id;
  double? seconds;

  Seconds({
    string? this.extra,
    int? this.client_id,
    double? this.seconds,
  });

  Seconds.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    seconds = map.containsKey('seconds') ? map['seconds'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'seconds': seconds?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeepLinkInfo extends TdObject {
  String get tlType => 'deepLinkInfo';

  string? extra;
  int? client_id;
  FormattedText? text;
  Bool? need_update_application;

  DeepLinkInfo({
    string? this.extra,
    int? this.client_id,
    FormattedText? this.text,
    Bool? this.need_update_application,
  });

  DeepLinkInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
    need_update_application = map.containsKey('need_update_application')
        ? map['need_update_application']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'need_update_application':
          need_update_application?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextParseModeMarkdown extends TextParseMode {
  String get tlType => 'textParseModeMarkdown';

  string? extra;
  int? client_id;
  int32? version;

  TextParseModeMarkdown({
    string? this.extra,
    int? this.client_id,
    int32? this.version,
  });

  TextParseModeMarkdown.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    version = map.containsKey('version') ? map['version'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'version': version?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TextParseModeHTML extends TextParseMode {
  String get tlType => 'textParseModeHTML';

  string? extra;
  int? client_id;

  TextParseModeHTML({
    string? this.extra,
    int? this.client_id,
  });

  TextParseModeHTML.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ProxyTypeSocks5 extends ProxyType {
  String get tlType => 'proxyTypeSocks5';

  string? extra;
  int? client_id;
  string? username;
  string? password;

  ProxyTypeSocks5({
    string? this.extra,
    int? this.client_id,
    string? this.username,
    string? this.password,
  });

  ProxyTypeSocks5.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    username = map.containsKey('username') ? map['username'] : null;
    password = map.containsKey('password') ? map['password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ProxyTypeHttp extends ProxyType {
  String get tlType => 'proxyTypeHttp';

  string? extra;
  int? client_id;
  string? username;
  string? password;
  Bool? http_only;

  ProxyTypeHttp({
    string? this.extra,
    int? this.client_id,
    string? this.username,
    string? this.password,
    Bool? this.http_only,
  });

  ProxyTypeHttp.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    username = map.containsKey('username') ? map['username'] : null;
    password = map.containsKey('password') ? map['password'] : null;
    http_only = map.containsKey('http_only') ? map['http_only'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
      'http_only': http_only?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ProxyTypeMtproto extends ProxyType {
  String get tlType => 'proxyTypeMtproto';

  string? extra;
  int? client_id;
  string? secret;

  ProxyTypeMtproto({
    string? this.extra,
    int? this.client_id,
    string? this.secret,
  });

  ProxyTypeMtproto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    secret = map.containsKey('secret') ? map['secret'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'secret': secret?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Proxy extends TdObject {
  String get tlType => 'proxy';

  string? extra;
  int? client_id;
  int32? id;
  string? server;
  int32? port;
  int32? last_used_date;
  Bool? is_enabled;
  ProxyType? type;

  Proxy({
    string? this.extra,
    int? this.client_id,
    int32? this.id,
    string? this.server,
    int32? this.port,
    int32? this.last_used_date,
    Bool? this.is_enabled,
    ProxyType? this.type,
  });

  Proxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    server = map.containsKey('server') ? map['server'] : null;
    port = map.containsKey('port') ? map['port'] : null;
    last_used_date =
        map.containsKey('last_used_date') ? map['last_used_date'] : null;
    is_enabled = map.containsKey('is_enabled') ? map['is_enabled'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as ProxyType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'server': server?.toMap(skipNulls: skipNulls),
      'port': port?.toMap(skipNulls: skipNulls),
      'last_used_date': last_used_date?.toMap(skipNulls: skipNulls),
      'is_enabled': is_enabled?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Proxies extends TdObject {
  String get tlType => 'proxies';

  string? extra;
  int? client_id;
  vector<Proxy>? proxies;

  Proxies({
    string? this.extra,
    int? this.client_id,
    vector<Proxy>? this.proxies,
  });

  Proxies.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('proxies') && map['proxies'] != null) {
      proxies = [];
      var someValues = map['proxies'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Proxy;
        proxies?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'proxies': proxies?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputStickerStatic extends InputSticker {
  String get tlType => 'inputStickerStatic';

  string? extra;
  int? client_id;
  InputFile? sticker;
  string? emojis;
  MaskPosition? mask_position;

  InputStickerStatic({
    string? this.extra,
    int? this.client_id,
    InputFile? this.sticker,
    string? this.emojis,
    MaskPosition? this.mask_position,
  });

  InputStickerStatic.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
    emojis = map.containsKey('emojis') ? map['emojis'] : null;
    mask_position = map.containsKey('mask_position')
        ? TlMap.fromMap(map['mask_position']) as MaskPosition
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
      'emojis': emojis?.toMap(skipNulls: skipNulls),
      'mask_position': mask_position?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InputStickerAnimated extends InputSticker {
  String get tlType => 'inputStickerAnimated';

  string? extra;
  int? client_id;
  InputFile? sticker;
  string? emojis;

  InputStickerAnimated({
    string? this.extra,
    int? this.client_id,
    InputFile? this.sticker,
    string? this.emojis,
  });

  InputStickerAnimated.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
    emojis = map.containsKey('emojis') ? map['emojis'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
      'emojis': emojis?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DateRange extends TdObject {
  String get tlType => 'dateRange';

  string? extra;
  int? client_id;
  int32? start_date;
  int32? end_date;

  DateRange({
    string? this.extra,
    int? this.client_id,
    int32? this.start_date,
    int32? this.end_date,
  });

  DateRange.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    start_date = map.containsKey('start_date') ? map['start_date'] : null;
    end_date = map.containsKey('end_date') ? map['end_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'start_date': start_date?.toMap(skipNulls: skipNulls),
      'end_date': end_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StatisticalValue extends TdObject {
  String get tlType => 'statisticalValue';

  string? extra;
  int? client_id;
  double? value;
  double? previous_value;
  double? growth_rate_percentage;

  StatisticalValue({
    string? this.extra,
    int? this.client_id,
    double? this.value,
    double? this.previous_value,
    double? this.growth_rate_percentage,
  });

  StatisticalValue.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
    previous_value =
        map.containsKey('previous_value') ? map['previous_value'] : null;
    growth_rate_percentage = map.containsKey('growth_rate_percentage')
        ? map['growth_rate_percentage']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
      'previous_value': previous_value?.toMap(skipNulls: skipNulls),
      'growth_rate_percentage':
          growth_rate_percentage?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StatisticalGraphData extends StatisticalGraph {
  String get tlType => 'statisticalGraphData';

  string? extra;
  int? client_id;
  string? json_data;
  string? zoom_token;

  StatisticalGraphData({
    string? this.extra,
    int? this.client_id,
    string? this.json_data,
    string? this.zoom_token,
  });

  StatisticalGraphData.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    json_data = map.containsKey('json_data') ? map['json_data'] : null;
    zoom_token = map.containsKey('zoom_token') ? map['zoom_token'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'json_data': json_data?.toMap(skipNulls: skipNulls),
      'zoom_token': zoom_token?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StatisticalGraphAsync extends StatisticalGraph {
  String get tlType => 'statisticalGraphAsync';

  string? extra;
  int? client_id;
  string? token;

  StatisticalGraphAsync({
    string? this.extra,
    int? this.client_id,
    string? this.token,
  });

  StatisticalGraphAsync.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    token = map.containsKey('token') ? map['token'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'token': token?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StatisticalGraphError extends StatisticalGraph {
  String get tlType => 'statisticalGraphError';

  string? extra;
  int? client_id;
  string? error_message;

  StatisticalGraphError({
    string? this.extra,
    int? this.client_id,
    string? this.error_message,
  });

  StatisticalGraphError.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    error_message =
        map.containsKey('error_message') ? map['error_message'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'error_message': error_message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatStatisticsMessageInteractionInfo extends TdObject {
  String get tlType => 'chatStatisticsMessageInteractionInfo';

  string? extra;
  int? client_id;
  int53? message_id;
  int32? view_count;
  int32? forward_count;

  ChatStatisticsMessageInteractionInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.message_id,
    int32? this.view_count,
    int32? this.forward_count,
  });

  ChatStatisticsMessageInteractionInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    view_count = map.containsKey('view_count') ? map['view_count'] : null;
    forward_count =
        map.containsKey('forward_count') ? map['forward_count'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'view_count': view_count?.toMap(skipNulls: skipNulls),
      'forward_count': forward_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatStatisticsMessageSenderInfo extends TdObject {
  String get tlType => 'chatStatisticsMessageSenderInfo';

  string? extra;
  int? client_id;
  int53? user_id;
  int32? sent_message_count;
  int32? average_character_count;

  ChatStatisticsMessageSenderInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    int32? this.sent_message_count,
    int32? this.average_character_count,
  });

  ChatStatisticsMessageSenderInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    sent_message_count = map.containsKey('sent_message_count')
        ? map['sent_message_count']
        : null;
    average_character_count = map.containsKey('average_character_count')
        ? map['average_character_count']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'sent_message_count': sent_message_count?.toMap(skipNulls: skipNulls),
      'average_character_count':
          average_character_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatStatisticsAdministratorActionsInfo extends TdObject {
  String get tlType => 'chatStatisticsAdministratorActionsInfo';

  string? extra;
  int? client_id;
  int53? user_id;
  int32? deleted_message_count;
  int32? banned_user_count;
  int32? restricted_user_count;

  ChatStatisticsAdministratorActionsInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    int32? this.deleted_message_count,
    int32? this.banned_user_count,
    int32? this.restricted_user_count,
  });

  ChatStatisticsAdministratorActionsInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    deleted_message_count = map.containsKey('deleted_message_count')
        ? map['deleted_message_count']
        : null;
    banned_user_count =
        map.containsKey('banned_user_count') ? map['banned_user_count'] : null;
    restricted_user_count = map.containsKey('restricted_user_count')
        ? map['restricted_user_count']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'deleted_message_count':
          deleted_message_count?.toMap(skipNulls: skipNulls),
      'banned_user_count': banned_user_count?.toMap(skipNulls: skipNulls),
      'restricted_user_count':
          restricted_user_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatStatisticsInviterInfo extends TdObject {
  String get tlType => 'chatStatisticsInviterInfo';

  string? extra;
  int? client_id;
  int53? user_id;
  int32? added_member_count;

  ChatStatisticsInviterInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    int32? this.added_member_count,
  });

  ChatStatisticsInviterInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    added_member_count = map.containsKey('added_member_count')
        ? map['added_member_count']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'added_member_count': added_member_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatStatisticsSupergroup extends ChatStatistics {
  String get tlType => 'chatStatisticsSupergroup';

  string? extra;
  int? client_id;
  DateRange? period;
  StatisticalValue? member_count;
  StatisticalValue? message_count;
  StatisticalValue? viewer_count;
  StatisticalValue? sender_count;
  StatisticalGraph? member_count_graph;
  StatisticalGraph? join_graph;
  StatisticalGraph? join_by_source_graph;
  StatisticalGraph? language_graph;
  StatisticalGraph? message_content_graph;
  StatisticalGraph? action_graph;
  StatisticalGraph? day_graph;
  StatisticalGraph? week_graph;
  vector<ChatStatisticsMessageSenderInfo>? top_senders;
  vector<ChatStatisticsAdministratorActionsInfo>? top_administrators;
  vector<ChatStatisticsInviterInfo>? top_inviters;

  ChatStatisticsSupergroup({
    string? this.extra,
    int? this.client_id,
    DateRange? this.period,
    StatisticalValue? this.member_count,
    StatisticalValue? this.message_count,
    StatisticalValue? this.viewer_count,
    StatisticalValue? this.sender_count,
    StatisticalGraph? this.member_count_graph,
    StatisticalGraph? this.join_graph,
    StatisticalGraph? this.join_by_source_graph,
    StatisticalGraph? this.language_graph,
    StatisticalGraph? this.message_content_graph,
    StatisticalGraph? this.action_graph,
    StatisticalGraph? this.day_graph,
    StatisticalGraph? this.week_graph,
    vector<ChatStatisticsMessageSenderInfo>? this.top_senders,
    vector<ChatStatisticsAdministratorActionsInfo>? this.top_administrators,
    vector<ChatStatisticsInviterInfo>? this.top_inviters,
  });

  ChatStatisticsSupergroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    period = map.containsKey('period')
        ? TlMap.fromMap(map['period']) as DateRange
        : null;
    member_count = map.containsKey('member_count')
        ? TlMap.fromMap(map['member_count']) as StatisticalValue
        : null;
    message_count = map.containsKey('message_count')
        ? TlMap.fromMap(map['message_count']) as StatisticalValue
        : null;
    viewer_count = map.containsKey('viewer_count')
        ? TlMap.fromMap(map['viewer_count']) as StatisticalValue
        : null;
    sender_count = map.containsKey('sender_count')
        ? TlMap.fromMap(map['sender_count']) as StatisticalValue
        : null;
    member_count_graph = map.containsKey('member_count_graph')
        ? TlMap.fromMap(map['member_count_graph']) as StatisticalGraph
        : null;
    join_graph = map.containsKey('join_graph')
        ? TlMap.fromMap(map['join_graph']) as StatisticalGraph
        : null;
    join_by_source_graph = map.containsKey('join_by_source_graph')
        ? TlMap.fromMap(map['join_by_source_graph']) as StatisticalGraph
        : null;
    language_graph = map.containsKey('language_graph')
        ? TlMap.fromMap(map['language_graph']) as StatisticalGraph
        : null;
    message_content_graph = map.containsKey('message_content_graph')
        ? TlMap.fromMap(map['message_content_graph']) as StatisticalGraph
        : null;
    action_graph = map.containsKey('action_graph')
        ? TlMap.fromMap(map['action_graph']) as StatisticalGraph
        : null;
    day_graph = map.containsKey('day_graph')
        ? TlMap.fromMap(map['day_graph']) as StatisticalGraph
        : null;
    week_graph = map.containsKey('week_graph')
        ? TlMap.fromMap(map['week_graph']) as StatisticalGraph
        : null;
    if (map.containsKey('top_senders') && map['top_senders'] != null) {
      top_senders = [];
      var someValues = map['top_senders'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatStatisticsMessageSenderInfo;
        top_senders?.add(obj);
      }
    }
    if (map.containsKey('top_administrators') &&
        map['top_administrators'] != null) {
      top_administrators = [];
      var someValues = map['top_administrators'];
      for (var someValue in someValues) {
        var obj =
            TlMap.fromMap(someValue) as ChatStatisticsAdministratorActionsInfo;
        top_administrators?.add(obj);
      }
    }
    if (map.containsKey('top_inviters') && map['top_inviters'] != null) {
      top_inviters = [];
      var someValues = map['top_inviters'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatStatisticsInviterInfo;
        top_inviters?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'period': period?.toMap(skipNulls: skipNulls),
      'member_count': member_count?.toMap(skipNulls: skipNulls),
      'message_count': message_count?.toMap(skipNulls: skipNulls),
      'viewer_count': viewer_count?.toMap(skipNulls: skipNulls),
      'sender_count': sender_count?.toMap(skipNulls: skipNulls),
      'member_count_graph': member_count_graph?.toMap(skipNulls: skipNulls),
      'join_graph': join_graph?.toMap(skipNulls: skipNulls),
      'join_by_source_graph': join_by_source_graph?.toMap(skipNulls: skipNulls),
      'language_graph': language_graph?.toMap(skipNulls: skipNulls),
      'message_content_graph':
          message_content_graph?.toMap(skipNulls: skipNulls),
      'action_graph': action_graph?.toMap(skipNulls: skipNulls),
      'day_graph': day_graph?.toMap(skipNulls: skipNulls),
      'week_graph': week_graph?.toMap(skipNulls: skipNulls),
      'top_senders': top_senders?.toMap(skipNulls: skipNulls),
      'top_administrators': top_administrators?.toMap(skipNulls: skipNulls),
      'top_inviters': top_inviters?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChatStatisticsChannel extends ChatStatistics {
  String get tlType => 'chatStatisticsChannel';

  string? extra;
  int? client_id;
  DateRange? period;
  StatisticalValue? member_count;
  StatisticalValue? mean_view_count;
  StatisticalValue? mean_share_count;
  double? enabled_notifications_percentage;
  StatisticalGraph? member_count_graph;
  StatisticalGraph? join_graph;
  StatisticalGraph? mute_graph;
  StatisticalGraph? view_count_by_hour_graph;
  StatisticalGraph? view_count_by_source_graph;
  StatisticalGraph? join_by_source_graph;
  StatisticalGraph? language_graph;
  StatisticalGraph? message_interaction_graph;
  StatisticalGraph? instant_view_interaction_graph;
  vector<ChatStatisticsMessageInteractionInfo>? recent_message_interactions;

  ChatStatisticsChannel({
    string? this.extra,
    int? this.client_id,
    DateRange? this.period,
    StatisticalValue? this.member_count,
    StatisticalValue? this.mean_view_count,
    StatisticalValue? this.mean_share_count,
    double? this.enabled_notifications_percentage,
    StatisticalGraph? this.member_count_graph,
    StatisticalGraph? this.join_graph,
    StatisticalGraph? this.mute_graph,
    StatisticalGraph? this.view_count_by_hour_graph,
    StatisticalGraph? this.view_count_by_source_graph,
    StatisticalGraph? this.join_by_source_graph,
    StatisticalGraph? this.language_graph,
    StatisticalGraph? this.message_interaction_graph,
    StatisticalGraph? this.instant_view_interaction_graph,
    vector<ChatStatisticsMessageInteractionInfo>?
        this.recent_message_interactions,
  });

  ChatStatisticsChannel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    period = map.containsKey('period')
        ? TlMap.fromMap(map['period']) as DateRange
        : null;
    member_count = map.containsKey('member_count')
        ? TlMap.fromMap(map['member_count']) as StatisticalValue
        : null;
    mean_view_count = map.containsKey('mean_view_count')
        ? TlMap.fromMap(map['mean_view_count']) as StatisticalValue
        : null;
    mean_share_count = map.containsKey('mean_share_count')
        ? TlMap.fromMap(map['mean_share_count']) as StatisticalValue
        : null;
    enabled_notifications_percentage =
        map.containsKey('enabled_notifications_percentage')
            ? map['enabled_notifications_percentage']
            : null;
    member_count_graph = map.containsKey('member_count_graph')
        ? TlMap.fromMap(map['member_count_graph']) as StatisticalGraph
        : null;
    join_graph = map.containsKey('join_graph')
        ? TlMap.fromMap(map['join_graph']) as StatisticalGraph
        : null;
    mute_graph = map.containsKey('mute_graph')
        ? TlMap.fromMap(map['mute_graph']) as StatisticalGraph
        : null;
    view_count_by_hour_graph = map.containsKey('view_count_by_hour_graph')
        ? TlMap.fromMap(map['view_count_by_hour_graph']) as StatisticalGraph
        : null;
    view_count_by_source_graph = map.containsKey('view_count_by_source_graph')
        ? TlMap.fromMap(map['view_count_by_source_graph']) as StatisticalGraph
        : null;
    join_by_source_graph = map.containsKey('join_by_source_graph')
        ? TlMap.fromMap(map['join_by_source_graph']) as StatisticalGraph
        : null;
    language_graph = map.containsKey('language_graph')
        ? TlMap.fromMap(map['language_graph']) as StatisticalGraph
        : null;
    message_interaction_graph = map.containsKey('message_interaction_graph')
        ? TlMap.fromMap(map['message_interaction_graph']) as StatisticalGraph
        : null;
    instant_view_interaction_graph =
        map.containsKey('instant_view_interaction_graph')
            ? TlMap.fromMap(map['instant_view_interaction_graph'])
                as StatisticalGraph
            : null;
    if (map.containsKey('recent_message_interactions') &&
        map['recent_message_interactions'] != null) {
      recent_message_interactions = [];
      var someValues = map['recent_message_interactions'];
      for (var someValue in someValues) {
        var obj =
            TlMap.fromMap(someValue) as ChatStatisticsMessageInteractionInfo;
        recent_message_interactions?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'period': period?.toMap(skipNulls: skipNulls),
      'member_count': member_count?.toMap(skipNulls: skipNulls),
      'mean_view_count': mean_view_count?.toMap(skipNulls: skipNulls),
      'mean_share_count': mean_share_count?.toMap(skipNulls: skipNulls),
      'enabled_notifications_percentage':
          enabled_notifications_percentage?.toMap(skipNulls: skipNulls),
      'member_count_graph': member_count_graph?.toMap(skipNulls: skipNulls),
      'join_graph': join_graph?.toMap(skipNulls: skipNulls),
      'mute_graph': mute_graph?.toMap(skipNulls: skipNulls),
      'view_count_by_hour_graph':
          view_count_by_hour_graph?.toMap(skipNulls: skipNulls),
      'view_count_by_source_graph':
          view_count_by_source_graph?.toMap(skipNulls: skipNulls),
      'join_by_source_graph': join_by_source_graph?.toMap(skipNulls: skipNulls),
      'language_graph': language_graph?.toMap(skipNulls: skipNulls),
      'message_interaction_graph':
          message_interaction_graph?.toMap(skipNulls: skipNulls),
      'instant_view_interaction_graph':
          instant_view_interaction_graph?.toMap(skipNulls: skipNulls),
      'recent_message_interactions':
          recent_message_interactions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class MessageStatistics extends TdObject {
  String get tlType => 'messageStatistics';

  string? extra;
  int? client_id;
  StatisticalGraph? message_interaction_graph;

  MessageStatistics({
    string? this.extra,
    int? this.client_id,
    StatisticalGraph? this.message_interaction_graph,
  });

  MessageStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_interaction_graph = map.containsKey('message_interaction_graph')
        ? TlMap.fromMap(map['message_interaction_graph']) as StatisticalGraph
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_interaction_graph':
          message_interaction_graph?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Point extends TdObject {
  String get tlType => 'point';

  string? extra;
  int? client_id;
  double? x;
  double? y;

  Point({
    string? this.extra,
    int? this.client_id,
    double? this.x,
    double? this.y,
  });

  Point.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    x = map.containsKey('x') ? map['x'] : null;
    y = map.containsKey('y') ? map['y'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
      'y': y?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class VectorPathCommandLine extends VectorPathCommand {
  String get tlType => 'vectorPathCommandLine';

  string? extra;
  int? client_id;
  Point? end_point;

  VectorPathCommandLine({
    string? this.extra,
    int? this.client_id,
    Point? this.end_point,
  });

  VectorPathCommandLine.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    end_point = map.containsKey('end_point')
        ? TlMap.fromMap(map['end_point']) as Point
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'end_point': end_point?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class VectorPathCommandCubicBezierCurve extends VectorPathCommand {
  String get tlType => 'vectorPathCommandCubicBezierCurve';

  string? extra;
  int? client_id;
  Point? start_control_point;
  Point? end_control_point;
  Point? end_point;

  VectorPathCommandCubicBezierCurve({
    string? this.extra,
    int? this.client_id,
    Point? this.start_control_point,
    Point? this.end_control_point,
    Point? this.end_point,
  });

  VectorPathCommandCubicBezierCurve.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    start_control_point = map.containsKey('start_control_point')
        ? TlMap.fromMap(map['start_control_point']) as Point
        : null;
    end_control_point = map.containsKey('end_control_point')
        ? TlMap.fromMap(map['end_control_point']) as Point
        : null;
    end_point = map.containsKey('end_point')
        ? TlMap.fromMap(map['end_point']) as Point
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'start_control_point': start_control_point?.toMap(skipNulls: skipNulls),
      'end_control_point': end_control_point?.toMap(skipNulls: skipNulls),
      'end_point': end_point?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommandScopeDefault extends BotCommandScope {
  String get tlType => 'botCommandScopeDefault';

  string? extra;
  int? client_id;

  BotCommandScopeDefault({
    string? this.extra,
    int? this.client_id,
  });

  BotCommandScopeDefault.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommandScopeAllPrivateChats extends BotCommandScope {
  String get tlType => 'botCommandScopeAllPrivateChats';

  string? extra;
  int? client_id;

  BotCommandScopeAllPrivateChats({
    string? this.extra,
    int? this.client_id,
  });

  BotCommandScopeAllPrivateChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommandScopeAllGroupChats extends BotCommandScope {
  String get tlType => 'botCommandScopeAllGroupChats';

  string? extra;
  int? client_id;

  BotCommandScopeAllGroupChats({
    string? this.extra,
    int? this.client_id,
  });

  BotCommandScopeAllGroupChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommandScopeAllChatAdministrators extends BotCommandScope {
  String get tlType => 'botCommandScopeAllChatAdministrators';

  string? extra;
  int? client_id;

  BotCommandScopeAllChatAdministrators({
    string? this.extra,
    int? this.client_id,
  });

  BotCommandScopeAllChatAdministrators.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommandScopeChat extends BotCommandScope {
  String get tlType => 'botCommandScopeChat';

  string? extra;
  int? client_id;
  int53? chat_id;

  BotCommandScopeChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  BotCommandScopeChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommandScopeChatAdministrators extends BotCommandScope {
  String get tlType => 'botCommandScopeChatAdministrators';

  string? extra;
  int? client_id;
  int53? chat_id;

  BotCommandScopeChatAdministrators({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  BotCommandScopeChatAdministrators.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BotCommandScopeChatMember extends BotCommandScope {
  String get tlType => 'botCommandScopeChatMember';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? user_id;

  BotCommandScopeChatMember({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.user_id,
  });

  BotCommandScopeChatMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateAuthorizationState extends Update {
  String get tlType => 'updateAuthorizationState';

  string? extra;
  int? client_id;
  AuthorizationState? authorization_state;

  UpdateAuthorizationState({
    string? this.extra,
    int? this.client_id,
    AuthorizationState? this.authorization_state,
  });

  UpdateAuthorizationState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    authorization_state = map.containsKey('authorization_state')
        ? TlMap.fromMap(map['authorization_state']) as AuthorizationState
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'authorization_state': authorization_state?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewMessage extends Update {
  String get tlType => 'updateNewMessage';

  string? extra;
  int? client_id;
  Message? message;

  UpdateNewMessage({
    string? this.extra,
    int? this.client_id,
    Message? this.message,
  });

  UpdateNewMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageSendAcknowledged extends Update {
  String get tlType => 'updateMessageSendAcknowledged';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  UpdateMessageSendAcknowledged({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  UpdateMessageSendAcknowledged.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageSendSucceeded extends Update {
  String get tlType => 'updateMessageSendSucceeded';

  string? extra;
  int? client_id;
  Message? message;
  int53? old_message_id;

  UpdateMessageSendSucceeded({
    string? this.extra,
    int? this.client_id,
    Message? this.message,
    int53? this.old_message_id,
  });

  UpdateMessageSendSucceeded.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
    old_message_id =
        map.containsKey('old_message_id') ? map['old_message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
      'old_message_id': old_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageSendFailed extends Update {
  String get tlType => 'updateMessageSendFailed';

  string? extra;
  int? client_id;
  Message? message;
  int53? old_message_id;
  int32? error_code;
  string? error_message;

  UpdateMessageSendFailed({
    string? this.extra,
    int? this.client_id,
    Message? this.message,
    int53? this.old_message_id,
    int32? this.error_code,
    string? this.error_message,
  });

  UpdateMessageSendFailed.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message = map.containsKey('message')
        ? TlMap.fromMap(map['message']) as Message
        : null;
    old_message_id =
        map.containsKey('old_message_id') ? map['old_message_id'] : null;
    error_code = map.containsKey('error_code') ? map['error_code'] : null;
    error_message =
        map.containsKey('error_message') ? map['error_message'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message': message?.toMap(skipNulls: skipNulls),
      'old_message_id': old_message_id?.toMap(skipNulls: skipNulls),
      'error_code': error_code?.toMap(skipNulls: skipNulls),
      'error_message': error_message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageContent extends Update {
  String get tlType => 'updateMessageContent';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  MessageContent? new_content;

  UpdateMessageContent({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    MessageContent? this.new_content,
  });

  UpdateMessageContent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    new_content = map.containsKey('new_content')
        ? TlMap.fromMap(map['new_content']) as MessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'new_content': new_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageEdited extends Update {
  String get tlType => 'updateMessageEdited';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int32? edit_date;
  ReplyMarkup? reply_markup;

  UpdateMessageEdited({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int32? this.edit_date,
    ReplyMarkup? this.reply_markup,
  });

  UpdateMessageEdited.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    edit_date = map.containsKey('edit_date') ? map['edit_date'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'edit_date': edit_date?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageIsPinned extends Update {
  String get tlType => 'updateMessageIsPinned';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  Bool? is_pinned;

  UpdateMessageIsPinned({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    Bool? this.is_pinned,
  });

  UpdateMessageIsPinned.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageInteractionInfo extends Update {
  String get tlType => 'updateMessageInteractionInfo';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  MessageInteractionInfo? interaction_info;

  UpdateMessageInteractionInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    MessageInteractionInfo? this.interaction_info,
  });

  UpdateMessageInteractionInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    interaction_info = map.containsKey('interaction_info')
        ? TlMap.fromMap(map['interaction_info']) as MessageInteractionInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'interaction_info': interaction_info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageContentOpened extends Update {
  String get tlType => 'updateMessageContentOpened';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  UpdateMessageContentOpened({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  UpdateMessageContentOpened.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageMentionRead extends Update {
  String get tlType => 'updateMessageMentionRead';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int32? unread_mention_count;

  UpdateMessageMentionRead({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int32? this.unread_mention_count,
  });

  UpdateMessageMentionRead.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    unread_mention_count = map.containsKey('unread_mention_count')
        ? map['unread_mention_count']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'unread_mention_count': unread_mention_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateMessageLiveLocationViewed extends Update {
  String get tlType => 'updateMessageLiveLocationViewed';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  UpdateMessageLiveLocationViewed({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  UpdateMessageLiveLocationViewed.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewChat extends Update {
  String get tlType => 'updateNewChat';

  string? extra;
  int? client_id;
  Chat? chat;

  UpdateNewChat({
    string? this.extra,
    int? this.client_id,
    Chat? this.chat,
  });

  UpdateNewChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat = map.containsKey('chat') ? TlMap.fromMap(map['chat']) as Chat : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat': chat?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatTitle extends Update {
  String get tlType => 'updateChatTitle';

  string? extra;
  int? client_id;
  int53? chat_id;
  string? title;

  UpdateChatTitle({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.title,
  });

  UpdateChatTitle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatPhoto extends Update {
  String get tlType => 'updateChatPhoto';

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatPhotoInfo? photo;

  UpdateChatPhoto({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatPhotoInfo? this.photo,
  });

  UpdateChatPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as ChatPhotoInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatPermissions extends Update {
  String get tlType => 'updateChatPermissions';

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatPermissions? permissions;

  UpdateChatPermissions({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatPermissions? this.permissions,
  });

  UpdateChatPermissions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    permissions = map.containsKey('permissions')
        ? TlMap.fromMap(map['permissions']) as ChatPermissions
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'permissions': permissions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatLastMessage extends Update {
  String get tlType => 'updateChatLastMessage';

  string? extra;
  int? client_id;
  int53? chat_id;
  Message? last_message;
  vector<ChatPosition>? positions;

  UpdateChatLastMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Message? this.last_message,
    vector<ChatPosition>? this.positions,
  });

  UpdateChatLastMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    last_message = map.containsKey('last_message')
        ? TlMap.fromMap(map['last_message']) as Message
        : null;
    if (map.containsKey('positions') && map['positions'] != null) {
      positions = [];
      var someValues = map['positions'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatPosition;
        positions?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'last_message': last_message?.toMap(skipNulls: skipNulls),
      'positions': positions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatPosition extends Update {
  String get tlType => 'updateChatPosition';

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatPosition? position;

  UpdateChatPosition({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatPosition? this.position,
  });

  UpdateChatPosition.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    position = map.containsKey('position')
        ? TlMap.fromMap(map['position']) as ChatPosition
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'position': position?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatReadInbox extends Update {
  String get tlType => 'updateChatReadInbox';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? last_read_inbox_message_id;
  int32? unread_count;

  UpdateChatReadInbox({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.last_read_inbox_message_id,
    int32? this.unread_count,
  });

  UpdateChatReadInbox.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    last_read_inbox_message_id = map.containsKey('last_read_inbox_message_id')
        ? map['last_read_inbox_message_id']
        : null;
    unread_count = map.containsKey('unread_count') ? map['unread_count'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'last_read_inbox_message_id':
          last_read_inbox_message_id?.toMap(skipNulls: skipNulls),
      'unread_count': unread_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatReadOutbox extends Update {
  String get tlType => 'updateChatReadOutbox';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? last_read_outbox_message_id;

  UpdateChatReadOutbox({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.last_read_outbox_message_id,
  });

  UpdateChatReadOutbox.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    last_read_outbox_message_id = map.containsKey('last_read_outbox_message_id')
        ? map['last_read_outbox_message_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'last_read_outbox_message_id':
          last_read_outbox_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatActionBar extends Update {
  String get tlType => 'updateChatActionBar';

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatActionBar? action_bar;

  UpdateChatActionBar({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatActionBar? this.action_bar,
  });

  UpdateChatActionBar.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    action_bar = map.containsKey('action_bar')
        ? TlMap.fromMap(map['action_bar']) as ChatActionBar
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'action_bar': action_bar?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatDraftMessage extends Update {
  String get tlType => 'updateChatDraftMessage';

  string? extra;
  int? client_id;
  int53? chat_id;
  DraftMessage? draft_message;
  vector<ChatPosition>? positions;

  UpdateChatDraftMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    DraftMessage? this.draft_message,
    vector<ChatPosition>? this.positions,
  });

  UpdateChatDraftMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    draft_message = map.containsKey('draft_message')
        ? TlMap.fromMap(map['draft_message']) as DraftMessage
        : null;
    if (map.containsKey('positions') && map['positions'] != null) {
      positions = [];
      var someValues = map['positions'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatPosition;
        positions?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'draft_message': draft_message?.toMap(skipNulls: skipNulls),
      'positions': positions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatMessageSender extends Update {
  String get tlType => 'updateChatMessageSender';

  string? extra;
  int? client_id;
  int53? chat_id;
  MessageSender? message_sender_id;

  UpdateChatMessageSender({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    MessageSender? this.message_sender_id,
  });

  UpdateChatMessageSender.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_sender_id = map.containsKey('message_sender_id')
        ? TlMap.fromMap(map['message_sender_id']) as MessageSender
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_sender_id': message_sender_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatMessageTtl extends Update {
  String get tlType => 'updateChatMessageTtl';

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? message_ttl;

  UpdateChatMessageTtl({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.message_ttl,
  });

  UpdateChatMessageTtl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_ttl = map.containsKey('message_ttl') ? map['message_ttl'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_ttl': message_ttl?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatNotificationSettings extends Update {
  String get tlType => 'updateChatNotificationSettings';

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatNotificationSettings? notification_settings;

  UpdateChatNotificationSettings({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatNotificationSettings? this.notification_settings,
  });

  UpdateChatNotificationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    notification_settings = map.containsKey('notification_settings')
        ? TlMap.fromMap(map['notification_settings'])
            as ChatNotificationSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'notification_settings':
          notification_settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatPendingJoinRequests extends Update {
  String get tlType => 'updateChatPendingJoinRequests';

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatJoinRequestsInfo? pending_join_requests;

  UpdateChatPendingJoinRequests({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatJoinRequestsInfo? this.pending_join_requests,
  });

  UpdateChatPendingJoinRequests.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    pending_join_requests = map.containsKey('pending_join_requests')
        ? TlMap.fromMap(map['pending_join_requests']) as ChatJoinRequestsInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'pending_join_requests':
          pending_join_requests?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatReplyMarkup extends Update {
  String get tlType => 'updateChatReplyMarkup';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? reply_markup_message_id;

  UpdateChatReplyMarkup({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.reply_markup_message_id,
  });

  UpdateChatReplyMarkup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    reply_markup_message_id = map.containsKey('reply_markup_message_id')
        ? map['reply_markup_message_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'reply_markup_message_id':
          reply_markup_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatTheme extends Update {
  String get tlType => 'updateChatTheme';

  string? extra;
  int? client_id;
  int53? chat_id;
  string? theme_name;

  UpdateChatTheme({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.theme_name,
  });

  UpdateChatTheme.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    theme_name = map.containsKey('theme_name') ? map['theme_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'theme_name': theme_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatUnreadMentionCount extends Update {
  String get tlType => 'updateChatUnreadMentionCount';

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? unread_mention_count;

  UpdateChatUnreadMentionCount({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.unread_mention_count,
  });

  UpdateChatUnreadMentionCount.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    unread_mention_count = map.containsKey('unread_mention_count')
        ? map['unread_mention_count']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'unread_mention_count': unread_mention_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatVideoChat extends Update {
  String get tlType => 'updateChatVideoChat';

  string? extra;
  int? client_id;
  int53? chat_id;
  VideoChat? video_chat;

  UpdateChatVideoChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    VideoChat? this.video_chat,
  });

  UpdateChatVideoChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    video_chat = map.containsKey('video_chat')
        ? TlMap.fromMap(map['video_chat']) as VideoChat
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'video_chat': video_chat?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatDefaultDisableNotification extends Update {
  String get tlType => 'updateChatDefaultDisableNotification';

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? default_disable_notification;

  UpdateChatDefaultDisableNotification({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.default_disable_notification,
  });

  UpdateChatDefaultDisableNotification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    default_disable_notification =
        map.containsKey('default_disable_notification')
            ? map['default_disable_notification']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'default_disable_notification':
          default_disable_notification?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatHasProtectedContent extends Update {
  String get tlType => 'updateChatHasProtectedContent';

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? has_protected_content;

  UpdateChatHasProtectedContent({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.has_protected_content,
  });

  UpdateChatHasProtectedContent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    has_protected_content = map.containsKey('has_protected_content')
        ? map['has_protected_content']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'has_protected_content':
          has_protected_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatHasScheduledMessages extends Update {
  String get tlType => 'updateChatHasScheduledMessages';

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? has_scheduled_messages;

  UpdateChatHasScheduledMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.has_scheduled_messages,
  });

  UpdateChatHasScheduledMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    has_scheduled_messages = map.containsKey('has_scheduled_messages')
        ? map['has_scheduled_messages']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'has_scheduled_messages':
          has_scheduled_messages?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatIsBlocked extends Update {
  String get tlType => 'updateChatIsBlocked';

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? is_blocked;

  UpdateChatIsBlocked({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.is_blocked,
  });

  UpdateChatIsBlocked.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    is_blocked = map.containsKey('is_blocked') ? map['is_blocked'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'is_blocked': is_blocked?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatIsMarkedAsUnread extends Update {
  String get tlType => 'updateChatIsMarkedAsUnread';

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? is_marked_as_unread;

  UpdateChatIsMarkedAsUnread({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.is_marked_as_unread,
  });

  UpdateChatIsMarkedAsUnread.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    is_marked_as_unread = map.containsKey('is_marked_as_unread')
        ? map['is_marked_as_unread']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'is_marked_as_unread': is_marked_as_unread?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatFilters extends Update {
  String get tlType => 'updateChatFilters';

  string? extra;
  int? client_id;
  vector<ChatFilterInfo>? chat_filters;

  UpdateChatFilters({
    string? this.extra,
    int? this.client_id,
    vector<ChatFilterInfo>? this.chat_filters,
  });

  UpdateChatFilters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('chat_filters') && map['chat_filters'] != null) {
      chat_filters = [];
      var someValues = map['chat_filters'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatFilterInfo;
        chat_filters?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_filters': chat_filters?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatOnlineMemberCount extends Update {
  String get tlType => 'updateChatOnlineMemberCount';

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? online_member_count;

  UpdateChatOnlineMemberCount({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.online_member_count,
  });

  UpdateChatOnlineMemberCount.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    online_member_count = map.containsKey('online_member_count')
        ? map['online_member_count']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'online_member_count': online_member_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateScopeNotificationSettings extends Update {
  String get tlType => 'updateScopeNotificationSettings';

  string? extra;
  int? client_id;
  NotificationSettingsScope? scope;
  ScopeNotificationSettings? notification_settings;

  UpdateScopeNotificationSettings({
    string? this.extra,
    int? this.client_id,
    NotificationSettingsScope? this.scope,
    ScopeNotificationSettings? this.notification_settings,
  });

  UpdateScopeNotificationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    scope = map.containsKey('scope')
        ? TlMap.fromMap(map['scope']) as NotificationSettingsScope
        : null;
    notification_settings = map.containsKey('notification_settings')
        ? TlMap.fromMap(map['notification_settings'])
            as ScopeNotificationSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
      'notification_settings':
          notification_settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNotification extends Update {
  String get tlType => 'updateNotification';

  string? extra;
  int? client_id;
  int32? notification_group_id;
  Notification? notification;

  UpdateNotification({
    string? this.extra,
    int? this.client_id,
    int32? this.notification_group_id,
    Notification? this.notification,
  });

  UpdateNotification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    notification_group_id = map.containsKey('notification_group_id')
        ? map['notification_group_id']
        : null;
    notification = map.containsKey('notification')
        ? TlMap.fromMap(map['notification']) as Notification
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'notification_group_id':
          notification_group_id?.toMap(skipNulls: skipNulls),
      'notification': notification?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNotificationGroup extends Update {
  String get tlType => 'updateNotificationGroup';

  string? extra;
  int? client_id;
  int32? notification_group_id;
  NotificationGroupType? type;
  int53? chat_id;
  int53? notification_settings_chat_id;
  Bool? is_silent;
  int32? total_count;
  vector<Notification>? added_notifications;
  vector<int32>? removed_notification_ids;

  UpdateNotificationGroup({
    string? this.extra,
    int? this.client_id,
    int32? this.notification_group_id,
    NotificationGroupType? this.type,
    int53? this.chat_id,
    int53? this.notification_settings_chat_id,
    Bool? this.is_silent,
    int32? this.total_count,
    vector<Notification>? this.added_notifications,
    vector<int32>? this.removed_notification_ids,
  });

  UpdateNotificationGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    notification_group_id = map.containsKey('notification_group_id')
        ? map['notification_group_id']
        : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as NotificationGroupType
        : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    notification_settings_chat_id =
        map.containsKey('notification_settings_chat_id')
            ? map['notification_settings_chat_id']
            : null;
    is_silent = map.containsKey('is_silent') ? map['is_silent'] : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    if (map.containsKey('added_notifications') &&
        map['added_notifications'] != null) {
      added_notifications = [];
      var someValues = map['added_notifications'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Notification;
        added_notifications?.add(obj);
      }
    }
    if (map.containsKey('removed_notification_ids') &&
        map['removed_notification_ids'] != null) {
      removed_notification_ids = [];
      var someValues = map['removed_notification_ids'];
      for (var someValue in someValues) {
        removed_notification_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'notification_group_id':
          notification_group_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'notification_settings_chat_id':
          notification_settings_chat_id?.toMap(skipNulls: skipNulls),
      'is_silent': is_silent?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'added_notifications': added_notifications?.toMap(skipNulls: skipNulls),
      'removed_notification_ids':
          removed_notification_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateActiveNotifications extends Update {
  String get tlType => 'updateActiveNotifications';

  string? extra;
  int? client_id;
  vector<NotificationGroup>? groups;

  UpdateActiveNotifications({
    string? this.extra,
    int? this.client_id,
    vector<NotificationGroup>? this.groups,
  });

  UpdateActiveNotifications.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('groups') && map['groups'] != null) {
      groups = [];
      var someValues = map['groups'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as NotificationGroup;
        groups?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'groups': groups?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateHavePendingNotifications extends Update {
  String get tlType => 'updateHavePendingNotifications';

  string? extra;
  int? client_id;
  Bool? have_delayed_notifications;
  Bool? have_unreceived_notifications;

  UpdateHavePendingNotifications({
    string? this.extra,
    int? this.client_id,
    Bool? this.have_delayed_notifications,
    Bool? this.have_unreceived_notifications,
  });

  UpdateHavePendingNotifications.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    have_delayed_notifications = map.containsKey('have_delayed_notifications')
        ? map['have_delayed_notifications']
        : null;
    have_unreceived_notifications =
        map.containsKey('have_unreceived_notifications')
            ? map['have_unreceived_notifications']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'have_delayed_notifications':
          have_delayed_notifications?.toMap(skipNulls: skipNulls),
      'have_unreceived_notifications':
          have_unreceived_notifications?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateDeleteMessages extends Update {
  String get tlType => 'updateDeleteMessages';

  string? extra;
  int? client_id;
  int53? chat_id;
  vector<int53>? message_ids;
  Bool? is_permanent;
  Bool? from_cache;

  UpdateDeleteMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    vector<int53>? this.message_ids,
    Bool? this.is_permanent,
    Bool? this.from_cache,
  });

  UpdateDeleteMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    if (map.containsKey('message_ids') && map['message_ids'] != null) {
      message_ids = [];
      var someValues = map['message_ids'];
      for (var someValue in someValues) {
        message_ids?.add(someValue);
      }
    }
    is_permanent = map.containsKey('is_permanent') ? map['is_permanent'] : null;
    from_cache = map.containsKey('from_cache') ? map['from_cache'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_ids': message_ids?.toMap(skipNulls: skipNulls),
      'is_permanent': is_permanent?.toMap(skipNulls: skipNulls),
      'from_cache': from_cache?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatAction extends Update {
  String get tlType => 'updateChatAction';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_thread_id;
  MessageSender? sender_id;
  ChatAction? action;

  UpdateChatAction({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_thread_id,
    MessageSender? this.sender_id,
    ChatAction? this.action,
  });

  UpdateChatAction.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    sender_id = map.containsKey('sender_id')
        ? TlMap.fromMap(map['sender_id']) as MessageSender
        : null;
    action = map.containsKey('action')
        ? TlMap.fromMap(map['action']) as ChatAction
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'sender_id': sender_id?.toMap(skipNulls: skipNulls),
      'action': action?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateUserStatus extends Update {
  String get tlType => 'updateUserStatus';

  string? extra;
  int? client_id;
  int53? user_id;
  UserStatus? status;

  UpdateUserStatus({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    UserStatus? this.status,
  });

  UpdateUserStatus.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    status = map.containsKey('status')
        ? TlMap.fromMap(map['status']) as UserStatus
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'status': status?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateUser extends Update {
  String get tlType => 'updateUser';

  string? extra;
  int? client_id;
  User? user;

  UpdateUser({
    string? this.extra,
    int? this.client_id,
    User? this.user,
  });

  UpdateUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user = map.containsKey('user') ? TlMap.fromMap(map['user']) as User : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user': user?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateBasicGroup extends Update {
  String get tlType => 'updateBasicGroup';

  string? extra;
  int? client_id;
  BasicGroup? basic_group;

  UpdateBasicGroup({
    string? this.extra,
    int? this.client_id,
    BasicGroup? this.basic_group,
  });

  UpdateBasicGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    basic_group = map.containsKey('basic_group')
        ? TlMap.fromMap(map['basic_group']) as BasicGroup
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'basic_group': basic_group?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateSupergroup extends Update {
  String get tlType => 'updateSupergroup';

  string? extra;
  int? client_id;
  Supergroup? supergroup;

  UpdateSupergroup({
    string? this.extra,
    int? this.client_id,
    Supergroup? this.supergroup,
  });

  UpdateSupergroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup = map.containsKey('supergroup')
        ? TlMap.fromMap(map['supergroup']) as Supergroup
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup': supergroup?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateSecretChat extends Update {
  String get tlType => 'updateSecretChat';

  string? extra;
  int? client_id;
  SecretChat? secret_chat;

  UpdateSecretChat({
    string? this.extra,
    int? this.client_id,
    SecretChat? this.secret_chat,
  });

  UpdateSecretChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    secret_chat = map.containsKey('secret_chat')
        ? TlMap.fromMap(map['secret_chat']) as SecretChat
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'secret_chat': secret_chat?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateUserFullInfo extends Update {
  String get tlType => 'updateUserFullInfo';

  string? extra;
  int? client_id;
  int53? user_id;
  UserFullInfo? user_full_info;

  UpdateUserFullInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    UserFullInfo? this.user_full_info,
  });

  UpdateUserFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    user_full_info = map.containsKey('user_full_info')
        ? TlMap.fromMap(map['user_full_info']) as UserFullInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'user_full_info': user_full_info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateBasicGroupFullInfo extends Update {
  String get tlType => 'updateBasicGroupFullInfo';

  string? extra;
  int? client_id;
  int53? basic_group_id;
  BasicGroupFullInfo? basic_group_full_info;

  UpdateBasicGroupFullInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.basic_group_id,
    BasicGroupFullInfo? this.basic_group_full_info,
  });

  UpdateBasicGroupFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    basic_group_id =
        map.containsKey('basic_group_id') ? map['basic_group_id'] : null;
    basic_group_full_info = map.containsKey('basic_group_full_info')
        ? TlMap.fromMap(map['basic_group_full_info']) as BasicGroupFullInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'basic_group_id': basic_group_id?.toMap(skipNulls: skipNulls),
      'basic_group_full_info':
          basic_group_full_info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateSupergroupFullInfo extends Update {
  String get tlType => 'updateSupergroupFullInfo';

  string? extra;
  int? client_id;
  int53? supergroup_id;
  SupergroupFullInfo? supergroup_full_info;

  UpdateSupergroupFullInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    SupergroupFullInfo? this.supergroup_full_info,
  });

  UpdateSupergroupFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    supergroup_full_info = map.containsKey('supergroup_full_info')
        ? TlMap.fromMap(map['supergroup_full_info']) as SupergroupFullInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'supergroup_full_info': supergroup_full_info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateServiceNotification extends Update {
  String get tlType => 'updateServiceNotification';

  string? extra;
  int? client_id;
  string? type;
  MessageContent? content;

  UpdateServiceNotification({
    string? this.extra,
    int? this.client_id,
    string? this.type,
    MessageContent? this.content,
  });

  UpdateServiceNotification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type') ? map['type'] : null;
    content = map.containsKey('content')
        ? TlMap.fromMap(map['content']) as MessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'content': content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateFile extends Update {
  String get tlType => 'updateFile';

  string? extra;
  int? client_id;
  File? file;

  UpdateFile({
    string? this.extra,
    int? this.client_id,
    File? this.file,
  });

  UpdateFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file = map.containsKey('file') ? TlMap.fromMap(map['file']) as File : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file': file?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateFileGenerationStart extends Update {
  String get tlType => 'updateFileGenerationStart';

  string? extra;
  int? client_id;
  int64? generation_id;
  string? original_path;
  string? destination_path;
  string? conversion;

  UpdateFileGenerationStart({
    string? this.extra,
    int? this.client_id,
    int64? this.generation_id,
    string? this.original_path,
    string? this.destination_path,
    string? this.conversion,
  });

  UpdateFileGenerationStart.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    generation_id =
        map.containsKey('generation_id') ? map['generation_id'] : null;
    original_path =
        map.containsKey('original_path') ? map['original_path'] : null;
    destination_path =
        map.containsKey('destination_path') ? map['destination_path'] : null;
    conversion = map.containsKey('conversion') ? map['conversion'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'generation_id': generation_id?.toMap(skipNulls: skipNulls),
      'original_path': original_path?.toMap(skipNulls: skipNulls),
      'destination_path': destination_path?.toMap(skipNulls: skipNulls),
      'conversion': conversion?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateFileGenerationStop extends Update {
  String get tlType => 'updateFileGenerationStop';

  string? extra;
  int? client_id;
  int64? generation_id;

  UpdateFileGenerationStop({
    string? this.extra,
    int? this.client_id,
    int64? this.generation_id,
  });

  UpdateFileGenerationStop.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    generation_id =
        map.containsKey('generation_id') ? map['generation_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'generation_id': generation_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateCall extends Update {
  String get tlType => 'updateCall';

  string? extra;
  int? client_id;
  Call? call;

  UpdateCall({
    string? this.extra,
    int? this.client_id,
    Call? this.call,
  });

  UpdateCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    call = map.containsKey('call') ? TlMap.fromMap(map['call']) as Call : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'call': call?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateGroupCall extends Update {
  String get tlType => 'updateGroupCall';

  string? extra;
  int? client_id;
  GroupCall? group_call;

  UpdateGroupCall({
    string? this.extra,
    int? this.client_id,
    GroupCall? this.group_call,
  });

  UpdateGroupCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call = map.containsKey('group_call')
        ? TlMap.fromMap(map['group_call']) as GroupCall
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call': group_call?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateGroupCallParticipant extends Update {
  String get tlType => 'updateGroupCallParticipant';

  string? extra;
  int? client_id;
  int32? group_call_id;
  GroupCallParticipant? participant;

  UpdateGroupCallParticipant({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    GroupCallParticipant? this.participant,
  });

  UpdateGroupCallParticipant.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    participant = map.containsKey('participant')
        ? TlMap.fromMap(map['participant']) as GroupCallParticipant
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'participant': participant?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewCallSignalingData extends Update {
  String get tlType => 'updateNewCallSignalingData';

  string? extra;
  int? client_id;
  int32? call_id;
  bytes? data;

  UpdateNewCallSignalingData({
    string? this.extra,
    int? this.client_id,
    int32? this.call_id,
    bytes? this.data,
  });

  UpdateNewCallSignalingData.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    call_id = map.containsKey('call_id') ? map['call_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'call_id': call_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateUserPrivacySettingRules extends Update {
  String get tlType => 'updateUserPrivacySettingRules';

  string? extra;
  int? client_id;
  UserPrivacySetting? setting;
  UserPrivacySettingRules? rules;

  UpdateUserPrivacySettingRules({
    string? this.extra,
    int? this.client_id,
    UserPrivacySetting? this.setting,
    UserPrivacySettingRules? this.rules,
  });

  UpdateUserPrivacySettingRules.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    setting = map.containsKey('setting')
        ? TlMap.fromMap(map['setting']) as UserPrivacySetting
        : null;
    rules = map.containsKey('rules')
        ? TlMap.fromMap(map['rules']) as UserPrivacySettingRules
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'setting': setting?.toMap(skipNulls: skipNulls),
      'rules': rules?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateUnreadMessageCount extends Update {
  String get tlType => 'updateUnreadMessageCount';

  string? extra;
  int? client_id;
  ChatList? chat_list;
  int32? unread_count;
  int32? unread_unmuted_count;

  UpdateUnreadMessageCount({
    string? this.extra,
    int? this.client_id,
    ChatList? this.chat_list,
    int32? this.unread_count,
    int32? this.unread_unmuted_count,
  });

  UpdateUnreadMessageCount.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_list = map.containsKey('chat_list')
        ? TlMap.fromMap(map['chat_list']) as ChatList
        : null;
    unread_count = map.containsKey('unread_count') ? map['unread_count'] : null;
    unread_unmuted_count = map.containsKey('unread_unmuted_count')
        ? map['unread_unmuted_count']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_list': chat_list?.toMap(skipNulls: skipNulls),
      'unread_count': unread_count?.toMap(skipNulls: skipNulls),
      'unread_unmuted_count': unread_unmuted_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateUnreadChatCount extends Update {
  String get tlType => 'updateUnreadChatCount';

  string? extra;
  int? client_id;
  ChatList? chat_list;
  int32? total_count;
  int32? unread_count;
  int32? unread_unmuted_count;
  int32? marked_as_unread_count;
  int32? marked_as_unread_unmuted_count;

  UpdateUnreadChatCount({
    string? this.extra,
    int? this.client_id,
    ChatList? this.chat_list,
    int32? this.total_count,
    int32? this.unread_count,
    int32? this.unread_unmuted_count,
    int32? this.marked_as_unread_count,
    int32? this.marked_as_unread_unmuted_count,
  });

  UpdateUnreadChatCount.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_list = map.containsKey('chat_list')
        ? TlMap.fromMap(map['chat_list']) as ChatList
        : null;
    total_count = map.containsKey('total_count') ? map['total_count'] : null;
    unread_count = map.containsKey('unread_count') ? map['unread_count'] : null;
    unread_unmuted_count = map.containsKey('unread_unmuted_count')
        ? map['unread_unmuted_count']
        : null;
    marked_as_unread_count = map.containsKey('marked_as_unread_count')
        ? map['marked_as_unread_count']
        : null;
    marked_as_unread_unmuted_count =
        map.containsKey('marked_as_unread_unmuted_count')
            ? map['marked_as_unread_unmuted_count']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_list': chat_list?.toMap(skipNulls: skipNulls),
      'total_count': total_count?.toMap(skipNulls: skipNulls),
      'unread_count': unread_count?.toMap(skipNulls: skipNulls),
      'unread_unmuted_count': unread_unmuted_count?.toMap(skipNulls: skipNulls),
      'marked_as_unread_count':
          marked_as_unread_count?.toMap(skipNulls: skipNulls),
      'marked_as_unread_unmuted_count':
          marked_as_unread_unmuted_count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateOption extends Update {
  String get tlType => 'updateOption';

  string? extra;
  int? client_id;
  string? name;
  OptionValue? value;

  UpdateOption({
    string? this.extra,
    int? this.client_id,
    string? this.name,
    OptionValue? this.value,
  });

  UpdateOption.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    value = map.containsKey('value')
        ? TlMap.fromMap(map['value']) as OptionValue
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateStickerSet extends Update {
  String get tlType => 'updateStickerSet';

  string? extra;
  int? client_id;
  StickerSet? sticker_set;

  UpdateStickerSet({
    string? this.extra,
    int? this.client_id,
    StickerSet? this.sticker_set,
  });

  UpdateStickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker_set = map.containsKey('sticker_set')
        ? TlMap.fromMap(map['sticker_set']) as StickerSet
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker_set': sticker_set?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateInstalledStickerSets extends Update {
  String get tlType => 'updateInstalledStickerSets';

  string? extra;
  int? client_id;
  Bool? is_masks;
  vector<int64>? sticker_set_ids;

  UpdateInstalledStickerSets({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_masks,
    vector<int64>? this.sticker_set_ids,
  });

  UpdateInstalledStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_masks = map.containsKey('is_masks') ? map['is_masks'] : null;
    if (map.containsKey('sticker_set_ids') && map['sticker_set_ids'] != null) {
      sticker_set_ids = [];
      var someValues = map['sticker_set_ids'];
      for (var someValue in someValues) {
        sticker_set_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_masks': is_masks?.toMap(skipNulls: skipNulls),
      'sticker_set_ids': sticker_set_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateTrendingStickerSets extends Update {
  String get tlType => 'updateTrendingStickerSets';

  string? extra;
  int? client_id;
  StickerSets? sticker_sets;

  UpdateTrendingStickerSets({
    string? this.extra,
    int? this.client_id,
    StickerSets? this.sticker_sets,
  });

  UpdateTrendingStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker_sets = map.containsKey('sticker_sets')
        ? TlMap.fromMap(map['sticker_sets']) as StickerSets
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker_sets': sticker_sets?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateRecentStickers extends Update {
  String get tlType => 'updateRecentStickers';

  string? extra;
  int? client_id;
  Bool? is_attached;
  vector<int32>? sticker_ids;

  UpdateRecentStickers({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_attached,
    vector<int32>? this.sticker_ids,
  });

  UpdateRecentStickers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_attached = map.containsKey('is_attached') ? map['is_attached'] : null;
    if (map.containsKey('sticker_ids') && map['sticker_ids'] != null) {
      sticker_ids = [];
      var someValues = map['sticker_ids'];
      for (var someValue in someValues) {
        sticker_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_attached': is_attached?.toMap(skipNulls: skipNulls),
      'sticker_ids': sticker_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateFavoriteStickers extends Update {
  String get tlType => 'updateFavoriteStickers';

  string? extra;
  int? client_id;
  vector<int32>? sticker_ids;

  UpdateFavoriteStickers({
    string? this.extra,
    int? this.client_id,
    vector<int32>? this.sticker_ids,
  });

  UpdateFavoriteStickers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('sticker_ids') && map['sticker_ids'] != null) {
      sticker_ids = [];
      var someValues = map['sticker_ids'];
      for (var someValue in someValues) {
        sticker_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker_ids': sticker_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateSavedAnimations extends Update {
  String get tlType => 'updateSavedAnimations';

  string? extra;
  int? client_id;
  vector<int32>? animation_ids;

  UpdateSavedAnimations({
    string? this.extra,
    int? this.client_id,
    vector<int32>? this.animation_ids,
  });

  UpdateSavedAnimations.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('animation_ids') && map['animation_ids'] != null) {
      animation_ids = [];
      var someValues = map['animation_ids'];
      for (var someValue in someValues) {
        animation_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animation_ids': animation_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateSelectedBackground extends Update {
  String get tlType => 'updateSelectedBackground';

  string? extra;
  int? client_id;
  Bool? for_dark_theme;
  Background? background;

  UpdateSelectedBackground({
    string? this.extra,
    int? this.client_id,
    Bool? this.for_dark_theme,
    Background? this.background,
  });

  UpdateSelectedBackground.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    for_dark_theme =
        map.containsKey('for_dark_theme') ? map['for_dark_theme'] : null;
    background = map.containsKey('background')
        ? TlMap.fromMap(map['background']) as Background
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'for_dark_theme': for_dark_theme?.toMap(skipNulls: skipNulls),
      'background': background?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatThemes extends Update {
  String get tlType => 'updateChatThemes';

  string? extra;
  int? client_id;
  vector<ChatTheme>? chat_themes;

  UpdateChatThemes({
    string? this.extra,
    int? this.client_id,
    vector<ChatTheme>? this.chat_themes,
  });

  UpdateChatThemes.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('chat_themes') && map['chat_themes'] != null) {
      chat_themes = [];
      var someValues = map['chat_themes'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatTheme;
        chat_themes?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_themes': chat_themes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateLanguagePackStrings extends Update {
  String get tlType => 'updateLanguagePackStrings';

  string? extra;
  int? client_id;
  string? localization_target;
  string? language_pack_id;
  vector<LanguagePackString>? strings;

  UpdateLanguagePackStrings({
    string? this.extra,
    int? this.client_id,
    string? this.localization_target,
    string? this.language_pack_id,
    vector<LanguagePackString>? this.strings,
  });

  UpdateLanguagePackStrings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    localization_target = map.containsKey('localization_target')
        ? map['localization_target']
        : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
    if (map.containsKey('strings') && map['strings'] != null) {
      strings = [];
      var someValues = map['strings'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as LanguagePackString;
        strings?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'localization_target': localization_target?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
      'strings': strings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateConnectionState extends Update {
  String get tlType => 'updateConnectionState';

  string? extra;
  int? client_id;
  ConnectionState? state;

  UpdateConnectionState({
    string? this.extra,
    int? this.client_id,
    ConnectionState? this.state,
  });

  UpdateConnectionState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    state = map.containsKey('state')
        ? TlMap.fromMap(map['state']) as ConnectionState
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'state': state?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateTermsOfService extends Update {
  String get tlType => 'updateTermsOfService';

  string? extra;
  int? client_id;
  string? terms_of_service_id;
  TermsOfService? terms_of_service;

  UpdateTermsOfService({
    string? this.extra,
    int? this.client_id,
    string? this.terms_of_service_id,
    TermsOfService? this.terms_of_service,
  });

  UpdateTermsOfService.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    terms_of_service_id = map.containsKey('terms_of_service_id')
        ? map['terms_of_service_id']
        : null;
    terms_of_service = map.containsKey('terms_of_service')
        ? TlMap.fromMap(map['terms_of_service']) as TermsOfService
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'terms_of_service_id': terms_of_service_id?.toMap(skipNulls: skipNulls),
      'terms_of_service': terms_of_service?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateUsersNearby extends Update {
  String get tlType => 'updateUsersNearby';

  string? extra;
  int? client_id;
  vector<ChatNearby>? users_nearby;

  UpdateUsersNearby({
    string? this.extra,
    int? this.client_id,
    vector<ChatNearby>? this.users_nearby,
  });

  UpdateUsersNearby.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('users_nearby') && map['users_nearby'] != null) {
      users_nearby = [];
      var someValues = map['users_nearby'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ChatNearby;
        users_nearby?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'users_nearby': users_nearby?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateDiceEmojis extends Update {
  String get tlType => 'updateDiceEmojis';

  string? extra;
  int? client_id;
  vector<string>? emojis;

  UpdateDiceEmojis({
    string? this.extra,
    int? this.client_id,
    vector<string>? this.emojis,
  });

  UpdateDiceEmojis.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('emojis') && map['emojis'] != null) {
      emojis = [];
      var someValues = map['emojis'];
      for (var someValue in someValues) {
        emojis?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'emojis': emojis?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateAnimatedEmojiMessageClicked extends Update {
  String get tlType => 'updateAnimatedEmojiMessageClicked';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  Sticker? sticker;

  UpdateAnimatedEmojiMessageClicked({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    Sticker? this.sticker,
  });

  UpdateAnimatedEmojiMessageClicked.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as Sticker
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateAnimationSearchParameters extends Update {
  String get tlType => 'updateAnimationSearchParameters';

  string? extra;
  int? client_id;
  string? provider;
  vector<string>? emojis;

  UpdateAnimationSearchParameters({
    string? this.extra,
    int? this.client_id,
    string? this.provider,
    vector<string>? this.emojis,
  });

  UpdateAnimationSearchParameters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    provider = map.containsKey('provider') ? map['provider'] : null;
    if (map.containsKey('emojis') && map['emojis'] != null) {
      emojis = [];
      var someValues = map['emojis'];
      for (var someValue in someValues) {
        emojis?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'provider': provider?.toMap(skipNulls: skipNulls),
      'emojis': emojis?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateSuggestedActions extends Update {
  String get tlType => 'updateSuggestedActions';

  string? extra;
  int? client_id;
  vector<SuggestedAction>? added_actions;
  vector<SuggestedAction>? removed_actions;

  UpdateSuggestedActions({
    string? this.extra,
    int? this.client_id,
    vector<SuggestedAction>? this.added_actions,
    vector<SuggestedAction>? this.removed_actions,
  });

  UpdateSuggestedActions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('added_actions') && map['added_actions'] != null) {
      added_actions = [];
      var someValues = map['added_actions'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as SuggestedAction;
        added_actions?.add(obj);
      }
    }
    if (map.containsKey('removed_actions') && map['removed_actions'] != null) {
      removed_actions = [];
      var someValues = map['removed_actions'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as SuggestedAction;
        removed_actions?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'added_actions': added_actions?.toMap(skipNulls: skipNulls),
      'removed_actions': removed_actions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewInlineQuery extends Update {
  String get tlType => 'updateNewInlineQuery';

  string? extra;
  int? client_id;
  int64? id;
  int53? sender_user_id;
  Location? user_location;
  ChatType? chat_type;
  string? query;
  string? offset;

  UpdateNewInlineQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    int53? this.sender_user_id,
    Location? this.user_location,
    ChatType? this.chat_type,
    string? this.query,
    string? this.offset,
  });

  UpdateNewInlineQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    sender_user_id =
        map.containsKey('sender_user_id') ? map['sender_user_id'] : null;
    user_location = map.containsKey('user_location')
        ? TlMap.fromMap(map['user_location']) as Location
        : null;
    chat_type = map.containsKey('chat_type')
        ? TlMap.fromMap(map['chat_type']) as ChatType
        : null;
    query = map.containsKey('query') ? map['query'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'sender_user_id': sender_user_id?.toMap(skipNulls: skipNulls),
      'user_location': user_location?.toMap(skipNulls: skipNulls),
      'chat_type': chat_type?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewChosenInlineResult extends Update {
  String get tlType => 'updateNewChosenInlineResult';

  string? extra;
  int? client_id;
  int53? sender_user_id;
  Location? user_location;
  string? query;
  string? result_id;
  string? inline_message_id;

  UpdateNewChosenInlineResult({
    string? this.extra,
    int? this.client_id,
    int53? this.sender_user_id,
    Location? this.user_location,
    string? this.query,
    string? this.result_id,
    string? this.inline_message_id,
  });

  UpdateNewChosenInlineResult.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sender_user_id =
        map.containsKey('sender_user_id') ? map['sender_user_id'] : null;
    user_location = map.containsKey('user_location')
        ? TlMap.fromMap(map['user_location']) as Location
        : null;
    query = map.containsKey('query') ? map['query'] : null;
    result_id = map.containsKey('result_id') ? map['result_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sender_user_id': sender_user_id?.toMap(skipNulls: skipNulls),
      'user_location': user_location?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'result_id': result_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewCallbackQuery extends Update {
  String get tlType => 'updateNewCallbackQuery';

  string? extra;
  int? client_id;
  int64? id;
  int53? sender_user_id;
  int53? chat_id;
  int53? message_id;
  int64? chat_instance;
  CallbackQueryPayload? payload;

  UpdateNewCallbackQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    int53? this.sender_user_id,
    int53? this.chat_id,
    int53? this.message_id,
    int64? this.chat_instance,
    CallbackQueryPayload? this.payload,
  });

  UpdateNewCallbackQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    sender_user_id =
        map.containsKey('sender_user_id') ? map['sender_user_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    chat_instance =
        map.containsKey('chat_instance') ? map['chat_instance'] : null;
    payload = map.containsKey('payload')
        ? TlMap.fromMap(map['payload']) as CallbackQueryPayload
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'sender_user_id': sender_user_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'chat_instance': chat_instance?.toMap(skipNulls: skipNulls),
      'payload': payload?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewInlineCallbackQuery extends Update {
  String get tlType => 'updateNewInlineCallbackQuery';

  string? extra;
  int? client_id;
  int64? id;
  int53? sender_user_id;
  string? inline_message_id;
  int64? chat_instance;
  CallbackQueryPayload? payload;

  UpdateNewInlineCallbackQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    int53? this.sender_user_id,
    string? this.inline_message_id,
    int64? this.chat_instance,
    CallbackQueryPayload? this.payload,
  });

  UpdateNewInlineCallbackQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    sender_user_id =
        map.containsKey('sender_user_id') ? map['sender_user_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
    chat_instance =
        map.containsKey('chat_instance') ? map['chat_instance'] : null;
    payload = map.containsKey('payload')
        ? TlMap.fromMap(map['payload']) as CallbackQueryPayload
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'sender_user_id': sender_user_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
      'chat_instance': chat_instance?.toMap(skipNulls: skipNulls),
      'payload': payload?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewShippingQuery extends Update {
  String get tlType => 'updateNewShippingQuery';

  string? extra;
  int? client_id;
  int64? id;
  int53? sender_user_id;
  string? invoice_payload;
  Address? shipping_address;

  UpdateNewShippingQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    int53? this.sender_user_id,
    string? this.invoice_payload,
    Address? this.shipping_address,
  });

  UpdateNewShippingQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    sender_user_id =
        map.containsKey('sender_user_id') ? map['sender_user_id'] : null;
    invoice_payload =
        map.containsKey('invoice_payload') ? map['invoice_payload'] : null;
    shipping_address = map.containsKey('shipping_address')
        ? TlMap.fromMap(map['shipping_address']) as Address
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'sender_user_id': sender_user_id?.toMap(skipNulls: skipNulls),
      'invoice_payload': invoice_payload?.toMap(skipNulls: skipNulls),
      'shipping_address': shipping_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewPreCheckoutQuery extends Update {
  String get tlType => 'updateNewPreCheckoutQuery';

  string? extra;
  int? client_id;
  int64? id;
  int53? sender_user_id;
  string? currency;
  int53? total_amount;
  bytes? invoice_payload;
  string? shipping_option_id;
  OrderInfo? order_info;

  UpdateNewPreCheckoutQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    int53? this.sender_user_id,
    string? this.currency,
    int53? this.total_amount,
    bytes? this.invoice_payload,
    string? this.shipping_option_id,
    OrderInfo? this.order_info,
  });

  UpdateNewPreCheckoutQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    sender_user_id =
        map.containsKey('sender_user_id') ? map['sender_user_id'] : null;
    currency = map.containsKey('currency') ? map['currency'] : null;
    total_amount = map.containsKey('total_amount') ? map['total_amount'] : null;
    invoice_payload =
        map.containsKey('invoice_payload') ? map['invoice_payload'] : null;
    shipping_option_id = map.containsKey('shipping_option_id')
        ? map['shipping_option_id']
        : null;
    order_info = map.containsKey('order_info')
        ? TlMap.fromMap(map['order_info']) as OrderInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'sender_user_id': sender_user_id?.toMap(skipNulls: skipNulls),
      'currency': currency?.toMap(skipNulls: skipNulls),
      'total_amount': total_amount?.toMap(skipNulls: skipNulls),
      'invoice_payload': invoice_payload?.toMap(skipNulls: skipNulls),
      'shipping_option_id': shipping_option_id?.toMap(skipNulls: skipNulls),
      'order_info': order_info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewCustomEvent extends Update {
  String get tlType => 'updateNewCustomEvent';

  string? extra;
  int? client_id;
  string? event;

  UpdateNewCustomEvent({
    string? this.extra,
    int? this.client_id,
    string? this.event,
  });

  UpdateNewCustomEvent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    event = map.containsKey('event') ? map['event'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'event': event?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewCustomQuery extends Update {
  String get tlType => 'updateNewCustomQuery';

  string? extra;
  int? client_id;
  int64? id;
  string? data;
  int32? timeout;

  UpdateNewCustomQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.id,
    string? this.data,
    int32? this.timeout,
  });

  UpdateNewCustomQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    id = map.containsKey('id') ? map['id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
    timeout = map.containsKey('timeout') ? map['timeout'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'id': id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
      'timeout': timeout?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdatePoll extends Update {
  String get tlType => 'updatePoll';

  string? extra;
  int? client_id;
  Poll? poll;

  UpdatePoll({
    string? this.extra,
    int? this.client_id,
    Poll? this.poll,
  });

  UpdatePoll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    poll = map.containsKey('poll') ? TlMap.fromMap(map['poll']) as Poll : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'poll': poll?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdatePollAnswer extends Update {
  String get tlType => 'updatePollAnswer';

  string? extra;
  int? client_id;
  int64? poll_id;
  int53? user_id;
  vector<int32>? option_ids;

  UpdatePollAnswer({
    string? this.extra,
    int? this.client_id,
    int64? this.poll_id,
    int53? this.user_id,
    vector<int32>? this.option_ids,
  });

  UpdatePollAnswer.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    poll_id = map.containsKey('poll_id') ? map['poll_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    if (map.containsKey('option_ids') && map['option_ids'] != null) {
      option_ids = [];
      var someValues = map['option_ids'];
      for (var someValue in someValues) {
        option_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'poll_id': poll_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'option_ids': option_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateChatMember extends Update {
  String get tlType => 'updateChatMember';

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? actor_user_id;
  int32? date;
  ChatInviteLink? invite_link;
  ChatMember? old_chat_member;
  ChatMember? new_chat_member;

  UpdateChatMember({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.actor_user_id,
    int32? this.date,
    ChatInviteLink? this.invite_link,
    ChatMember? this.old_chat_member,
    ChatMember? this.new_chat_member,
  });

  UpdateChatMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    actor_user_id =
        map.containsKey('actor_user_id') ? map['actor_user_id'] : null;
    date = map.containsKey('date') ? map['date'] : null;
    invite_link = map.containsKey('invite_link')
        ? TlMap.fromMap(map['invite_link']) as ChatInviteLink
        : null;
    old_chat_member = map.containsKey('old_chat_member')
        ? TlMap.fromMap(map['old_chat_member']) as ChatMember
        : null;
    new_chat_member = map.containsKey('new_chat_member')
        ? TlMap.fromMap(map['new_chat_member']) as ChatMember
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'actor_user_id': actor_user_id?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
      'old_chat_member': old_chat_member?.toMap(skipNulls: skipNulls),
      'new_chat_member': new_chat_member?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpdateNewChatJoinRequest extends Update {
  String get tlType => 'updateNewChatJoinRequest';

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatJoinRequest? request;
  ChatInviteLink? invite_link;

  UpdateNewChatJoinRequest({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatJoinRequest? this.request,
    ChatInviteLink? this.invite_link,
  });

  UpdateNewChatJoinRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    request = map.containsKey('request')
        ? TlMap.fromMap(map['request']) as ChatJoinRequest
        : null;
    invite_link = map.containsKey('invite_link')
        ? TlMap.fromMap(map['invite_link']) as ChatInviteLink
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'request': request?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Updates extends TdObject {
  String get tlType => 'updates';

  string? extra;
  int? client_id;
  vector<Update>? updates;

  Updates({
    string? this.extra,
    int? this.client_id,
    vector<Update>? this.updates,
  });

  Updates.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('updates') && map['updates'] != null) {
      updates = [];
      var someValues = map['updates'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Update;
        updates?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'updates': updates?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LogStreamDefault extends LogStream {
  String get tlType => 'logStreamDefault';

  string? extra;
  int? client_id;

  LogStreamDefault({
    string? this.extra,
    int? this.client_id,
  });

  LogStreamDefault.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LogStreamFile extends LogStream {
  String get tlType => 'logStreamFile';

  string? extra;
  int? client_id;
  string? path;
  int53? max_file_size;
  Bool? redirect_stderr;

  LogStreamFile({
    string? this.extra,
    int? this.client_id,
    string? this.path,
    int53? this.max_file_size,
    Bool? this.redirect_stderr,
  });

  LogStreamFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    path = map.containsKey('path') ? map['path'] : null;
    max_file_size =
        map.containsKey('max_file_size') ? map['max_file_size'] : null;
    redirect_stderr =
        map.containsKey('redirect_stderr') ? map['redirect_stderr'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'path': path?.toMap(skipNulls: skipNulls),
      'max_file_size': max_file_size?.toMap(skipNulls: skipNulls),
      'redirect_stderr': redirect_stderr?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LogStreamEmpty extends LogStream {
  String get tlType => 'logStreamEmpty';

  string? extra;
  int? client_id;

  LogStreamEmpty({
    string? this.extra,
    int? this.client_id,
  });

  LogStreamEmpty.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LogVerbosityLevel extends TdObject {
  String get tlType => 'logVerbosityLevel';

  string? extra;
  int? client_id;
  int32? verbosity_level;

  LogVerbosityLevel({
    string? this.extra,
    int? this.client_id,
    int32? this.verbosity_level,
  });

  LogVerbosityLevel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    verbosity_level =
        map.containsKey('verbosity_level') ? map['verbosity_level'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'verbosity_level': verbosity_level?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LogTags extends TdObject {
  String get tlType => 'logTags';

  string? extra;
  int? client_id;
  vector<string>? tags;

  LogTags({
    string? this.extra,
    int? this.client_id,
    vector<string>? this.tags,
  });

  LogTags.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('tags') && map['tags'] != null) {
      tags = [];
      var someValues = map['tags'];
      for (var someValue in someValues) {
        tags?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'tags': tags?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestInt extends TdObject {
  String get tlType => 'testInt';

  string? extra;
  int? client_id;
  int32? value;

  TestInt({
    string? this.extra,
    int? this.client_id,
    int32? this.value,
  });

  TestInt.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestString extends TdObject {
  String get tlType => 'testString';

  string? extra;
  int? client_id;
  string? value;

  TestString({
    string? this.extra,
    int? this.client_id,
    string? this.value,
  });

  TestString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestBytes extends TdObject {
  String get tlType => 'testBytes';

  string? extra;
  int? client_id;
  bytes? value;

  TestBytes({
    string? this.extra,
    int? this.client_id,
    bytes? this.value,
  });

  TestBytes.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    value = map.containsKey('value') ? map['value'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestVectorInt extends TdObject {
  String get tlType => 'testVectorInt';

  string? extra;
  int? client_id;
  vector<int32>? value;

  TestVectorInt({
    string? this.extra,
    int? this.client_id,
    vector<int32>? this.value,
  });

  TestVectorInt.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('value') && map['value'] != null) {
      value = [];
      var someValues = map['value'];
      for (var someValue in someValues) {
        value?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestVectorIntObject extends TdObject {
  String get tlType => 'testVectorIntObject';

  string? extra;
  int? client_id;
  vector<TestInt>? value;

  TestVectorIntObject({
    string? this.extra,
    int? this.client_id,
    vector<TestInt>? this.value,
  });

  TestVectorIntObject.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('value') && map['value'] != null) {
      value = [];
      var someValues = map['value'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as TestInt;
        value?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestVectorString extends TdObject {
  String get tlType => 'testVectorString';

  string? extra;
  int? client_id;
  vector<string>? value;

  TestVectorString({
    string? this.extra,
    int? this.client_id,
    vector<string>? this.value,
  });

  TestVectorString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('value') && map['value'] != null) {
      value = [];
      var someValues = map['value'];
      for (var someValue in someValues) {
        value?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestVectorStringObject extends TdObject {
  String get tlType => 'testVectorStringObject';

  string? extra;
  int? client_id;
  vector<TestString>? value;

  TestVectorStringObject({
    string? this.extra,
    int? this.client_id,
    vector<TestString>? this.value,
  });

  TestVectorStringObject.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('value') && map['value'] != null) {
      value = [];
      var someValues = map['value'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as TestString;
        value?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetAuthorizationState extends TdFunction {
  String get tlType => 'getAuthorizationState';

  Type get tdReturnType => AuthorizationState;

  string? extra;
  int? client_id;

  GetAuthorizationState({
    string? this.extra,
    int? this.client_id,
  });

  GetAuthorizationState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetTdlibParameters extends TdFunction {
  String get tlType => 'setTdlibParameters';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  TdlibParameters? parameters;

  SetTdlibParameters({
    string? this.extra,
    int? this.client_id,
    TdlibParameters? this.parameters,
  });

  SetTdlibParameters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    parameters = map.containsKey('parameters')
        ? TlMap.fromMap(map['parameters']) as TdlibParameters
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'parameters': parameters?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckDatabaseEncryptionKey extends TdFunction {
  String get tlType => 'checkDatabaseEncryptionKey';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  bytes? encryption_key;

  CheckDatabaseEncryptionKey({
    string? this.extra,
    int? this.client_id,
    bytes? this.encryption_key,
  });

  CheckDatabaseEncryptionKey.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    encryption_key =
        map.containsKey('encryption_key') ? map['encryption_key'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'encryption_key': encryption_key?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetAuthenticationPhoneNumber extends TdFunction {
  String get tlType => 'setAuthenticationPhoneNumber';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? phone_number;
  PhoneNumberAuthenticationSettings? settings;

  SetAuthenticationPhoneNumber({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number,
    PhoneNumberAuthenticationSettings? this.settings,
  });

  SetAuthenticationPhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
    settings = map.containsKey('settings')
        ? TlMap.fromMap(map['settings']) as PhoneNumberAuthenticationSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
      'settings': settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResendAuthenticationCode extends TdFunction {
  String get tlType => 'resendAuthenticationCode';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  ResendAuthenticationCode({
    string? this.extra,
    int? this.client_id,
  });

  ResendAuthenticationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckAuthenticationCode extends TdFunction {
  String get tlType => 'checkAuthenticationCode';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? code;

  CheckAuthenticationCode({
    string? this.extra,
    int? this.client_id,
    string? this.code,
  });

  CheckAuthenticationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code = map.containsKey('code') ? map['code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code': code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RequestQrCodeAuthentication extends TdFunction {
  String get tlType => 'requestQrCodeAuthentication';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  vector<int53>? other_user_ids;

  RequestQrCodeAuthentication({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.other_user_ids,
  });

  RequestQrCodeAuthentication.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('other_user_ids') && map['other_user_ids'] != null) {
      other_user_ids = [];
      var someValues = map['other_user_ids'];
      for (var someValue in someValues) {
        other_user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'other_user_ids': other_user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RegisterUser extends TdFunction {
  String get tlType => 'registerUser';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? first_name;
  string? last_name;

  RegisterUser({
    string? this.extra,
    int? this.client_id,
    string? this.first_name,
    string? this.last_name,
  });

  RegisterUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    first_name = map.containsKey('first_name') ? map['first_name'] : null;
    last_name = map.containsKey('last_name') ? map['last_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'first_name': first_name?.toMap(skipNulls: skipNulls),
      'last_name': last_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckAuthenticationPassword extends TdFunction {
  String get tlType => 'checkAuthenticationPassword';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? password;

  CheckAuthenticationPassword({
    string? this.extra,
    int? this.client_id,
    string? this.password,
  });

  CheckAuthenticationPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    password = map.containsKey('password') ? map['password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RequestAuthenticationPasswordRecovery extends TdFunction {
  String get tlType => 'requestAuthenticationPasswordRecovery';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  RequestAuthenticationPasswordRecovery({
    string? this.extra,
    int? this.client_id,
  });

  RequestAuthenticationPasswordRecovery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckAuthenticationPasswordRecoveryCode extends TdFunction {
  String get tlType => 'checkAuthenticationPasswordRecoveryCode';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? recovery_code;

  CheckAuthenticationPasswordRecoveryCode({
    string? this.extra,
    int? this.client_id,
    string? this.recovery_code,
  });

  CheckAuthenticationPasswordRecoveryCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    recovery_code =
        map.containsKey('recovery_code') ? map['recovery_code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'recovery_code': recovery_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RecoverAuthenticationPassword extends TdFunction {
  String get tlType => 'recoverAuthenticationPassword';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? recovery_code;
  string? new_password;
  string? new_hint;

  RecoverAuthenticationPassword({
    string? this.extra,
    int? this.client_id,
    string? this.recovery_code,
    string? this.new_password,
    string? this.new_hint,
  });

  RecoverAuthenticationPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    recovery_code =
        map.containsKey('recovery_code') ? map['recovery_code'] : null;
    new_password = map.containsKey('new_password') ? map['new_password'] : null;
    new_hint = map.containsKey('new_hint') ? map['new_hint'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'recovery_code': recovery_code?.toMap(skipNulls: skipNulls),
      'new_password': new_password?.toMap(skipNulls: skipNulls),
      'new_hint': new_hint?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckAuthenticationBotToken extends TdFunction {
  String get tlType => 'checkAuthenticationBotToken';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? token;

  CheckAuthenticationBotToken({
    string? this.extra,
    int? this.client_id,
    string? this.token,
  });

  CheckAuthenticationBotToken.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    token = map.containsKey('token') ? map['token'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'token': token?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LogOut extends TdFunction {
  String get tlType => 'logOut';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  LogOut({
    string? this.extra,
    int? this.client_id,
  });

  LogOut.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Close extends TdFunction {
  String get tlType => 'close';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  Close({
    string? this.extra,
    int? this.client_id,
  });

  Close.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class Destroy extends TdFunction {
  String get tlType => 'destroy';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  Destroy({
    string? this.extra,
    int? this.client_id,
  });

  Destroy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ConfirmQrCodeAuthentication extends TdFunction {
  String get tlType => 'confirmQrCodeAuthentication';

  Type get tdReturnType => Session;

  string? extra;
  int? client_id;
  string? link;

  ConfirmQrCodeAuthentication({
    string? this.extra,
    int? this.client_id,
    string? this.link,
  });

  ConfirmQrCodeAuthentication.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    link = map.containsKey('link') ? map['link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetCurrentState extends TdFunction {
  String get tlType => 'getCurrentState';

  Type get tdReturnType => Updates;

  string? extra;
  int? client_id;

  GetCurrentState({
    string? this.extra,
    int? this.client_id,
  });

  GetCurrentState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetDatabaseEncryptionKey extends TdFunction {
  String get tlType => 'setDatabaseEncryptionKey';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  bytes? new_encryption_key;

  SetDatabaseEncryptionKey({
    string? this.extra,
    int? this.client_id,
    bytes? this.new_encryption_key,
  });

  SetDatabaseEncryptionKey.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    new_encryption_key = map.containsKey('new_encryption_key')
        ? map['new_encryption_key']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'new_encryption_key': new_encryption_key?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPasswordState extends TdFunction {
  String get tlType => 'getPasswordState';

  Type get tdReturnType => PasswordState;

  string? extra;
  int? client_id;

  GetPasswordState({
    string? this.extra,
    int? this.client_id,
  });

  GetPasswordState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetPassword extends TdFunction {
  String get tlType => 'setPassword';

  Type get tdReturnType => PasswordState;

  string? extra;
  int? client_id;
  string? old_password;
  string? new_password;
  string? new_hint;
  Bool? set_recovery_email_address;
  string? new_recovery_email_address;

  SetPassword({
    string? this.extra,
    int? this.client_id,
    string? this.old_password,
    string? this.new_password,
    string? this.new_hint,
    Bool? this.set_recovery_email_address,
    string? this.new_recovery_email_address,
  });

  SetPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    old_password = map.containsKey('old_password') ? map['old_password'] : null;
    new_password = map.containsKey('new_password') ? map['new_password'] : null;
    new_hint = map.containsKey('new_hint') ? map['new_hint'] : null;
    set_recovery_email_address = map.containsKey('set_recovery_email_address')
        ? map['set_recovery_email_address']
        : null;
    new_recovery_email_address = map.containsKey('new_recovery_email_address')
        ? map['new_recovery_email_address']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'old_password': old_password?.toMap(skipNulls: skipNulls),
      'new_password': new_password?.toMap(skipNulls: skipNulls),
      'new_hint': new_hint?.toMap(skipNulls: skipNulls),
      'set_recovery_email_address':
          set_recovery_email_address?.toMap(skipNulls: skipNulls),
      'new_recovery_email_address':
          new_recovery_email_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetRecoveryEmailAddress extends TdFunction {
  String get tlType => 'getRecoveryEmailAddress';

  Type get tdReturnType => RecoveryEmailAddress;

  string? extra;
  int? client_id;
  string? password;

  GetRecoveryEmailAddress({
    string? this.extra,
    int? this.client_id,
    string? this.password,
  });

  GetRecoveryEmailAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    password = map.containsKey('password') ? map['password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetRecoveryEmailAddress extends TdFunction {
  String get tlType => 'setRecoveryEmailAddress';

  Type get tdReturnType => PasswordState;

  string? extra;
  int? client_id;
  string? password;
  string? new_recovery_email_address;

  SetRecoveryEmailAddress({
    string? this.extra,
    int? this.client_id,
    string? this.password,
    string? this.new_recovery_email_address,
  });

  SetRecoveryEmailAddress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    password = map.containsKey('password') ? map['password'] : null;
    new_recovery_email_address = map.containsKey('new_recovery_email_address')
        ? map['new_recovery_email_address']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
      'new_recovery_email_address':
          new_recovery_email_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckRecoveryEmailAddressCode extends TdFunction {
  String get tlType => 'checkRecoveryEmailAddressCode';

  Type get tdReturnType => PasswordState;

  string? extra;
  int? client_id;
  string? code;

  CheckRecoveryEmailAddressCode({
    string? this.extra,
    int? this.client_id,
    string? this.code,
  });

  CheckRecoveryEmailAddressCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code = map.containsKey('code') ? map['code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code': code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResendRecoveryEmailAddressCode extends TdFunction {
  String get tlType => 'resendRecoveryEmailAddressCode';

  Type get tdReturnType => PasswordState;

  string? extra;
  int? client_id;

  ResendRecoveryEmailAddressCode({
    string? this.extra,
    int? this.client_id,
  });

  ResendRecoveryEmailAddressCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RequestPasswordRecovery extends TdFunction {
  String get tlType => 'requestPasswordRecovery';

  Type get tdReturnType => EmailAddressAuthenticationCodeInfo;

  string? extra;
  int? client_id;

  RequestPasswordRecovery({
    string? this.extra,
    int? this.client_id,
  });

  RequestPasswordRecovery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckPasswordRecoveryCode extends TdFunction {
  String get tlType => 'checkPasswordRecoveryCode';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? recovery_code;

  CheckPasswordRecoveryCode({
    string? this.extra,
    int? this.client_id,
    string? this.recovery_code,
  });

  CheckPasswordRecoveryCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    recovery_code =
        map.containsKey('recovery_code') ? map['recovery_code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'recovery_code': recovery_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RecoverPassword extends TdFunction {
  String get tlType => 'recoverPassword';

  Type get tdReturnType => PasswordState;

  string? extra;
  int? client_id;
  string? recovery_code;
  string? new_password;
  string? new_hint;

  RecoverPassword({
    string? this.extra,
    int? this.client_id,
    string? this.recovery_code,
    string? this.new_password,
    string? this.new_hint,
  });

  RecoverPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    recovery_code =
        map.containsKey('recovery_code') ? map['recovery_code'] : null;
    new_password = map.containsKey('new_password') ? map['new_password'] : null;
    new_hint = map.containsKey('new_hint') ? map['new_hint'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'recovery_code': recovery_code?.toMap(skipNulls: skipNulls),
      'new_password': new_password?.toMap(skipNulls: skipNulls),
      'new_hint': new_hint?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResetPassword extends TdFunction {
  String get tlType => 'resetPassword';

  Type get tdReturnType => ResetPasswordResult;

  string? extra;
  int? client_id;

  ResetPassword({
    string? this.extra,
    int? this.client_id,
  });

  ResetPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CancelPasswordReset extends TdFunction {
  String get tlType => 'cancelPasswordReset';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  CancelPasswordReset({
    string? this.extra,
    int? this.client_id,
  });

  CancelPasswordReset.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateTemporaryPassword extends TdFunction {
  String get tlType => 'createTemporaryPassword';

  Type get tdReturnType => TemporaryPasswordState;

  string? extra;
  int? client_id;
  string? password;
  int32? valid_for;

  CreateTemporaryPassword({
    string? this.extra,
    int? this.client_id,
    string? this.password,
    int32? this.valid_for,
  });

  CreateTemporaryPassword.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    password = map.containsKey('password') ? map['password'] : null;
    valid_for = map.containsKey('valid_for') ? map['valid_for'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
      'valid_for': valid_for?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetTemporaryPasswordState extends TdFunction {
  String get tlType => 'getTemporaryPasswordState';

  Type get tdReturnType => TemporaryPasswordState;

  string? extra;
  int? client_id;

  GetTemporaryPasswordState({
    string? this.extra,
    int? this.client_id,
  });

  GetTemporaryPasswordState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMe extends TdFunction {
  String get tlType => 'getMe';

  Type get tdReturnType => User;

  string? extra;
  int? client_id;

  GetMe({
    string? this.extra,
    int? this.client_id,
  });

  GetMe.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetUser extends TdFunction {
  String get tlType => 'getUser';

  Type get tdReturnType => User;

  string? extra;
  int? client_id;
  int53? user_id;

  GetUser({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  GetUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetUserFullInfo extends TdFunction {
  String get tlType => 'getUserFullInfo';

  Type get tdReturnType => UserFullInfo;

  string? extra;
  int? client_id;
  int53? user_id;

  GetUserFullInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  GetUserFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetBasicGroup extends TdFunction {
  String get tlType => 'getBasicGroup';

  Type get tdReturnType => BasicGroup;

  string? extra;
  int? client_id;
  int53? basic_group_id;

  GetBasicGroup({
    string? this.extra,
    int? this.client_id,
    int53? this.basic_group_id,
  });

  GetBasicGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    basic_group_id =
        map.containsKey('basic_group_id') ? map['basic_group_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'basic_group_id': basic_group_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetBasicGroupFullInfo extends TdFunction {
  String get tlType => 'getBasicGroupFullInfo';

  Type get tdReturnType => BasicGroupFullInfo;

  string? extra;
  int? client_id;
  int53? basic_group_id;

  GetBasicGroupFullInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.basic_group_id,
  });

  GetBasicGroupFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    basic_group_id =
        map.containsKey('basic_group_id') ? map['basic_group_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'basic_group_id': basic_group_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSupergroup extends TdFunction {
  String get tlType => 'getSupergroup';

  Type get tdReturnType => Supergroup;

  string? extra;
  int? client_id;
  int53? supergroup_id;

  GetSupergroup({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
  });

  GetSupergroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSupergroupFullInfo extends TdFunction {
  String get tlType => 'getSupergroupFullInfo';

  Type get tdReturnType => SupergroupFullInfo;

  string? extra;
  int? client_id;
  int53? supergroup_id;

  GetSupergroupFullInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
  });

  GetSupergroupFullInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSecretChat extends TdFunction {
  String get tlType => 'getSecretChat';

  Type get tdReturnType => SecretChat;

  string? extra;
  int? client_id;
  int32? secret_chat_id;

  GetSecretChat({
    string? this.extra,
    int? this.client_id,
    int32? this.secret_chat_id,
  });

  GetSecretChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    secret_chat_id =
        map.containsKey('secret_chat_id') ? map['secret_chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'secret_chat_id': secret_chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChat extends TdFunction {
  String get tlType => 'getChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessage extends TdFunction {
  String get tlType => 'getMessage';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  GetMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  GetMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageLocally extends TdFunction {
  String get tlType => 'getMessageLocally';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  GetMessageLocally({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  GetMessageLocally.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetRepliedMessage extends TdFunction {
  String get tlType => 'getRepliedMessage';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  GetRepliedMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  GetRepliedMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatPinnedMessage extends TdFunction {
  String get tlType => 'getChatPinnedMessage';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetChatPinnedMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetChatPinnedMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetCallbackQueryMessage extends TdFunction {
  String get tlType => 'getCallbackQueryMessage';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int64? callback_query_id;

  GetCallbackQueryMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int64? this.callback_query_id,
  });

  GetCallbackQueryMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    callback_query_id =
        map.containsKey('callback_query_id') ? map['callback_query_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'callback_query_id': callback_query_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessages extends TdFunction {
  String get tlType => 'getMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;
  vector<int53>? message_ids;

  GetMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    vector<int53>? this.message_ids,
  });

  GetMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    if (map.containsKey('message_ids') && map['message_ids'] != null) {
      message_ids = [];
      var someValues = map['message_ids'];
      for (var someValue in someValues) {
        message_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_ids': message_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageThread extends TdFunction {
  String get tlType => 'getMessageThread';

  Type get tdReturnType => MessageThreadInfo;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  GetMessageThread({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  GetMessageThread.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageViewers extends TdFunction {
  String get tlType => 'getMessageViewers';

  Type get tdReturnType => Users;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  GetMessageViewers({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  GetMessageViewers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetFile extends TdFunction {
  String get tlType => 'getFile';

  Type get tdReturnType => File;

  string? extra;
  int? client_id;
  int32? file_id;

  GetFile({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
  });

  GetFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetRemoteFile extends TdFunction {
  String get tlType => 'getRemoteFile';

  Type get tdReturnType => File;

  string? extra;
  int? client_id;
  string? remote_file_id;
  FileType? file_type;

  GetRemoteFile({
    string? this.extra,
    int? this.client_id,
    string? this.remote_file_id,
    FileType? this.file_type,
  });

  GetRemoteFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    remote_file_id =
        map.containsKey('remote_file_id') ? map['remote_file_id'] : null;
    file_type = map.containsKey('file_type')
        ? TlMap.fromMap(map['file_type']) as FileType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'remote_file_id': remote_file_id?.toMap(skipNulls: skipNulls),
      'file_type': file_type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LoadChats extends TdFunction {
  String get tlType => 'loadChats';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  ChatList? chat_list;
  int32? limit;

  LoadChats({
    string? this.extra,
    int? this.client_id,
    ChatList? this.chat_list,
    int32? this.limit,
  });

  LoadChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_list = map.containsKey('chat_list')
        ? TlMap.fromMap(map['chat_list']) as ChatList
        : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_list': chat_list?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChats extends TdFunction {
  String get tlType => 'getChats';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  ChatList? chat_list;
  int32? limit;

  GetChats({
    string? this.extra,
    int? this.client_id,
    ChatList? this.chat_list,
    int32? this.limit,
  });

  GetChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_list = map.containsKey('chat_list')
        ? TlMap.fromMap(map['chat_list']) as ChatList
        : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_list': chat_list?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchPublicChat extends TdFunction {
  String get tlType => 'searchPublicChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  string? username;

  SearchPublicChat({
    string? this.extra,
    int? this.client_id,
    string? this.username,
  });

  SearchPublicChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    username = map.containsKey('username') ? map['username'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchPublicChats extends TdFunction {
  String get tlType => 'searchPublicChats';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  string? query;

  SearchPublicChats({
    string? this.extra,
    int? this.client_id,
    string? this.query,
  });

  SearchPublicChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchChats extends TdFunction {
  String get tlType => 'searchChats';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  string? query;
  int32? limit;

  SearchChats({
    string? this.extra,
    int? this.client_id,
    string? this.query,
    int32? this.limit,
  });

  SearchChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchChatsOnServer extends TdFunction {
  String get tlType => 'searchChatsOnServer';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  string? query;
  int32? limit;

  SearchChatsOnServer({
    string? this.extra,
    int? this.client_id,
    string? this.query,
    int32? this.limit,
  });

  SearchChatsOnServer.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchChatsNearby extends TdFunction {
  String get tlType => 'searchChatsNearby';

  Type get tdReturnType => ChatsNearby;

  string? extra;
  int? client_id;
  Location? location;

  SearchChatsNearby({
    string? this.extra,
    int? this.client_id,
    Location? this.location,
  });

  SearchChatsNearby.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetTopChats extends TdFunction {
  String get tlType => 'getTopChats';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  TopChatCategory? category;
  int32? limit;

  GetTopChats({
    string? this.extra,
    int? this.client_id,
    TopChatCategory? this.category,
    int32? this.limit,
  });

  GetTopChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    category = map.containsKey('category')
        ? TlMap.fromMap(map['category']) as TopChatCategory
        : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'category': category?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveTopChat extends TdFunction {
  String get tlType => 'removeTopChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  TopChatCategory? category;
  int53? chat_id;

  RemoveTopChat({
    string? this.extra,
    int? this.client_id,
    TopChatCategory? this.category,
    int53? this.chat_id,
  });

  RemoveTopChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    category = map.containsKey('category')
        ? TlMap.fromMap(map['category']) as TopChatCategory
        : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'category': category?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddRecentlyFoundChat extends TdFunction {
  String get tlType => 'addRecentlyFoundChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  AddRecentlyFoundChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  AddRecentlyFoundChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveRecentlyFoundChat extends TdFunction {
  String get tlType => 'removeRecentlyFoundChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  RemoveRecentlyFoundChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  RemoveRecentlyFoundChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ClearRecentlyFoundChats extends TdFunction {
  String get tlType => 'clearRecentlyFoundChats';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  ClearRecentlyFoundChats({
    string? this.extra,
    int? this.client_id,
  });

  ClearRecentlyFoundChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetRecentlyOpenedChats extends TdFunction {
  String get tlType => 'getRecentlyOpenedChats';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  int32? limit;

  GetRecentlyOpenedChats({
    string? this.extra,
    int? this.client_id,
    int32? this.limit,
  });

  GetRecentlyOpenedChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckChatUsername extends TdFunction {
  String get tlType => 'checkChatUsername';

  Type get tdReturnType => CheckChatUsernameResult;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? username;

  CheckChatUsername({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.username,
  });

  CheckChatUsername.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    username = map.containsKey('username') ? map['username'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetCreatedPublicChats extends TdFunction {
  String get tlType => 'getCreatedPublicChats';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  PublicChatType? type;

  GetCreatedPublicChats({
    string? this.extra,
    int? this.client_id,
    PublicChatType? this.type,
  });

  GetCreatedPublicChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as PublicChatType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckCreatedPublicChatsLimit extends TdFunction {
  String get tlType => 'checkCreatedPublicChatsLimit';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  PublicChatType? type;

  CheckCreatedPublicChatsLimit({
    string? this.extra,
    int? this.client_id,
    PublicChatType? this.type,
  });

  CheckCreatedPublicChatsLimit.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as PublicChatType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSuitableDiscussionChats extends TdFunction {
  String get tlType => 'getSuitableDiscussionChats';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;

  GetSuitableDiscussionChats({
    string? this.extra,
    int? this.client_id,
  });

  GetSuitableDiscussionChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetInactiveSupergroupChats extends TdFunction {
  String get tlType => 'getInactiveSupergroupChats';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;

  GetInactiveSupergroupChats({
    string? this.extra,
    int? this.client_id,
  });

  GetInactiveSupergroupChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetGroupsInCommon extends TdFunction {
  String get tlType => 'getGroupsInCommon';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  int53? user_id;
  int53? offset_chat_id;
  int32? limit;

  GetGroupsInCommon({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    int53? this.offset_chat_id,
    int32? this.limit,
  });

  GetGroupsInCommon.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    offset_chat_id =
        map.containsKey('offset_chat_id') ? map['offset_chat_id'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'offset_chat_id': offset_chat_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatHistory extends TdFunction {
  String get tlType => 'getChatHistory';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? from_message_id;
  int32? offset;
  int32? limit;
  Bool? only_local;

  GetChatHistory({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.from_message_id,
    int32? this.offset,
    int32? this.limit,
    Bool? this.only_local,
  });

  GetChatHistory.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    from_message_id =
        map.containsKey('from_message_id') ? map['from_message_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
    only_local = map.containsKey('only_local') ? map['only_local'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'from_message_id': from_message_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
      'only_local': only_local?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageThreadHistory extends TdFunction {
  String get tlType => 'getMessageThreadHistory';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int53? from_message_id;
  int32? offset;
  int32? limit;

  GetMessageThreadHistory({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int53? this.from_message_id,
    int32? this.offset,
    int32? this.limit,
  });

  GetMessageThreadHistory.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    from_message_id =
        map.containsKey('from_message_id') ? map['from_message_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'from_message_id': from_message_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteChatHistory extends TdFunction {
  String get tlType => 'deleteChatHistory';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? remove_from_chat_list;
  Bool? revoke;

  DeleteChatHistory({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.remove_from_chat_list,
    Bool? this.revoke,
  });

  DeleteChatHistory.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    remove_from_chat_list = map.containsKey('remove_from_chat_list')
        ? map['remove_from_chat_list']
        : null;
    revoke = map.containsKey('revoke') ? map['revoke'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'remove_from_chat_list':
          remove_from_chat_list?.toMap(skipNulls: skipNulls),
      'revoke': revoke?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteChat extends TdFunction {
  String get tlType => 'deleteChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  DeleteChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  DeleteChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchChatMessages extends TdFunction {
  String get tlType => 'searchChatMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? query;
  MessageSender? sender_id;
  int53? from_message_id;
  int32? offset;
  int32? limit;
  SearchMessagesFilter? filter;
  int53? message_thread_id;

  SearchChatMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.query,
    MessageSender? this.sender_id,
    int53? this.from_message_id,
    int32? this.offset,
    int32? this.limit,
    SearchMessagesFilter? this.filter,
    int53? this.message_thread_id,
  });

  SearchChatMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    sender_id = map.containsKey('sender_id')
        ? TlMap.fromMap(map['sender_id']) as MessageSender
        : null;
    from_message_id =
        map.containsKey('from_message_id') ? map['from_message_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as SearchMessagesFilter
        : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'sender_id': sender_id?.toMap(skipNulls: skipNulls),
      'from_message_id': from_message_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchMessages extends TdFunction {
  String get tlType => 'searchMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  ChatList? chat_list;
  string? query;
  int32? offset_date;
  int53? offset_chat_id;
  int53? offset_message_id;
  int32? limit;
  SearchMessagesFilter? filter;
  int32? min_date;
  int32? max_date;

  SearchMessages({
    string? this.extra,
    int? this.client_id,
    ChatList? this.chat_list,
    string? this.query,
    int32? this.offset_date,
    int53? this.offset_chat_id,
    int53? this.offset_message_id,
    int32? this.limit,
    SearchMessagesFilter? this.filter,
    int32? this.min_date,
    int32? this.max_date,
  });

  SearchMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_list = map.containsKey('chat_list')
        ? TlMap.fromMap(map['chat_list']) as ChatList
        : null;
    query = map.containsKey('query') ? map['query'] : null;
    offset_date = map.containsKey('offset_date') ? map['offset_date'] : null;
    offset_chat_id =
        map.containsKey('offset_chat_id') ? map['offset_chat_id'] : null;
    offset_message_id =
        map.containsKey('offset_message_id') ? map['offset_message_id'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as SearchMessagesFilter
        : null;
    min_date = map.containsKey('min_date') ? map['min_date'] : null;
    max_date = map.containsKey('max_date') ? map['max_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_list': chat_list?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'offset_date': offset_date?.toMap(skipNulls: skipNulls),
      'offset_chat_id': offset_chat_id?.toMap(skipNulls: skipNulls),
      'offset_message_id': offset_message_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
      'min_date': min_date?.toMap(skipNulls: skipNulls),
      'max_date': max_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchSecretMessages extends TdFunction {
  String get tlType => 'searchSecretMessages';

  Type get tdReturnType => FoundMessages;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? query;
  string? offset;
  int32? limit;
  SearchMessagesFilter? filter;

  SearchSecretMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.query,
    string? this.offset,
    int32? this.limit,
    SearchMessagesFilter? this.filter,
  });

  SearchSecretMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as SearchMessagesFilter
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchCallMessages extends TdFunction {
  String get tlType => 'searchCallMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? from_message_id;
  int32? limit;
  Bool? only_missed;

  SearchCallMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.from_message_id,
    int32? this.limit,
    Bool? this.only_missed,
  });

  SearchCallMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    from_message_id =
        map.containsKey('from_message_id') ? map['from_message_id'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
    only_missed = map.containsKey('only_missed') ? map['only_missed'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'from_message_id': from_message_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
      'only_missed': only_missed?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteAllCallMessages extends TdFunction {
  String get tlType => 'deleteAllCallMessages';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  Bool? revoke;

  DeleteAllCallMessages({
    string? this.extra,
    int? this.client_id,
    Bool? this.revoke,
  });

  DeleteAllCallMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    revoke = map.containsKey('revoke') ? map['revoke'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'revoke': revoke?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchChatRecentLocationMessages extends TdFunction {
  String get tlType => 'searchChatRecentLocationMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? limit;

  SearchChatRecentLocationMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.limit,
  });

  SearchChatRecentLocationMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetActiveLiveLocationMessages extends TdFunction {
  String get tlType => 'getActiveLiveLocationMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;

  GetActiveLiveLocationMessages({
    string? this.extra,
    int? this.client_id,
  });

  GetActiveLiveLocationMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatMessageByDate extends TdFunction {
  String get tlType => 'getChatMessageByDate';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? date;

  GetChatMessageByDate({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.date,
  });

  GetChatMessageByDate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    date = map.containsKey('date') ? map['date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'date': date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatSparseMessagePositions extends TdFunction {
  String get tlType => 'getChatSparseMessagePositions';

  Type get tdReturnType => MessagePositions;

  string? extra;
  int? client_id;
  int53? chat_id;
  SearchMessagesFilter? filter;
  int53? from_message_id;
  int32? limit;

  GetChatSparseMessagePositions({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    SearchMessagesFilter? this.filter,
    int53? this.from_message_id,
    int32? this.limit,
  });

  GetChatSparseMessagePositions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as SearchMessagesFilter
        : null;
    from_message_id =
        map.containsKey('from_message_id') ? map['from_message_id'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
      'from_message_id': from_message_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatMessageCalendar extends TdFunction {
  String get tlType => 'getChatMessageCalendar';

  Type get tdReturnType => MessageCalendar;

  string? extra;
  int? client_id;
  int53? chat_id;
  SearchMessagesFilter? filter;
  int53? from_message_id;

  GetChatMessageCalendar({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    SearchMessagesFilter? this.filter,
    int53? this.from_message_id,
  });

  GetChatMessageCalendar.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as SearchMessagesFilter
        : null;
    from_message_id =
        map.containsKey('from_message_id') ? map['from_message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
      'from_message_id': from_message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatMessageCount extends TdFunction {
  String get tlType => 'getChatMessageCount';

  Type get tdReturnType => Count;

  string? extra;
  int? client_id;
  int53? chat_id;
  SearchMessagesFilter? filter;
  Bool? return_local;

  GetChatMessageCount({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    SearchMessagesFilter? this.filter,
    Bool? this.return_local,
  });

  GetChatMessageCount.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as SearchMessagesFilter
        : null;
    return_local = map.containsKey('return_local') ? map['return_local'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
      'return_local': return_local?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatScheduledMessages extends TdFunction {
  String get tlType => 'getChatScheduledMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetChatScheduledMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetChatScheduledMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessagePublicForwards extends TdFunction {
  String get tlType => 'getMessagePublicForwards';

  Type get tdReturnType => FoundMessages;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  string? offset;
  int32? limit;

  GetMessagePublicForwards({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    string? this.offset,
    int32? this.limit,
  });

  GetMessagePublicForwards.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatSponsoredMessage extends TdFunction {
  String get tlType => 'getChatSponsoredMessage';

  Type get tdReturnType => SponsoredMessage;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetChatSponsoredMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetChatSponsoredMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveNotification extends TdFunction {
  String get tlType => 'removeNotification';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? notification_group_id;
  int32? notification_id;

  RemoveNotification({
    string? this.extra,
    int? this.client_id,
    int32? this.notification_group_id,
    int32? this.notification_id,
  });

  RemoveNotification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    notification_group_id = map.containsKey('notification_group_id')
        ? map['notification_group_id']
        : null;
    notification_id =
        map.containsKey('notification_id') ? map['notification_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'notification_group_id':
          notification_group_id?.toMap(skipNulls: skipNulls),
      'notification_id': notification_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveNotificationGroup extends TdFunction {
  String get tlType => 'removeNotificationGroup';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? notification_group_id;
  int32? max_notification_id;

  RemoveNotificationGroup({
    string? this.extra,
    int? this.client_id,
    int32? this.notification_group_id,
    int32? this.max_notification_id,
  });

  RemoveNotificationGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    notification_group_id = map.containsKey('notification_group_id')
        ? map['notification_group_id']
        : null;
    max_notification_id = map.containsKey('max_notification_id')
        ? map['max_notification_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'notification_group_id':
          notification_group_id?.toMap(skipNulls: skipNulls),
      'max_notification_id': max_notification_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageLink extends TdFunction {
  String get tlType => 'getMessageLink';

  Type get tdReturnType => MessageLink;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int32? media_timestamp;
  Bool? for_album;
  Bool? for_comment;

  GetMessageLink({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int32? this.media_timestamp,
    Bool? this.for_album,
    Bool? this.for_comment,
  });

  GetMessageLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    media_timestamp =
        map.containsKey('media_timestamp') ? map['media_timestamp'] : null;
    for_album = map.containsKey('for_album') ? map['for_album'] : null;
    for_comment = map.containsKey('for_comment') ? map['for_comment'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'media_timestamp': media_timestamp?.toMap(skipNulls: skipNulls),
      'for_album': for_album?.toMap(skipNulls: skipNulls),
      'for_comment': for_comment?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageEmbeddingCode extends TdFunction {
  String get tlType => 'getMessageEmbeddingCode';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  Bool? for_album;

  GetMessageEmbeddingCode({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    Bool? this.for_album,
  });

  GetMessageEmbeddingCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    for_album = map.containsKey('for_album') ? map['for_album'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'for_album': for_album?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageLinkInfo extends TdFunction {
  String get tlType => 'getMessageLinkInfo';

  Type get tdReturnType => MessageLinkInfo;

  string? extra;
  int? client_id;
  string? url;

  GetMessageLinkInfo({
    string? this.extra,
    int? this.client_id,
    string? this.url,
  });

  GetMessageLinkInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatAvailableMessageSenders extends TdFunction {
  String get tlType => 'getChatAvailableMessageSenders';

  Type get tdReturnType => MessageSenders;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetChatAvailableMessageSenders({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetChatAvailableMessageSenders.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatMessageSender extends TdFunction {
  String get tlType => 'setChatMessageSender';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  MessageSender? message_sender_id;

  SetChatMessageSender({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    MessageSender? this.message_sender_id,
  });

  SetChatMessageSender.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_sender_id = map.containsKey('message_sender_id')
        ? TlMap.fromMap(map['message_sender_id']) as MessageSender
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_sender_id': message_sender_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendMessage extends TdFunction {
  String get tlType => 'sendMessage';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_thread_id;
  int53? reply_to_message_id;
  MessageSendOptions? options;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  SendMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_thread_id,
    int53? this.reply_to_message_id,
    MessageSendOptions? this.options,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  SendMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    reply_to_message_id = map.containsKey('reply_to_message_id')
        ? map['reply_to_message_id']
        : null;
    options = map.containsKey('options')
        ? TlMap.fromMap(map['options']) as MessageSendOptions
        : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'reply_to_message_id': reply_to_message_id?.toMap(skipNulls: skipNulls),
      'options': options?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendMessageAlbum extends TdFunction {
  String get tlType => 'sendMessageAlbum';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_thread_id;
  int53? reply_to_message_id;
  MessageSendOptions? options;
  vector<InputMessageContent>? input_message_contents;

  SendMessageAlbum({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_thread_id,
    int53? this.reply_to_message_id,
    MessageSendOptions? this.options,
    vector<InputMessageContent>? this.input_message_contents,
  });

  SendMessageAlbum.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    reply_to_message_id = map.containsKey('reply_to_message_id')
        ? map['reply_to_message_id']
        : null;
    options = map.containsKey('options')
        ? TlMap.fromMap(map['options']) as MessageSendOptions
        : null;
    if (map.containsKey('input_message_contents') &&
        map['input_message_contents'] != null) {
      input_message_contents = [];
      var someValues = map['input_message_contents'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InputMessageContent;
        input_message_contents?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'reply_to_message_id': reply_to_message_id?.toMap(skipNulls: skipNulls),
      'options': options?.toMap(skipNulls: skipNulls),
      'input_message_contents':
          input_message_contents?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendBotStartMessage extends TdFunction {
  String get tlType => 'sendBotStartMessage';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? bot_user_id;
  int53? chat_id;
  string? parameter;

  SendBotStartMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.bot_user_id,
    int53? this.chat_id,
    string? this.parameter,
  });

  SendBotStartMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_user_id = map.containsKey('bot_user_id') ? map['bot_user_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    parameter = map.containsKey('parameter') ? map['parameter'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_user_id': bot_user_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'parameter': parameter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendInlineQueryResultMessage extends TdFunction {
  String get tlType => 'sendInlineQueryResultMessage';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_thread_id;
  int53? reply_to_message_id;
  MessageSendOptions? options;
  int64? query_id;
  string? result_id;
  Bool? hide_via_bot;

  SendInlineQueryResultMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_thread_id,
    int53? this.reply_to_message_id,
    MessageSendOptions? this.options,
    int64? this.query_id,
    string? this.result_id,
    Bool? this.hide_via_bot,
  });

  SendInlineQueryResultMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    reply_to_message_id = map.containsKey('reply_to_message_id')
        ? map['reply_to_message_id']
        : null;
    options = map.containsKey('options')
        ? TlMap.fromMap(map['options']) as MessageSendOptions
        : null;
    query_id = map.containsKey('query_id') ? map['query_id'] : null;
    result_id = map.containsKey('result_id') ? map['result_id'] : null;
    hide_via_bot = map.containsKey('hide_via_bot') ? map['hide_via_bot'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'reply_to_message_id': reply_to_message_id?.toMap(skipNulls: skipNulls),
      'options': options?.toMap(skipNulls: skipNulls),
      'query_id': query_id?.toMap(skipNulls: skipNulls),
      'result_id': result_id?.toMap(skipNulls: skipNulls),
      'hide_via_bot': hide_via_bot?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ForwardMessages extends TdFunction {
  String get tlType => 'forwardMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? from_chat_id;
  vector<int53>? message_ids;
  MessageSendOptions? options;
  Bool? send_copy;
  Bool? remove_caption;
  Bool? only_preview;

  ForwardMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.from_chat_id,
    vector<int53>? this.message_ids,
    MessageSendOptions? this.options,
    Bool? this.send_copy,
    Bool? this.remove_caption,
    Bool? this.only_preview,
  });

  ForwardMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    from_chat_id = map.containsKey('from_chat_id') ? map['from_chat_id'] : null;
    if (map.containsKey('message_ids') && map['message_ids'] != null) {
      message_ids = [];
      var someValues = map['message_ids'];
      for (var someValue in someValues) {
        message_ids?.add(someValue);
      }
    }
    options = map.containsKey('options')
        ? TlMap.fromMap(map['options']) as MessageSendOptions
        : null;
    send_copy = map.containsKey('send_copy') ? map['send_copy'] : null;
    remove_caption =
        map.containsKey('remove_caption') ? map['remove_caption'] : null;
    only_preview = map.containsKey('only_preview') ? map['only_preview'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'from_chat_id': from_chat_id?.toMap(skipNulls: skipNulls),
      'message_ids': message_ids?.toMap(skipNulls: skipNulls),
      'options': options?.toMap(skipNulls: skipNulls),
      'send_copy': send_copy?.toMap(skipNulls: skipNulls),
      'remove_caption': remove_caption?.toMap(skipNulls: skipNulls),
      'only_preview': only_preview?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResendMessages extends TdFunction {
  String get tlType => 'resendMessages';

  Type get tdReturnType => Messages;

  string? extra;
  int? client_id;
  int53? chat_id;
  vector<int53>? message_ids;

  ResendMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    vector<int53>? this.message_ids,
  });

  ResendMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    if (map.containsKey('message_ids') && map['message_ids'] != null) {
      message_ids = [];
      var someValues = map['message_ids'];
      for (var someValue in someValues) {
        message_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_ids': message_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendChatScreenshotTakenNotification extends TdFunction {
  String get tlType => 'sendChatScreenshotTakenNotification';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  SendChatScreenshotTakenNotification({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  SendChatScreenshotTakenNotification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddLocalMessage extends TdFunction {
  String get tlType => 'addLocalMessage';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  MessageSender? sender_id;
  int53? reply_to_message_id;
  Bool? disable_notification;
  InputMessageContent? input_message_content;

  AddLocalMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    MessageSender? this.sender_id,
    int53? this.reply_to_message_id,
    Bool? this.disable_notification,
    InputMessageContent? this.input_message_content,
  });

  AddLocalMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    sender_id = map.containsKey('sender_id')
        ? TlMap.fromMap(map['sender_id']) as MessageSender
        : null;
    reply_to_message_id = map.containsKey('reply_to_message_id')
        ? map['reply_to_message_id']
        : null;
    disable_notification = map.containsKey('disable_notification')
        ? map['disable_notification']
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'sender_id': sender_id?.toMap(skipNulls: skipNulls),
      'reply_to_message_id': reply_to_message_id?.toMap(skipNulls: skipNulls),
      'disable_notification': disable_notification?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteMessages extends TdFunction {
  String get tlType => 'deleteMessages';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  vector<int53>? message_ids;
  Bool? revoke;

  DeleteMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    vector<int53>? this.message_ids,
    Bool? this.revoke,
  });

  DeleteMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    if (map.containsKey('message_ids') && map['message_ids'] != null) {
      message_ids = [];
      var someValues = map['message_ids'];
      for (var someValue in someValues) {
        message_ids?.add(someValue);
      }
    }
    revoke = map.containsKey('revoke') ? map['revoke'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_ids': message_ids?.toMap(skipNulls: skipNulls),
      'revoke': revoke?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteChatMessagesBySender extends TdFunction {
  String get tlType => 'deleteChatMessagesBySender';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  MessageSender? sender_id;

  DeleteChatMessagesBySender({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    MessageSender? this.sender_id,
  });

  DeleteChatMessagesBySender.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    sender_id = map.containsKey('sender_id')
        ? TlMap.fromMap(map['sender_id']) as MessageSender
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'sender_id': sender_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteChatMessagesByDate extends TdFunction {
  String get tlType => 'deleteChatMessagesByDate';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? min_date;
  int32? max_date;
  Bool? revoke;

  DeleteChatMessagesByDate({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.min_date,
    int32? this.max_date,
    Bool? this.revoke,
  });

  DeleteChatMessagesByDate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    min_date = map.containsKey('min_date') ? map['min_date'] : null;
    max_date = map.containsKey('max_date') ? map['max_date'] : null;
    revoke = map.containsKey('revoke') ? map['revoke'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'min_date': min_date?.toMap(skipNulls: skipNulls),
      'max_date': max_date?.toMap(skipNulls: skipNulls),
      'revoke': revoke?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditMessageText extends TdFunction {
  String get tlType => 'editMessageText';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  EditMessageText({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  EditMessageText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditMessageLiveLocation extends TdFunction {
  String get tlType => 'editMessageLiveLocation';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  ReplyMarkup? reply_markup;
  Location? location;
  int32? heading;
  int32? proximity_alert_radius;

  EditMessageLiveLocation({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    ReplyMarkup? this.reply_markup,
    Location? this.location,
    int32? this.heading,
    int32? this.proximity_alert_radius,
  });

  EditMessageLiveLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    heading = map.containsKey('heading') ? map['heading'] : null;
    proximity_alert_radius = map.containsKey('proximity_alert_radius')
        ? map['proximity_alert_radius']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'heading': heading?.toMap(skipNulls: skipNulls),
      'proximity_alert_radius':
          proximity_alert_radius?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditMessageMedia extends TdFunction {
  String get tlType => 'editMessageMedia';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  EditMessageMedia({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  EditMessageMedia.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditMessageCaption extends TdFunction {
  String get tlType => 'editMessageCaption';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  ReplyMarkup? reply_markup;
  FormattedText? caption;

  EditMessageCaption({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    ReplyMarkup? this.reply_markup,
    FormattedText? this.caption,
  });

  EditMessageCaption.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditMessageReplyMarkup extends TdFunction {
  String get tlType => 'editMessageReplyMarkup';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  ReplyMarkup? reply_markup;

  EditMessageReplyMarkup({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    ReplyMarkup? this.reply_markup,
  });

  EditMessageReplyMarkup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditInlineMessageText extends TdFunction {
  String get tlType => 'editInlineMessageText';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? inline_message_id;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  EditInlineMessageText({
    string? this.extra,
    int? this.client_id,
    string? this.inline_message_id,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  EditInlineMessageText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditInlineMessageLiveLocation extends TdFunction {
  String get tlType => 'editInlineMessageLiveLocation';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? inline_message_id;
  ReplyMarkup? reply_markup;
  Location? location;
  int32? heading;
  int32? proximity_alert_radius;

  EditInlineMessageLiveLocation({
    string? this.extra,
    int? this.client_id,
    string? this.inline_message_id,
    ReplyMarkup? this.reply_markup,
    Location? this.location,
    int32? this.heading,
    int32? this.proximity_alert_radius,
  });

  EditInlineMessageLiveLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    heading = map.containsKey('heading') ? map['heading'] : null;
    proximity_alert_radius = map.containsKey('proximity_alert_radius')
        ? map['proximity_alert_radius']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'heading': heading?.toMap(skipNulls: skipNulls),
      'proximity_alert_radius':
          proximity_alert_radius?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditInlineMessageMedia extends TdFunction {
  String get tlType => 'editInlineMessageMedia';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? inline_message_id;
  ReplyMarkup? reply_markup;
  InputMessageContent? input_message_content;

  EditInlineMessageMedia({
    string? this.extra,
    int? this.client_id,
    string? this.inline_message_id,
    ReplyMarkup? this.reply_markup,
    InputMessageContent? this.input_message_content,
  });

  EditInlineMessageMedia.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    input_message_content = map.containsKey('input_message_content')
        ? TlMap.fromMap(map['input_message_content']) as InputMessageContent
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'input_message_content':
          input_message_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditInlineMessageCaption extends TdFunction {
  String get tlType => 'editInlineMessageCaption';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? inline_message_id;
  ReplyMarkup? reply_markup;
  FormattedText? caption;

  EditInlineMessageCaption({
    string? this.extra,
    int? this.client_id,
    string? this.inline_message_id,
    ReplyMarkup? this.reply_markup,
    FormattedText? this.caption,
  });

  EditInlineMessageCaption.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
    caption = map.containsKey('caption')
        ? TlMap.fromMap(map['caption']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
      'caption': caption?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditInlineMessageReplyMarkup extends TdFunction {
  String get tlType => 'editInlineMessageReplyMarkup';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? inline_message_id;
  ReplyMarkup? reply_markup;

  EditInlineMessageReplyMarkup({
    string? this.extra,
    int? this.client_id,
    string? this.inline_message_id,
    ReplyMarkup? this.reply_markup,
  });

  EditInlineMessageReplyMarkup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditMessageSchedulingState extends TdFunction {
  String get tlType => 'editMessageSchedulingState';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  MessageSchedulingState? scheduling_state;

  EditMessageSchedulingState({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    MessageSchedulingState? this.scheduling_state,
  });

  EditMessageSchedulingState.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    scheduling_state = map.containsKey('scheduling_state')
        ? TlMap.fromMap(map['scheduling_state']) as MessageSchedulingState
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'scheduling_state': scheduling_state?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetTextEntities extends TdFunction {
  String get tlType => 'getTextEntities';

  Type get tdReturnType => TextEntities;

  string? extra;
  int? client_id;
  string? text;

  GetTextEntities({
    string? this.extra,
    int? this.client_id,
    string? this.text,
  });

  GetTextEntities.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ParseTextEntities extends TdFunction {
  String get tlType => 'parseTextEntities';

  Type get tdReturnType => FormattedText;

  string? extra;
  int? client_id;
  string? text;
  TextParseMode? parse_mode;

  ParseTextEntities({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    TextParseMode? this.parse_mode,
  });

  ParseTextEntities.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    parse_mode = map.containsKey('parse_mode')
        ? TlMap.fromMap(map['parse_mode']) as TextParseMode
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'parse_mode': parse_mode?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ParseMarkdown extends TdFunction {
  String get tlType => 'parseMarkdown';

  Type get tdReturnType => FormattedText;

  string? extra;
  int? client_id;
  FormattedText? text;

  ParseMarkdown({
    string? this.extra,
    int? this.client_id,
    FormattedText? this.text,
  });

  ParseMarkdown.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMarkdownText extends TdFunction {
  String get tlType => 'getMarkdownText';

  Type get tdReturnType => FormattedText;

  string? extra;
  int? client_id;
  FormattedText? text;

  GetMarkdownText({
    string? this.extra,
    int? this.client_id,
    FormattedText? this.text,
  });

  GetMarkdownText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetFileMimeType extends TdFunction {
  String get tlType => 'getFileMimeType';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  string? file_name;

  GetFileMimeType({
    string? this.extra,
    int? this.client_id,
    string? this.file_name,
  });

  GetFileMimeType.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_name = map.containsKey('file_name') ? map['file_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_name': file_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetFileExtension extends TdFunction {
  String get tlType => 'getFileExtension';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  string? mime_type;

  GetFileExtension({
    string? this.extra,
    int? this.client_id,
    string? this.mime_type,
  });

  GetFileExtension.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    mime_type = map.containsKey('mime_type') ? map['mime_type'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'mime_type': mime_type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CleanFileName extends TdFunction {
  String get tlType => 'cleanFileName';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  string? file_name;

  CleanFileName({
    string? this.extra,
    int? this.client_id,
    string? this.file_name,
  });

  CleanFileName.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_name = map.containsKey('file_name') ? map['file_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_name': file_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLanguagePackString extends TdFunction {
  String get tlType => 'getLanguagePackString';

  Type get tdReturnType => LanguagePackStringValue;

  string? extra;
  int? client_id;
  string? language_pack_database_path;
  string? localization_target;
  string? language_pack_id;
  string? key;

  GetLanguagePackString({
    string? this.extra,
    int? this.client_id,
    string? this.language_pack_database_path,
    string? this.localization_target,
    string? this.language_pack_id,
    string? this.key,
  });

  GetLanguagePackString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_pack_database_path = map.containsKey('language_pack_database_path')
        ? map['language_pack_database_path']
        : null;
    localization_target = map.containsKey('localization_target')
        ? map['localization_target']
        : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
    key = map.containsKey('key') ? map['key'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_pack_database_path':
          language_pack_database_path?.toMap(skipNulls: skipNulls),
      'localization_target': localization_target?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
      'key': key?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetJsonValue extends TdFunction {
  String get tlType => 'getJsonValue';

  Type get tdReturnType => JsonValue;

  string? extra;
  int? client_id;
  string? json;

  GetJsonValue({
    string? this.extra,
    int? this.client_id,
    string? this.json,
  });

  GetJsonValue.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    json = map.containsKey('json') ? map['json'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'json': json?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetJsonString extends TdFunction {
  String get tlType => 'getJsonString';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  JsonValue? json_value;

  GetJsonString({
    string? this.extra,
    int? this.client_id,
    JsonValue? this.json_value,
  });

  GetJsonString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    json_value = map.containsKey('json_value')
        ? TlMap.fromMap(map['json_value']) as JsonValue
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'json_value': json_value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetPollAnswer extends TdFunction {
  String get tlType => 'setPollAnswer';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  vector<int32>? option_ids;

  SetPollAnswer({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    vector<int32>? this.option_ids,
  });

  SetPollAnswer.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    if (map.containsKey('option_ids') && map['option_ids'] != null) {
      option_ids = [];
      var someValues = map['option_ids'];
      for (var someValue in someValues) {
        option_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'option_ids': option_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPollVoters extends TdFunction {
  String get tlType => 'getPollVoters';

  Type get tdReturnType => Users;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int32? option_id;
  int32? offset;
  int32? limit;

  GetPollVoters({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int32? this.option_id,
    int32? this.offset,
    int32? this.limit,
  });

  GetPollVoters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    option_id = map.containsKey('option_id') ? map['option_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'option_id': option_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StopPoll extends TdFunction {
  String get tlType => 'stopPoll';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  ReplyMarkup? reply_markup;

  StopPoll({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    ReplyMarkup? this.reply_markup,
  });

  StopPoll.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    reply_markup = map.containsKey('reply_markup')
        ? TlMap.fromMap(map['reply_markup']) as ReplyMarkup
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'reply_markup': reply_markup?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class HideSuggestedAction extends TdFunction {
  String get tlType => 'hideSuggestedAction';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  SuggestedAction? action;

  HideSuggestedAction({
    string? this.extra,
    int? this.client_id,
    SuggestedAction? this.action,
  });

  HideSuggestedAction.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    action = map.containsKey('action')
        ? TlMap.fromMap(map['action']) as SuggestedAction
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'action': action?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLoginUrlInfo extends TdFunction {
  String get tlType => 'getLoginUrlInfo';

  Type get tdReturnType => LoginUrlInfo;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int53? button_id;

  GetLoginUrlInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int53? this.button_id,
  });

  GetLoginUrlInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    button_id = map.containsKey('button_id') ? map['button_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'button_id': button_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLoginUrl extends TdFunction {
  String get tlType => 'getLoginUrl';

  Type get tdReturnType => HttpUrl;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int53? button_id;
  Bool? allow_write_access;

  GetLoginUrl({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int53? this.button_id,
    Bool? this.allow_write_access,
  });

  GetLoginUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    button_id = map.containsKey('button_id') ? map['button_id'] : null;
    allow_write_access = map.containsKey('allow_write_access')
        ? map['allow_write_access']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'button_id': button_id?.toMap(skipNulls: skipNulls),
      'allow_write_access': allow_write_access?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetInlineQueryResults extends TdFunction {
  String get tlType => 'getInlineQueryResults';

  Type get tdReturnType => InlineQueryResults;

  string? extra;
  int? client_id;
  int53? bot_user_id;
  int53? chat_id;
  Location? user_location;
  string? query;
  string? offset;

  GetInlineQueryResults({
    string? this.extra,
    int? this.client_id,
    int53? this.bot_user_id,
    int53? this.chat_id,
    Location? this.user_location,
    string? this.query,
    string? this.offset,
  });

  GetInlineQueryResults.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_user_id = map.containsKey('bot_user_id') ? map['bot_user_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    user_location = map.containsKey('user_location')
        ? TlMap.fromMap(map['user_location']) as Location
        : null;
    query = map.containsKey('query') ? map['query'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_user_id': bot_user_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'user_location': user_location?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AnswerInlineQuery extends TdFunction {
  String get tlType => 'answerInlineQuery';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? inline_query_id;
  Bool? is_personal;
  vector<InputInlineQueryResult>? results;
  int32? cache_time;
  string? next_offset;
  string? switch_pm_text;
  string? switch_pm_parameter;

  AnswerInlineQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.inline_query_id,
    Bool? this.is_personal,
    vector<InputInlineQueryResult>? this.results,
    int32? this.cache_time,
    string? this.next_offset,
    string? this.switch_pm_text,
    string? this.switch_pm_parameter,
  });

  AnswerInlineQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_query_id =
        map.containsKey('inline_query_id') ? map['inline_query_id'] : null;
    is_personal = map.containsKey('is_personal') ? map['is_personal'] : null;
    if (map.containsKey('results') && map['results'] != null) {
      results = [];
      var someValues = map['results'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InputInlineQueryResult;
        results?.add(obj);
      }
    }
    cache_time = map.containsKey('cache_time') ? map['cache_time'] : null;
    next_offset = map.containsKey('next_offset') ? map['next_offset'] : null;
    switch_pm_text =
        map.containsKey('switch_pm_text') ? map['switch_pm_text'] : null;
    switch_pm_parameter = map.containsKey('switch_pm_parameter')
        ? map['switch_pm_parameter']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_query_id': inline_query_id?.toMap(skipNulls: skipNulls),
      'is_personal': is_personal?.toMap(skipNulls: skipNulls),
      'results': results?.toMap(skipNulls: skipNulls),
      'cache_time': cache_time?.toMap(skipNulls: skipNulls),
      'next_offset': next_offset?.toMap(skipNulls: skipNulls),
      'switch_pm_text': switch_pm_text?.toMap(skipNulls: skipNulls),
      'switch_pm_parameter': switch_pm_parameter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetCallbackQueryAnswer extends TdFunction {
  String get tlType => 'getCallbackQueryAnswer';

  Type get tdReturnType => CallbackQueryAnswer;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  CallbackQueryPayload? payload;

  GetCallbackQueryAnswer({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    CallbackQueryPayload? this.payload,
  });

  GetCallbackQueryAnswer.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    payload = map.containsKey('payload')
        ? TlMap.fromMap(map['payload']) as CallbackQueryPayload
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'payload': payload?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AnswerCallbackQuery extends TdFunction {
  String get tlType => 'answerCallbackQuery';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? callback_query_id;
  string? text;
  Bool? show_alert;
  string? url;
  int32? cache_time;

  AnswerCallbackQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.callback_query_id,
    string? this.text,
    Bool? this.show_alert,
    string? this.url,
    int32? this.cache_time,
  });

  AnswerCallbackQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    callback_query_id =
        map.containsKey('callback_query_id') ? map['callback_query_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    show_alert = map.containsKey('show_alert') ? map['show_alert'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    cache_time = map.containsKey('cache_time') ? map['cache_time'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'callback_query_id': callback_query_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'show_alert': show_alert?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'cache_time': cache_time?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AnswerShippingQuery extends TdFunction {
  String get tlType => 'answerShippingQuery';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? shipping_query_id;
  vector<ShippingOption>? shipping_options;
  string? error_message;

  AnswerShippingQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.shipping_query_id,
    vector<ShippingOption>? this.shipping_options,
    string? this.error_message,
  });

  AnswerShippingQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    shipping_query_id =
        map.containsKey('shipping_query_id') ? map['shipping_query_id'] : null;
    if (map.containsKey('shipping_options') &&
        map['shipping_options'] != null) {
      shipping_options = [];
      var someValues = map['shipping_options'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as ShippingOption;
        shipping_options?.add(obj);
      }
    }
    error_message =
        map.containsKey('error_message') ? map['error_message'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'shipping_query_id': shipping_query_id?.toMap(skipNulls: skipNulls),
      'shipping_options': shipping_options?.toMap(skipNulls: skipNulls),
      'error_message': error_message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AnswerPreCheckoutQuery extends TdFunction {
  String get tlType => 'answerPreCheckoutQuery';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? pre_checkout_query_id;
  string? error_message;

  AnswerPreCheckoutQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.pre_checkout_query_id,
    string? this.error_message,
  });

  AnswerPreCheckoutQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    pre_checkout_query_id = map.containsKey('pre_checkout_query_id')
        ? map['pre_checkout_query_id']
        : null;
    error_message =
        map.containsKey('error_message') ? map['error_message'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'pre_checkout_query_id':
          pre_checkout_query_id?.toMap(skipNulls: skipNulls),
      'error_message': error_message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetGameScore extends TdFunction {
  String get tlType => 'setGameScore';

  Type get tdReturnType => Message;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  Bool? edit_message;
  int53? user_id;
  int32? score;
  Bool? force;

  SetGameScore({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    Bool? this.edit_message,
    int53? this.user_id,
    int32? this.score,
    Bool? this.force,
  });

  SetGameScore.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    edit_message = map.containsKey('edit_message') ? map['edit_message'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    score = map.containsKey('score') ? map['score'] : null;
    force = map.containsKey('force') ? map['force'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'edit_message': edit_message?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'score': score?.toMap(skipNulls: skipNulls),
      'force': force?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetInlineGameScore extends TdFunction {
  String get tlType => 'setInlineGameScore';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? inline_message_id;
  Bool? edit_message;
  int53? user_id;
  int32? score;
  Bool? force;

  SetInlineGameScore({
    string? this.extra,
    int? this.client_id,
    string? this.inline_message_id,
    Bool? this.edit_message,
    int53? this.user_id,
    int32? this.score,
    Bool? this.force,
  });

  SetInlineGameScore.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
    edit_message = map.containsKey('edit_message') ? map['edit_message'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    score = map.containsKey('score') ? map['score'] : null;
    force = map.containsKey('force') ? map['force'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
      'edit_message': edit_message?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'score': score?.toMap(skipNulls: skipNulls),
      'force': force?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetGameHighScores extends TdFunction {
  String get tlType => 'getGameHighScores';

  Type get tdReturnType => GameHighScores;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int53? user_id;

  GetGameHighScores({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int53? this.user_id,
  });

  GetGameHighScores.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetInlineGameHighScores extends TdFunction {
  String get tlType => 'getInlineGameHighScores';

  Type get tdReturnType => GameHighScores;

  string? extra;
  int? client_id;
  string? inline_message_id;
  int53? user_id;

  GetInlineGameHighScores({
    string? this.extra,
    int? this.client_id,
    string? this.inline_message_id,
    int53? this.user_id,
  });

  GetInlineGameHighScores.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inline_message_id =
        map.containsKey('inline_message_id') ? map['inline_message_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inline_message_id': inline_message_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteChatReplyMarkup extends TdFunction {
  String get tlType => 'deleteChatReplyMarkup';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  DeleteChatReplyMarkup({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  DeleteChatReplyMarkup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendChatAction extends TdFunction {
  String get tlType => 'sendChatAction';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_thread_id;
  ChatAction? action;

  SendChatAction({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_thread_id,
    ChatAction? this.action,
  });

  SendChatAction.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    action = map.containsKey('action')
        ? TlMap.fromMap(map['action']) as ChatAction
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'action': action?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class OpenChat extends TdFunction {
  String get tlType => 'openChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  OpenChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  OpenChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CloseChat extends TdFunction {
  String get tlType => 'closeChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  CloseChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  CloseChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ViewMessages extends TdFunction {
  String get tlType => 'viewMessages';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_thread_id;
  vector<int53>? message_ids;
  Bool? force_read;

  ViewMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_thread_id,
    vector<int53>? this.message_ids,
    Bool? this.force_read,
  });

  ViewMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    if (map.containsKey('message_ids') && map['message_ids'] != null) {
      message_ids = [];
      var someValues = map['message_ids'];
      for (var someValue in someValues) {
        message_ids?.add(someValue);
      }
    }
    force_read = map.containsKey('force_read') ? map['force_read'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'message_ids': message_ids?.toMap(skipNulls: skipNulls),
      'force_read': force_read?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class OpenMessageContent extends TdFunction {
  String get tlType => 'openMessageContent';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  OpenMessageContent({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  OpenMessageContent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ClickAnimatedEmojiMessage extends TdFunction {
  String get tlType => 'clickAnimatedEmojiMessage';

  Type get tdReturnType => Sticker;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  ClickAnimatedEmojiMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  ClickAnimatedEmojiMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetInternalLinkType extends TdFunction {
  String get tlType => 'getInternalLinkType';

  Type get tdReturnType => InternalLinkType;

  string? extra;
  int? client_id;
  string? link;

  GetInternalLinkType({
    string? this.extra,
    int? this.client_id,
    string? this.link,
  });

  GetInternalLinkType.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    link = map.containsKey('link') ? map['link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetExternalLinkInfo extends TdFunction {
  String get tlType => 'getExternalLinkInfo';

  Type get tdReturnType => LoginUrlInfo;

  string? extra;
  int? client_id;
  string? link;

  GetExternalLinkInfo({
    string? this.extra,
    int? this.client_id,
    string? this.link,
  });

  GetExternalLinkInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    link = map.containsKey('link') ? map['link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetExternalLink extends TdFunction {
  String get tlType => 'getExternalLink';

  Type get tdReturnType => HttpUrl;

  string? extra;
  int? client_id;
  string? link;
  Bool? allow_write_access;

  GetExternalLink({
    string? this.extra,
    int? this.client_id,
    string? this.link,
    Bool? this.allow_write_access,
  });

  GetExternalLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    link = map.containsKey('link') ? map['link'] : null;
    allow_write_access = map.containsKey('allow_write_access')
        ? map['allow_write_access']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
      'allow_write_access': allow_write_access?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReadAllChatMentions extends TdFunction {
  String get tlType => 'readAllChatMentions';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  ReadAllChatMentions({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  ReadAllChatMentions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreatePrivateChat extends TdFunction {
  String get tlType => 'createPrivateChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  int53? user_id;
  Bool? force;

  CreatePrivateChat({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    Bool? this.force,
  });

  CreatePrivateChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    force = map.containsKey('force') ? map['force'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'force': force?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateBasicGroupChat extends TdFunction {
  String get tlType => 'createBasicGroupChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  int53? basic_group_id;
  Bool? force;

  CreateBasicGroupChat({
    string? this.extra,
    int? this.client_id,
    int53? this.basic_group_id,
    Bool? this.force,
  });

  CreateBasicGroupChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    basic_group_id =
        map.containsKey('basic_group_id') ? map['basic_group_id'] : null;
    force = map.containsKey('force') ? map['force'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'basic_group_id': basic_group_id?.toMap(skipNulls: skipNulls),
      'force': force?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateSupergroupChat extends TdFunction {
  String get tlType => 'createSupergroupChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  int53? supergroup_id;
  Bool? force;

  CreateSupergroupChat({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    Bool? this.force,
  });

  CreateSupergroupChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    force = map.containsKey('force') ? map['force'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'force': force?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateSecretChat extends TdFunction {
  String get tlType => 'createSecretChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  int32? secret_chat_id;

  CreateSecretChat({
    string? this.extra,
    int? this.client_id,
    int32? this.secret_chat_id,
  });

  CreateSecretChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    secret_chat_id =
        map.containsKey('secret_chat_id') ? map['secret_chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'secret_chat_id': secret_chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateNewBasicGroupChat extends TdFunction {
  String get tlType => 'createNewBasicGroupChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  vector<int53>? user_ids;
  string? title;

  CreateNewBasicGroupChat({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.user_ids,
    string? this.title,
  });

  CreateNewBasicGroupChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateNewSupergroupChat extends TdFunction {
  String get tlType => 'createNewSupergroupChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  string? title;
  Bool? is_channel;
  string? description;
  ChatLocation? location;
  Bool? for_import;

  CreateNewSupergroupChat({
    string? this.extra,
    int? this.client_id,
    string? this.title,
    Bool? this.is_channel,
    string? this.description,
    ChatLocation? this.location,
    Bool? this.for_import,
  });

  CreateNewSupergroupChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    is_channel = map.containsKey('is_channel') ? map['is_channel'] : null;
    description = map.containsKey('description') ? map['description'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as ChatLocation
        : null;
    for_import = map.containsKey('for_import') ? map['for_import'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'is_channel': is_channel?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'for_import': for_import?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateNewSecretChat extends TdFunction {
  String get tlType => 'createNewSecretChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  int53? user_id;

  CreateNewSecretChat({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  CreateNewSecretChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UpgradeBasicGroupChatToSupergroupChat extends TdFunction {
  String get tlType => 'upgradeBasicGroupChatToSupergroupChat';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  int53? chat_id;

  UpgradeBasicGroupChatToSupergroupChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  UpgradeBasicGroupChatToSupergroupChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatListsToAddChat extends TdFunction {
  String get tlType => 'getChatListsToAddChat';

  Type get tdReturnType => ChatLists;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetChatListsToAddChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetChatListsToAddChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddChatToList extends TdFunction {
  String get tlType => 'addChatToList';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatList? chat_list;

  AddChatToList({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatList? this.chat_list,
  });

  AddChatToList.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    chat_list = map.containsKey('chat_list')
        ? TlMap.fromMap(map['chat_list']) as ChatList
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'chat_list': chat_list?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatFilter extends TdFunction {
  String get tlType => 'getChatFilter';

  Type get tdReturnType => ChatFilter;

  string? extra;
  int? client_id;
  int32? chat_filter_id;

  GetChatFilter({
    string? this.extra,
    int? this.client_id,
    int32? this.chat_filter_id,
  });

  GetChatFilter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_filter_id =
        map.containsKey('chat_filter_id') ? map['chat_filter_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_filter_id': chat_filter_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateChatFilter extends TdFunction {
  String get tlType => 'createChatFilter';

  Type get tdReturnType => ChatFilterInfo;

  string? extra;
  int? client_id;
  ChatFilter? filter;

  CreateChatFilter({
    string? this.extra,
    int? this.client_id,
    ChatFilter? this.filter,
  });

  CreateChatFilter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as ChatFilter
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditChatFilter extends TdFunction {
  String get tlType => 'editChatFilter';

  Type get tdReturnType => ChatFilterInfo;

  string? extra;
  int? client_id;
  int32? chat_filter_id;
  ChatFilter? filter;

  EditChatFilter({
    string? this.extra,
    int? this.client_id,
    int32? this.chat_filter_id,
    ChatFilter? this.filter,
  });

  EditChatFilter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_filter_id =
        map.containsKey('chat_filter_id') ? map['chat_filter_id'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as ChatFilter
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_filter_id': chat_filter_id?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteChatFilter extends TdFunction {
  String get tlType => 'deleteChatFilter';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? chat_filter_id;

  DeleteChatFilter({
    string? this.extra,
    int? this.client_id,
    int32? this.chat_filter_id,
  });

  DeleteChatFilter.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_filter_id =
        map.containsKey('chat_filter_id') ? map['chat_filter_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_filter_id': chat_filter_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReorderChatFilters extends TdFunction {
  String get tlType => 'reorderChatFilters';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  vector<int32>? chat_filter_ids;

  ReorderChatFilters({
    string? this.extra,
    int? this.client_id,
    vector<int32>? this.chat_filter_ids,
  });

  ReorderChatFilters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('chat_filter_ids') && map['chat_filter_ids'] != null) {
      chat_filter_ids = [];
      var someValues = map['chat_filter_ids'];
      for (var someValue in someValues) {
        chat_filter_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_filter_ids': chat_filter_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetRecommendedChatFilters extends TdFunction {
  String get tlType => 'getRecommendedChatFilters';

  Type get tdReturnType => RecommendedChatFilters;

  string? extra;
  int? client_id;

  GetRecommendedChatFilters({
    string? this.extra,
    int? this.client_id,
  });

  GetRecommendedChatFilters.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatFilterDefaultIconName extends TdFunction {
  String get tlType => 'getChatFilterDefaultIconName';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  ChatFilter? filter;

  GetChatFilterDefaultIconName({
    string? this.extra,
    int? this.client_id,
    ChatFilter? this.filter,
  });

  GetChatFilterDefaultIconName.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as ChatFilter
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatTitle extends TdFunction {
  String get tlType => 'setChatTitle';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? title;

  SetChatTitle({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.title,
  });

  SetChatTitle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatPhoto extends TdFunction {
  String get tlType => 'setChatPhoto';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  InputChatPhoto? photo;

  SetChatPhoto({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    InputChatPhoto? this.photo,
  });

  SetChatPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as InputChatPhoto
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatMessageTtl extends TdFunction {
  String get tlType => 'setChatMessageTtl';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? ttl;

  SetChatMessageTtl({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.ttl,
  });

  SetChatMessageTtl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    ttl = map.containsKey('ttl') ? map['ttl'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'ttl': ttl?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatPermissions extends TdFunction {
  String get tlType => 'setChatPermissions';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatPermissions? permissions;

  SetChatPermissions({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatPermissions? this.permissions,
  });

  SetChatPermissions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    permissions = map.containsKey('permissions')
        ? TlMap.fromMap(map['permissions']) as ChatPermissions
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'permissions': permissions?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatTheme extends TdFunction {
  String get tlType => 'setChatTheme';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? theme_name;

  SetChatTheme({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.theme_name,
  });

  SetChatTheme.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    theme_name = map.containsKey('theme_name') ? map['theme_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'theme_name': theme_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatDraftMessage extends TdFunction {
  String get tlType => 'setChatDraftMessage';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_thread_id;
  DraftMessage? draft_message;

  SetChatDraftMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_thread_id,
    DraftMessage? this.draft_message,
  });

  SetChatDraftMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_thread_id =
        map.containsKey('message_thread_id') ? map['message_thread_id'] : null;
    draft_message = map.containsKey('draft_message')
        ? TlMap.fromMap(map['draft_message']) as DraftMessage
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_thread_id': message_thread_id?.toMap(skipNulls: skipNulls),
      'draft_message': draft_message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatNotificationSettings extends TdFunction {
  String get tlType => 'setChatNotificationSettings';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatNotificationSettings? notification_settings;

  SetChatNotificationSettings({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatNotificationSettings? this.notification_settings,
  });

  SetChatNotificationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    notification_settings = map.containsKey('notification_settings')
        ? TlMap.fromMap(map['notification_settings'])
            as ChatNotificationSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'notification_settings':
          notification_settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleChatHasProtectedContent extends TdFunction {
  String get tlType => 'toggleChatHasProtectedContent';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? has_protected_content;

  ToggleChatHasProtectedContent({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.has_protected_content,
  });

  ToggleChatHasProtectedContent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    has_protected_content = map.containsKey('has_protected_content')
        ? map['has_protected_content']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'has_protected_content':
          has_protected_content?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleChatIsMarkedAsUnread extends TdFunction {
  String get tlType => 'toggleChatIsMarkedAsUnread';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? is_marked_as_unread;

  ToggleChatIsMarkedAsUnread({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.is_marked_as_unread,
  });

  ToggleChatIsMarkedAsUnread.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    is_marked_as_unread = map.containsKey('is_marked_as_unread')
        ? map['is_marked_as_unread']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'is_marked_as_unread': is_marked_as_unread?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleChatDefaultDisableNotification extends TdFunction {
  String get tlType => 'toggleChatDefaultDisableNotification';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? default_disable_notification;

  ToggleChatDefaultDisableNotification({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.default_disable_notification,
  });

  ToggleChatDefaultDisableNotification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    default_disable_notification =
        map.containsKey('default_disable_notification')
            ? map['default_disable_notification']
            : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'default_disable_notification':
          default_disable_notification?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatClientData extends TdFunction {
  String get tlType => 'setChatClientData';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? client_data;

  SetChatClientData({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.client_data,
  });

  SetChatClientData.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    client_data = map.containsKey('client_data') ? map['client_data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'client_data': client_data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatDescription extends TdFunction {
  String get tlType => 'setChatDescription';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? description;

  SetChatDescription({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.description,
  });

  SetChatDescription.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    description = map.containsKey('description') ? map['description'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'description': description?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatDiscussionGroup extends TdFunction {
  String get tlType => 'setChatDiscussionGroup';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? discussion_chat_id;

  SetChatDiscussionGroup({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.discussion_chat_id,
  });

  SetChatDiscussionGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    discussion_chat_id = map.containsKey('discussion_chat_id')
        ? map['discussion_chat_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'discussion_chat_id': discussion_chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatLocation extends TdFunction {
  String get tlType => 'setChatLocation';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  ChatLocation? location;

  SetChatLocation({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    ChatLocation? this.location,
  });

  SetChatLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as ChatLocation
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatSlowModeDelay extends TdFunction {
  String get tlType => 'setChatSlowModeDelay';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? slow_mode_delay;

  SetChatSlowModeDelay({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.slow_mode_delay,
  });

  SetChatSlowModeDelay.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    slow_mode_delay =
        map.containsKey('slow_mode_delay') ? map['slow_mode_delay'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'slow_mode_delay': slow_mode_delay?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PinChatMessage extends TdFunction {
  String get tlType => 'pinChatMessage';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  Bool? disable_notification;
  Bool? only_for_self;

  PinChatMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    Bool? this.disable_notification,
    Bool? this.only_for_self,
  });

  PinChatMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    disable_notification = map.containsKey('disable_notification')
        ? map['disable_notification']
        : null;
    only_for_self =
        map.containsKey('only_for_self') ? map['only_for_self'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'disable_notification': disable_notification?.toMap(skipNulls: skipNulls),
      'only_for_self': only_for_self?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UnpinChatMessage extends TdFunction {
  String get tlType => 'unpinChatMessage';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  UnpinChatMessage({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  UnpinChatMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UnpinAllChatMessages extends TdFunction {
  String get tlType => 'unpinAllChatMessages';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  UnpinAllChatMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  UnpinAllChatMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JoinChat extends TdFunction {
  String get tlType => 'joinChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  JoinChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  JoinChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LeaveChat extends TdFunction {
  String get tlType => 'leaveChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  LeaveChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  LeaveChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddChatMember extends TdFunction {
  String get tlType => 'addChatMember';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? user_id;
  int32? forward_limit;

  AddChatMember({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.user_id,
    int32? this.forward_limit,
  });

  AddChatMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    forward_limit =
        map.containsKey('forward_limit') ? map['forward_limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'forward_limit': forward_limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddChatMembers extends TdFunction {
  String get tlType => 'addChatMembers';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  vector<int53>? user_ids;

  AddChatMembers({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    vector<int53>? this.user_ids,
  });

  AddChatMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetChatMemberStatus extends TdFunction {
  String get tlType => 'setChatMemberStatus';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  MessageSender? member_id;
  ChatMemberStatus? status;

  SetChatMemberStatus({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    MessageSender? this.member_id,
    ChatMemberStatus? this.status,
  });

  SetChatMemberStatus.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    member_id = map.containsKey('member_id')
        ? TlMap.fromMap(map['member_id']) as MessageSender
        : null;
    status = map.containsKey('status')
        ? TlMap.fromMap(map['status']) as ChatMemberStatus
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'member_id': member_id?.toMap(skipNulls: skipNulls),
      'status': status?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BanChatMember extends TdFunction {
  String get tlType => 'banChatMember';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  MessageSender? member_id;
  int32? banned_until_date;
  Bool? revoke_messages;

  BanChatMember({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    MessageSender? this.member_id,
    int32? this.banned_until_date,
    Bool? this.revoke_messages,
  });

  BanChatMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    member_id = map.containsKey('member_id')
        ? TlMap.fromMap(map['member_id']) as MessageSender
        : null;
    banned_until_date =
        map.containsKey('banned_until_date') ? map['banned_until_date'] : null;
    revoke_messages =
        map.containsKey('revoke_messages') ? map['revoke_messages'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'member_id': member_id?.toMap(skipNulls: skipNulls),
      'banned_until_date': banned_until_date?.toMap(skipNulls: skipNulls),
      'revoke_messages': revoke_messages?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CanTransferOwnership extends TdFunction {
  String get tlType => 'canTransferOwnership';

  Type get tdReturnType => CanTransferOwnershipResult;

  string? extra;
  int? client_id;

  CanTransferOwnership({
    string? this.extra,
    int? this.client_id,
  });

  CanTransferOwnership.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TransferChatOwnership extends TdFunction {
  String get tlType => 'transferChatOwnership';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? user_id;
  string? password;

  TransferChatOwnership({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.user_id,
    string? this.password,
  });

  TransferChatOwnership.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    password = map.containsKey('password') ? map['password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatMember extends TdFunction {
  String get tlType => 'getChatMember';

  Type get tdReturnType => ChatMember;

  string? extra;
  int? client_id;
  int53? chat_id;
  MessageSender? member_id;

  GetChatMember({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    MessageSender? this.member_id,
  });

  GetChatMember.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    member_id = map.containsKey('member_id')
        ? TlMap.fromMap(map['member_id']) as MessageSender
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'member_id': member_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchChatMembers extends TdFunction {
  String get tlType => 'searchChatMembers';

  Type get tdReturnType => ChatMembers;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? query;
  int32? limit;
  ChatMembersFilter? filter;

  SearchChatMembers({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.query,
    int32? this.limit,
    ChatMembersFilter? this.filter,
  });

  SearchChatMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as ChatMembersFilter
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatAdministrators extends TdFunction {
  String get tlType => 'getChatAdministrators';

  Type get tdReturnType => ChatAdministrators;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetChatAdministrators({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetChatAdministrators.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ClearAllDraftMessages extends TdFunction {
  String get tlType => 'clearAllDraftMessages';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  Bool? exclude_secret_chats;

  ClearAllDraftMessages({
    string? this.extra,
    int? this.client_id,
    Bool? this.exclude_secret_chats,
  });

  ClearAllDraftMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    exclude_secret_chats = map.containsKey('exclude_secret_chats')
        ? map['exclude_secret_chats']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'exclude_secret_chats': exclude_secret_chats?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatNotificationSettingsExceptions extends TdFunction {
  String get tlType => 'getChatNotificationSettingsExceptions';

  Type get tdReturnType => Chats;

  string? extra;
  int? client_id;
  NotificationSettingsScope? scope;
  Bool? compare_sound;

  GetChatNotificationSettingsExceptions({
    string? this.extra,
    int? this.client_id,
    NotificationSettingsScope? this.scope,
    Bool? this.compare_sound,
  });

  GetChatNotificationSettingsExceptions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    scope = map.containsKey('scope')
        ? TlMap.fromMap(map['scope']) as NotificationSettingsScope
        : null;
    compare_sound =
        map.containsKey('compare_sound') ? map['compare_sound'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
      'compare_sound': compare_sound?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetScopeNotificationSettings extends TdFunction {
  String get tlType => 'getScopeNotificationSettings';

  Type get tdReturnType => ScopeNotificationSettings;

  string? extra;
  int? client_id;
  NotificationSettingsScope? scope;

  GetScopeNotificationSettings({
    string? this.extra,
    int? this.client_id,
    NotificationSettingsScope? this.scope,
  });

  GetScopeNotificationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    scope = map.containsKey('scope')
        ? TlMap.fromMap(map['scope']) as NotificationSettingsScope
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetScopeNotificationSettings extends TdFunction {
  String get tlType => 'setScopeNotificationSettings';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  NotificationSettingsScope? scope;
  ScopeNotificationSettings? notification_settings;

  SetScopeNotificationSettings({
    string? this.extra,
    int? this.client_id,
    NotificationSettingsScope? this.scope,
    ScopeNotificationSettings? this.notification_settings,
  });

  SetScopeNotificationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    scope = map.containsKey('scope')
        ? TlMap.fromMap(map['scope']) as NotificationSettingsScope
        : null;
    notification_settings = map.containsKey('notification_settings')
        ? TlMap.fromMap(map['notification_settings'])
            as ScopeNotificationSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
      'notification_settings':
          notification_settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResetAllNotificationSettings extends TdFunction {
  String get tlType => 'resetAllNotificationSettings';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  ResetAllNotificationSettings({
    string? this.extra,
    int? this.client_id,
  });

  ResetAllNotificationSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleChatIsPinned extends TdFunction {
  String get tlType => 'toggleChatIsPinned';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  ChatList? chat_list;
  int53? chat_id;
  Bool? is_pinned;

  ToggleChatIsPinned({
    string? this.extra,
    int? this.client_id,
    ChatList? this.chat_list,
    int53? this.chat_id,
    Bool? this.is_pinned,
  });

  ToggleChatIsPinned.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_list = map.containsKey('chat_list')
        ? TlMap.fromMap(map['chat_list']) as ChatList
        : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    is_pinned = map.containsKey('is_pinned') ? map['is_pinned'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_list': chat_list?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'is_pinned': is_pinned?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetPinnedChats extends TdFunction {
  String get tlType => 'setPinnedChats';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  ChatList? chat_list;
  vector<int53>? chat_ids;

  SetPinnedChats({
    string? this.extra,
    int? this.client_id,
    ChatList? this.chat_list,
    vector<int53>? this.chat_ids,
  });

  SetPinnedChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_list = map.containsKey('chat_list')
        ? TlMap.fromMap(map['chat_list']) as ChatList
        : null;
    if (map.containsKey('chat_ids') && map['chat_ids'] != null) {
      chat_ids = [];
      var someValues = map['chat_ids'];
      for (var someValue in someValues) {
        chat_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_list': chat_list?.toMap(skipNulls: skipNulls),
      'chat_ids': chat_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DownloadFile extends TdFunction {
  String get tlType => 'downloadFile';

  Type get tdReturnType => File;

  string? extra;
  int? client_id;
  int32? file_id;
  int32? priority;
  int32? offset;
  int32? limit;
  Bool? synchronous;

  DownloadFile({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
    int32? this.priority,
    int32? this.offset,
    int32? this.limit,
    Bool? this.synchronous,
  });

  DownloadFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
    priority = map.containsKey('priority') ? map['priority'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
    synchronous = map.containsKey('synchronous') ? map['synchronous'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
      'priority': priority?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
      'synchronous': synchronous?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetFileDownloadedPrefixSize extends TdFunction {
  String get tlType => 'getFileDownloadedPrefixSize';

  Type get tdReturnType => Count;

  string? extra;
  int? client_id;
  int32? file_id;
  int32? offset;

  GetFileDownloadedPrefixSize({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
    int32? this.offset,
  });

  GetFileDownloadedPrefixSize.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CancelDownloadFile extends TdFunction {
  String get tlType => 'cancelDownloadFile';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? file_id;
  Bool? only_if_pending;

  CancelDownloadFile({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
    Bool? this.only_if_pending,
  });

  CancelDownloadFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
    only_if_pending =
        map.containsKey('only_if_pending') ? map['only_if_pending'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
      'only_if_pending': only_if_pending?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSuggestedFileName extends TdFunction {
  String get tlType => 'getSuggestedFileName';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  int32? file_id;
  string? directory;

  GetSuggestedFileName({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
    string? this.directory,
  });

  GetSuggestedFileName.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
    directory = map.containsKey('directory') ? map['directory'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
      'directory': directory?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UploadFile extends TdFunction {
  String get tlType => 'uploadFile';

  Type get tdReturnType => File;

  string? extra;
  int? client_id;
  InputFile? file;
  FileType? file_type;
  int32? priority;

  UploadFile({
    string? this.extra,
    int? this.client_id,
    InputFile? this.file,
    FileType? this.file_type,
    int32? this.priority,
  });

  UploadFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file = map.containsKey('file')
        ? TlMap.fromMap(map['file']) as InputFile
        : null;
    file_type = map.containsKey('file_type')
        ? TlMap.fromMap(map['file_type']) as FileType
        : null;
    priority = map.containsKey('priority') ? map['priority'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file': file?.toMap(skipNulls: skipNulls),
      'file_type': file_type?.toMap(skipNulls: skipNulls),
      'priority': priority?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CancelUploadFile extends TdFunction {
  String get tlType => 'cancelUploadFile';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? file_id;

  CancelUploadFile({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
  });

  CancelUploadFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class WriteGeneratedFilePart extends TdFunction {
  String get tlType => 'writeGeneratedFilePart';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? generation_id;
  int32? offset;
  bytes? data;

  WriteGeneratedFilePart({
    string? this.extra,
    int? this.client_id,
    int64? this.generation_id,
    int32? this.offset,
    bytes? this.data,
  });

  WriteGeneratedFilePart.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    generation_id =
        map.containsKey('generation_id') ? map['generation_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'generation_id': generation_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetFileGenerationProgress extends TdFunction {
  String get tlType => 'setFileGenerationProgress';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? generation_id;
  int32? expected_size;
  int32? local_prefix_size;

  SetFileGenerationProgress({
    string? this.extra,
    int? this.client_id,
    int64? this.generation_id,
    int32? this.expected_size,
    int32? this.local_prefix_size,
  });

  SetFileGenerationProgress.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    generation_id =
        map.containsKey('generation_id') ? map['generation_id'] : null;
    expected_size =
        map.containsKey('expected_size') ? map['expected_size'] : null;
    local_prefix_size =
        map.containsKey('local_prefix_size') ? map['local_prefix_size'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'generation_id': generation_id?.toMap(skipNulls: skipNulls),
      'expected_size': expected_size?.toMap(skipNulls: skipNulls),
      'local_prefix_size': local_prefix_size?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class FinishFileGeneration extends TdFunction {
  String get tlType => 'finishFileGeneration';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? generation_id;
  Error? error;

  FinishFileGeneration({
    string? this.extra,
    int? this.client_id,
    int64? this.generation_id,
    Error? this.error,
  });

  FinishFileGeneration.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    generation_id =
        map.containsKey('generation_id') ? map['generation_id'] : null;
    error =
        map.containsKey('error') ? TlMap.fromMap(map['error']) as Error : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'generation_id': generation_id?.toMap(skipNulls: skipNulls),
      'error': error?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReadFilePart extends TdFunction {
  String get tlType => 'readFilePart';

  Type get tdReturnType => FilePart;

  string? extra;
  int? client_id;
  int32? file_id;
  int32? offset;
  int32? count;

  ReadFilePart({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
    int32? this.offset,
    int32? this.count,
  });

  ReadFilePart.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    count = map.containsKey('count') ? map['count'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'count': count?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteFile extends TdFunction {
  String get tlType => 'deleteFile';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? file_id;

  DeleteFile({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
  });

  DeleteFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageFileType extends TdFunction {
  String get tlType => 'getMessageFileType';

  Type get tdReturnType => MessageFileType;

  string? extra;
  int? client_id;
  string? message_file_head;

  GetMessageFileType({
    string? this.extra,
    int? this.client_id,
    string? this.message_file_head,
  });

  GetMessageFileType.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_file_head =
        map.containsKey('message_file_head') ? map['message_file_head'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_file_head': message_file_head?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageImportConfirmationText extends TdFunction {
  String get tlType => 'getMessageImportConfirmationText';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetMessageImportConfirmationText({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetMessageImportConfirmationText.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ImportMessages extends TdFunction {
  String get tlType => 'importMessages';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  InputFile? message_file;
  vector<InputFile>? attached_files;

  ImportMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    InputFile? this.message_file,
    vector<InputFile>? this.attached_files,
  });

  ImportMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_file = map.containsKey('message_file')
        ? TlMap.fromMap(map['message_file']) as InputFile
        : null;
    if (map.containsKey('attached_files') && map['attached_files'] != null) {
      attached_files = [];
      var someValues = map['attached_files'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InputFile;
        attached_files?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_file': message_file?.toMap(skipNulls: skipNulls),
      'attached_files': attached_files?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReplacePrimaryChatInviteLink extends TdFunction {
  String get tlType => 'replacePrimaryChatInviteLink';

  Type get tdReturnType => ChatInviteLink;

  string? extra;
  int? client_id;
  int53? chat_id;

  ReplacePrimaryChatInviteLink({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  ReplacePrimaryChatInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateChatInviteLink extends TdFunction {
  String get tlType => 'createChatInviteLink';

  Type get tdReturnType => ChatInviteLink;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? name;
  int32? expiration_date;
  int32? member_limit;
  Bool? creates_join_request;

  CreateChatInviteLink({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.name,
    int32? this.expiration_date,
    int32? this.member_limit,
    Bool? this.creates_join_request,
  });

  CreateChatInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    expiration_date =
        map.containsKey('expiration_date') ? map['expiration_date'] : null;
    member_limit = map.containsKey('member_limit') ? map['member_limit'] : null;
    creates_join_request = map.containsKey('creates_join_request')
        ? map['creates_join_request']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'expiration_date': expiration_date?.toMap(skipNulls: skipNulls),
      'member_limit': member_limit?.toMap(skipNulls: skipNulls),
      'creates_join_request': creates_join_request?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditChatInviteLink extends TdFunction {
  String get tlType => 'editChatInviteLink';

  Type get tdReturnType => ChatInviteLink;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? invite_link;
  string? name;
  int32? expiration_date;
  int32? member_limit;
  Bool? creates_join_request;

  EditChatInviteLink({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.invite_link,
    string? this.name,
    int32? this.expiration_date,
    int32? this.member_limit,
    Bool? this.creates_join_request,
  });

  EditChatInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    expiration_date =
        map.containsKey('expiration_date') ? map['expiration_date'] : null;
    member_limit = map.containsKey('member_limit') ? map['member_limit'] : null;
    creates_join_request = map.containsKey('creates_join_request')
        ? map['creates_join_request']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'expiration_date': expiration_date?.toMap(skipNulls: skipNulls),
      'member_limit': member_limit?.toMap(skipNulls: skipNulls),
      'creates_join_request': creates_join_request?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatInviteLink extends TdFunction {
  String get tlType => 'getChatInviteLink';

  Type get tdReturnType => ChatInviteLink;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? invite_link;

  GetChatInviteLink({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.invite_link,
  });

  GetChatInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatInviteLinkCounts extends TdFunction {
  String get tlType => 'getChatInviteLinkCounts';

  Type get tdReturnType => ChatInviteLinkCounts;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetChatInviteLinkCounts({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetChatInviteLinkCounts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatInviteLinks extends TdFunction {
  String get tlType => 'getChatInviteLinks';

  Type get tdReturnType => ChatInviteLinks;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? creator_user_id;
  Bool? is_revoked;
  int32? offset_date;
  string? offset_invite_link;
  int32? limit;

  GetChatInviteLinks({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.creator_user_id,
    Bool? this.is_revoked,
    int32? this.offset_date,
    string? this.offset_invite_link,
    int32? this.limit,
  });

  GetChatInviteLinks.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    creator_user_id =
        map.containsKey('creator_user_id') ? map['creator_user_id'] : null;
    is_revoked = map.containsKey('is_revoked') ? map['is_revoked'] : null;
    offset_date = map.containsKey('offset_date') ? map['offset_date'] : null;
    offset_invite_link = map.containsKey('offset_invite_link')
        ? map['offset_invite_link']
        : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'creator_user_id': creator_user_id?.toMap(skipNulls: skipNulls),
      'is_revoked': is_revoked?.toMap(skipNulls: skipNulls),
      'offset_date': offset_date?.toMap(skipNulls: skipNulls),
      'offset_invite_link': offset_invite_link?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatInviteLinkMembers extends TdFunction {
  String get tlType => 'getChatInviteLinkMembers';

  Type get tdReturnType => ChatInviteLinkMembers;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? invite_link;
  ChatInviteLinkMember? offset_member;
  int32? limit;

  GetChatInviteLinkMembers({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.invite_link,
    ChatInviteLinkMember? this.offset_member,
    int32? this.limit,
  });

  GetChatInviteLinkMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
    offset_member = map.containsKey('offset_member')
        ? TlMap.fromMap(map['offset_member']) as ChatInviteLinkMember
        : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
      'offset_member': offset_member?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RevokeChatInviteLink extends TdFunction {
  String get tlType => 'revokeChatInviteLink';

  Type get tdReturnType => ChatInviteLinks;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? invite_link;

  RevokeChatInviteLink({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.invite_link,
  });

  RevokeChatInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteRevokedChatInviteLink extends TdFunction {
  String get tlType => 'deleteRevokedChatInviteLink';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? invite_link;

  DeleteRevokedChatInviteLink({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.invite_link,
  });

  DeleteRevokedChatInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteAllRevokedChatInviteLinks extends TdFunction {
  String get tlType => 'deleteAllRevokedChatInviteLinks';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? creator_user_id;

  DeleteAllRevokedChatInviteLinks({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.creator_user_id,
  });

  DeleteAllRevokedChatInviteLinks.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    creator_user_id =
        map.containsKey('creator_user_id') ? map['creator_user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'creator_user_id': creator_user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckChatInviteLink extends TdFunction {
  String get tlType => 'checkChatInviteLink';

  Type get tdReturnType => ChatInviteLinkInfo;

  string? extra;
  int? client_id;
  string? invite_link;

  CheckChatInviteLink({
    string? this.extra,
    int? this.client_id,
    string? this.invite_link,
  });

  CheckChatInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JoinChatByInviteLink extends TdFunction {
  String get tlType => 'joinChatByInviteLink';

  Type get tdReturnType => Chat;

  string? extra;
  int? client_id;
  string? invite_link;

  JoinChatByInviteLink({
    string? this.extra,
    int? this.client_id,
    string? this.invite_link,
  });

  JoinChatByInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatJoinRequests extends TdFunction {
  String get tlType => 'getChatJoinRequests';

  Type get tdReturnType => ChatJoinRequests;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? invite_link;
  string? query;
  ChatJoinRequest? offset_request;
  int32? limit;

  GetChatJoinRequests({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.invite_link,
    string? this.query,
    ChatJoinRequest? this.offset_request,
    int32? this.limit,
  });

  GetChatJoinRequests.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    offset_request = map.containsKey('offset_request')
        ? TlMap.fromMap(map['offset_request']) as ChatJoinRequest
        : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'offset_request': offset_request?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ProcessChatJoinRequest extends TdFunction {
  String get tlType => 'processChatJoinRequest';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? user_id;
  Bool? approve;

  ProcessChatJoinRequest({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.user_id,
    Bool? this.approve,
  });

  ProcessChatJoinRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    approve = map.containsKey('approve') ? map['approve'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'approve': approve?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ProcessChatJoinRequests extends TdFunction {
  String get tlType => 'processChatJoinRequests';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? invite_link;
  Bool? approve;

  ProcessChatJoinRequests({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.invite_link,
    Bool? this.approve,
  });

  ProcessChatJoinRequests.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    invite_link = map.containsKey('invite_link') ? map['invite_link'] : null;
    approve = map.containsKey('approve') ? map['approve'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'invite_link': invite_link?.toMap(skipNulls: skipNulls),
      'approve': approve?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateCall extends TdFunction {
  String get tlType => 'createCall';

  Type get tdReturnType => CallId;

  string? extra;
  int? client_id;
  int53? user_id;
  CallProtocol? protocol;
  Bool? is_video;

  CreateCall({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    CallProtocol? this.protocol,
    Bool? this.is_video,
  });

  CreateCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    protocol = map.containsKey('protocol')
        ? TlMap.fromMap(map['protocol']) as CallProtocol
        : null;
    is_video = map.containsKey('is_video') ? map['is_video'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'protocol': protocol?.toMap(skipNulls: skipNulls),
      'is_video': is_video?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AcceptCall extends TdFunction {
  String get tlType => 'acceptCall';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? call_id;
  CallProtocol? protocol;

  AcceptCall({
    string? this.extra,
    int? this.client_id,
    int32? this.call_id,
    CallProtocol? this.protocol,
  });

  AcceptCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    call_id = map.containsKey('call_id') ? map['call_id'] : null;
    protocol = map.containsKey('protocol')
        ? TlMap.fromMap(map['protocol']) as CallProtocol
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'call_id': call_id?.toMap(skipNulls: skipNulls),
      'protocol': protocol?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendCallSignalingData extends TdFunction {
  String get tlType => 'sendCallSignalingData';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? call_id;
  bytes? data;

  SendCallSignalingData({
    string? this.extra,
    int? this.client_id,
    int32? this.call_id,
    bytes? this.data,
  });

  SendCallSignalingData.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    call_id = map.containsKey('call_id') ? map['call_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'call_id': call_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DiscardCall extends TdFunction {
  String get tlType => 'discardCall';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? call_id;
  Bool? is_disconnected;
  int32? duration;
  Bool? is_video;
  int64? connection_id;

  DiscardCall({
    string? this.extra,
    int? this.client_id,
    int32? this.call_id,
    Bool? this.is_disconnected,
    int32? this.duration,
    Bool? this.is_video,
    int64? this.connection_id,
  });

  DiscardCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    call_id = map.containsKey('call_id') ? map['call_id'] : null;
    is_disconnected =
        map.containsKey('is_disconnected') ? map['is_disconnected'] : null;
    duration = map.containsKey('duration') ? map['duration'] : null;
    is_video = map.containsKey('is_video') ? map['is_video'] : null;
    connection_id =
        map.containsKey('connection_id') ? map['connection_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'call_id': call_id?.toMap(skipNulls: skipNulls),
      'is_disconnected': is_disconnected?.toMap(skipNulls: skipNulls),
      'duration': duration?.toMap(skipNulls: skipNulls),
      'is_video': is_video?.toMap(skipNulls: skipNulls),
      'connection_id': connection_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendCallRating extends TdFunction {
  String get tlType => 'sendCallRating';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? call_id;
  int32? rating;
  string? comment;
  vector<CallProblem>? problems;

  SendCallRating({
    string? this.extra,
    int? this.client_id,
    int32? this.call_id,
    int32? this.rating,
    string? this.comment,
    vector<CallProblem>? this.problems,
  });

  SendCallRating.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    call_id = map.containsKey('call_id') ? map['call_id'] : null;
    rating = map.containsKey('rating') ? map['rating'] : null;
    comment = map.containsKey('comment') ? map['comment'] : null;
    if (map.containsKey('problems') && map['problems'] != null) {
      problems = [];
      var someValues = map['problems'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as CallProblem;
        problems?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'call_id': call_id?.toMap(skipNulls: skipNulls),
      'rating': rating?.toMap(skipNulls: skipNulls),
      'comment': comment?.toMap(skipNulls: skipNulls),
      'problems': problems?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendCallDebugInformation extends TdFunction {
  String get tlType => 'sendCallDebugInformation';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? call_id;
  string? debug_information;

  SendCallDebugInformation({
    string? this.extra,
    int? this.client_id,
    int32? this.call_id,
    string? this.debug_information,
  });

  SendCallDebugInformation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    call_id = map.containsKey('call_id') ? map['call_id'] : null;
    debug_information =
        map.containsKey('debug_information') ? map['debug_information'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'call_id': call_id?.toMap(skipNulls: skipNulls),
      'debug_information': debug_information?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetVideoChatAvailableParticipants extends TdFunction {
  String get tlType => 'getVideoChatAvailableParticipants';

  Type get tdReturnType => MessageSenders;

  string? extra;
  int? client_id;
  int53? chat_id;

  GetVideoChatAvailableParticipants({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  GetVideoChatAvailableParticipants.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetVideoChatDefaultParticipant extends TdFunction {
  String get tlType => 'setVideoChatDefaultParticipant';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  MessageSender? default_participant_id;

  SetVideoChatDefaultParticipant({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    MessageSender? this.default_participant_id,
  });

  SetVideoChatDefaultParticipant.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    default_participant_id = map.containsKey('default_participant_id')
        ? TlMap.fromMap(map['default_participant_id']) as MessageSender
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'default_participant_id':
          default_participant_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateVideoChat extends TdFunction {
  String get tlType => 'createVideoChat';

  Type get tdReturnType => GroupCallId;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? title;
  int32? start_date;

  CreateVideoChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.title,
    int32? this.start_date,
  });

  CreateVideoChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    start_date = map.containsKey('start_date') ? map['start_date'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'start_date': start_date?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetGroupCall extends TdFunction {
  String get tlType => 'getGroupCall';

  Type get tdReturnType => GroupCall;

  string? extra;
  int? client_id;
  int32? group_call_id;

  GetGroupCall({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  GetGroupCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StartScheduledGroupCall extends TdFunction {
  String get tlType => 'startScheduledGroupCall';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;

  StartScheduledGroupCall({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  StartScheduledGroupCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleGroupCallEnabledStartNotification extends TdFunction {
  String get tlType => 'toggleGroupCallEnabledStartNotification';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  Bool? enabled_start_notification;

  ToggleGroupCallEnabledStartNotification({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    Bool? this.enabled_start_notification,
  });

  ToggleGroupCallEnabledStartNotification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    enabled_start_notification = map.containsKey('enabled_start_notification')
        ? map['enabled_start_notification']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'enabled_start_notification':
          enabled_start_notification?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class JoinGroupCall extends TdFunction {
  String get tlType => 'joinGroupCall';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  int32? group_call_id;
  MessageSender? participant_id;
  int32? audio_source_id;
  string? payload;
  Bool? is_muted;
  Bool? is_my_video_enabled;
  string? invite_hash;

  JoinGroupCall({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    MessageSender? this.participant_id,
    int32? this.audio_source_id,
    string? this.payload,
    Bool? this.is_muted,
    Bool? this.is_my_video_enabled,
    string? this.invite_hash,
  });

  JoinGroupCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    participant_id = map.containsKey('participant_id')
        ? TlMap.fromMap(map['participant_id']) as MessageSender
        : null;
    audio_source_id =
        map.containsKey('audio_source_id') ? map['audio_source_id'] : null;
    payload = map.containsKey('payload') ? map['payload'] : null;
    is_muted = map.containsKey('is_muted') ? map['is_muted'] : null;
    is_my_video_enabled = map.containsKey('is_my_video_enabled')
        ? map['is_my_video_enabled']
        : null;
    invite_hash = map.containsKey('invite_hash') ? map['invite_hash'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'participant_id': participant_id?.toMap(skipNulls: skipNulls),
      'audio_source_id': audio_source_id?.toMap(skipNulls: skipNulls),
      'payload': payload?.toMap(skipNulls: skipNulls),
      'is_muted': is_muted?.toMap(skipNulls: skipNulls),
      'is_my_video_enabled': is_my_video_enabled?.toMap(skipNulls: skipNulls),
      'invite_hash': invite_hash?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StartGroupCallScreenSharing extends TdFunction {
  String get tlType => 'startGroupCallScreenSharing';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  int32? group_call_id;
  int32? audio_source_id;
  string? payload;

  StartGroupCallScreenSharing({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    int32? this.audio_source_id,
    string? this.payload,
  });

  StartGroupCallScreenSharing.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    audio_source_id =
        map.containsKey('audio_source_id') ? map['audio_source_id'] : null;
    payload = map.containsKey('payload') ? map['payload'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'audio_source_id': audio_source_id?.toMap(skipNulls: skipNulls),
      'payload': payload?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleGroupCallScreenSharingIsPaused extends TdFunction {
  String get tlType => 'toggleGroupCallScreenSharingIsPaused';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  Bool? is_paused;

  ToggleGroupCallScreenSharingIsPaused({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    Bool? this.is_paused,
  });

  ToggleGroupCallScreenSharingIsPaused.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    is_paused = map.containsKey('is_paused') ? map['is_paused'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'is_paused': is_paused?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EndGroupCallScreenSharing extends TdFunction {
  String get tlType => 'endGroupCallScreenSharing';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;

  EndGroupCallScreenSharing({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  EndGroupCallScreenSharing.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetGroupCallTitle extends TdFunction {
  String get tlType => 'setGroupCallTitle';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  string? title;

  SetGroupCallTitle({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    string? this.title,
  });

  SetGroupCallTitle.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleGroupCallMuteNewParticipants extends TdFunction {
  String get tlType => 'toggleGroupCallMuteNewParticipants';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  Bool? mute_new_participants;

  ToggleGroupCallMuteNewParticipants({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    Bool? this.mute_new_participants,
  });

  ToggleGroupCallMuteNewParticipants.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    mute_new_participants = map.containsKey('mute_new_participants')
        ? map['mute_new_participants']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'mute_new_participants':
          mute_new_participants?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class InviteGroupCallParticipants extends TdFunction {
  String get tlType => 'inviteGroupCallParticipants';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  vector<int53>? user_ids;

  InviteGroupCallParticipants({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    vector<int53>? this.user_ids,
  });

  InviteGroupCallParticipants.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetGroupCallInviteLink extends TdFunction {
  String get tlType => 'getGroupCallInviteLink';

  Type get tdReturnType => HttpUrl;

  string? extra;
  int? client_id;
  int32? group_call_id;
  Bool? can_self_unmute;

  GetGroupCallInviteLink({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    Bool? this.can_self_unmute,
  });

  GetGroupCallInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    can_self_unmute =
        map.containsKey('can_self_unmute') ? map['can_self_unmute'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'can_self_unmute': can_self_unmute?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RevokeGroupCallInviteLink extends TdFunction {
  String get tlType => 'revokeGroupCallInviteLink';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;

  RevokeGroupCallInviteLink({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  RevokeGroupCallInviteLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class StartGroupCallRecording extends TdFunction {
  String get tlType => 'startGroupCallRecording';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  string? title;
  Bool? record_video;
  Bool? use_portrait_orientation;

  StartGroupCallRecording({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    string? this.title,
    Bool? this.record_video,
    Bool? this.use_portrait_orientation,
  });

  StartGroupCallRecording.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    record_video = map.containsKey('record_video') ? map['record_video'] : null;
    use_portrait_orientation = map.containsKey('use_portrait_orientation')
        ? map['use_portrait_orientation']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'record_video': record_video?.toMap(skipNulls: skipNulls),
      'use_portrait_orientation':
          use_portrait_orientation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EndGroupCallRecording extends TdFunction {
  String get tlType => 'endGroupCallRecording';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;

  EndGroupCallRecording({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  EndGroupCallRecording.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleGroupCallIsMyVideoPaused extends TdFunction {
  String get tlType => 'toggleGroupCallIsMyVideoPaused';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  Bool? is_my_video_paused;

  ToggleGroupCallIsMyVideoPaused({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    Bool? this.is_my_video_paused,
  });

  ToggleGroupCallIsMyVideoPaused.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    is_my_video_paused = map.containsKey('is_my_video_paused')
        ? map['is_my_video_paused']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'is_my_video_paused': is_my_video_paused?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleGroupCallIsMyVideoEnabled extends TdFunction {
  String get tlType => 'toggleGroupCallIsMyVideoEnabled';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  Bool? is_my_video_enabled;

  ToggleGroupCallIsMyVideoEnabled({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    Bool? this.is_my_video_enabled,
  });

  ToggleGroupCallIsMyVideoEnabled.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    is_my_video_enabled = map.containsKey('is_my_video_enabled')
        ? map['is_my_video_enabled']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'is_my_video_enabled': is_my_video_enabled?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetGroupCallParticipantIsSpeaking extends TdFunction {
  String get tlType => 'setGroupCallParticipantIsSpeaking';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  int32? audio_source;
  Bool? is_speaking;

  SetGroupCallParticipantIsSpeaking({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    int32? this.audio_source,
    Bool? this.is_speaking,
  });

  SetGroupCallParticipantIsSpeaking.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    audio_source = map.containsKey('audio_source') ? map['audio_source'] : null;
    is_speaking = map.containsKey('is_speaking') ? map['is_speaking'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'audio_source': audio_source?.toMap(skipNulls: skipNulls),
      'is_speaking': is_speaking?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleGroupCallParticipantIsMuted extends TdFunction {
  String get tlType => 'toggleGroupCallParticipantIsMuted';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  MessageSender? participant_id;
  Bool? is_muted;

  ToggleGroupCallParticipantIsMuted({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    MessageSender? this.participant_id,
    Bool? this.is_muted,
  });

  ToggleGroupCallParticipantIsMuted.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    participant_id = map.containsKey('participant_id')
        ? TlMap.fromMap(map['participant_id']) as MessageSender
        : null;
    is_muted = map.containsKey('is_muted') ? map['is_muted'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'participant_id': participant_id?.toMap(skipNulls: skipNulls),
      'is_muted': is_muted?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetGroupCallParticipantVolumeLevel extends TdFunction {
  String get tlType => 'setGroupCallParticipantVolumeLevel';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  MessageSender? participant_id;
  int32? volume_level;

  SetGroupCallParticipantVolumeLevel({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    MessageSender? this.participant_id,
    int32? this.volume_level,
  });

  SetGroupCallParticipantVolumeLevel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    participant_id = map.containsKey('participant_id')
        ? TlMap.fromMap(map['participant_id']) as MessageSender
        : null;
    volume_level = map.containsKey('volume_level') ? map['volume_level'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'participant_id': participant_id?.toMap(skipNulls: skipNulls),
      'volume_level': volume_level?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleGroupCallParticipantIsHandRaised extends TdFunction {
  String get tlType => 'toggleGroupCallParticipantIsHandRaised';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  MessageSender? participant_id;
  Bool? is_hand_raised;

  ToggleGroupCallParticipantIsHandRaised({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    MessageSender? this.participant_id,
    Bool? this.is_hand_raised,
  });

  ToggleGroupCallParticipantIsHandRaised.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    participant_id = map.containsKey('participant_id')
        ? TlMap.fromMap(map['participant_id']) as MessageSender
        : null;
    is_hand_raised =
        map.containsKey('is_hand_raised') ? map['is_hand_raised'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'participant_id': participant_id?.toMap(skipNulls: skipNulls),
      'is_hand_raised': is_hand_raised?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LoadGroupCallParticipants extends TdFunction {
  String get tlType => 'loadGroupCallParticipants';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;
  int32? limit;

  LoadGroupCallParticipants({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    int32? this.limit,
  });

  LoadGroupCallParticipants.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class LeaveGroupCall extends TdFunction {
  String get tlType => 'leaveGroupCall';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;

  LeaveGroupCall({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  LeaveGroupCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EndGroupCall extends TdFunction {
  String get tlType => 'endGroupCall';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? group_call_id;

  EndGroupCall({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
  });

  EndGroupCall.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetGroupCallStreamSegment extends TdFunction {
  String get tlType => 'getGroupCallStreamSegment';

  Type get tdReturnType => FilePart;

  string? extra;
  int? client_id;
  int32? group_call_id;
  int53? time_offset;
  int32? scale;
  int32? channel_id;
  GroupCallVideoQuality? video_quality;

  GetGroupCallStreamSegment({
    string? this.extra,
    int? this.client_id,
    int32? this.group_call_id,
    int53? this.time_offset,
    int32? this.scale,
    int32? this.channel_id,
    GroupCallVideoQuality? this.video_quality,
  });

  GetGroupCallStreamSegment.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    group_call_id =
        map.containsKey('group_call_id') ? map['group_call_id'] : null;
    time_offset = map.containsKey('time_offset') ? map['time_offset'] : null;
    scale = map.containsKey('scale') ? map['scale'] : null;
    channel_id = map.containsKey('channel_id') ? map['channel_id'] : null;
    video_quality = map.containsKey('video_quality')
        ? TlMap.fromMap(map['video_quality']) as GroupCallVideoQuality
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'group_call_id': group_call_id?.toMap(skipNulls: skipNulls),
      'time_offset': time_offset?.toMap(skipNulls: skipNulls),
      'scale': scale?.toMap(skipNulls: skipNulls),
      'channel_id': channel_id?.toMap(skipNulls: skipNulls),
      'video_quality': video_quality?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleMessageSenderIsBlocked extends TdFunction {
  String get tlType => 'toggleMessageSenderIsBlocked';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  MessageSender? sender_id;
  Bool? is_blocked;

  ToggleMessageSenderIsBlocked({
    string? this.extra,
    int? this.client_id,
    MessageSender? this.sender_id,
    Bool? this.is_blocked,
  });

  ToggleMessageSenderIsBlocked.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sender_id = map.containsKey('sender_id')
        ? TlMap.fromMap(map['sender_id']) as MessageSender
        : null;
    is_blocked = map.containsKey('is_blocked') ? map['is_blocked'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sender_id': sender_id?.toMap(skipNulls: skipNulls),
      'is_blocked': is_blocked?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class BlockMessageSenderFromReplies extends TdFunction {
  String get tlType => 'blockMessageSenderFromReplies';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? message_id;
  Bool? delete_message;
  Bool? delete_all_messages;
  Bool? report_spam;

  BlockMessageSenderFromReplies({
    string? this.extra,
    int? this.client_id,
    int53? this.message_id,
    Bool? this.delete_message,
    Bool? this.delete_all_messages,
    Bool? this.report_spam,
  });

  BlockMessageSenderFromReplies.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    delete_message =
        map.containsKey('delete_message') ? map['delete_message'] : null;
    delete_all_messages = map.containsKey('delete_all_messages')
        ? map['delete_all_messages']
        : null;
    report_spam = map.containsKey('report_spam') ? map['report_spam'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'delete_message': delete_message?.toMap(skipNulls: skipNulls),
      'delete_all_messages': delete_all_messages?.toMap(skipNulls: skipNulls),
      'report_spam': report_spam?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetBlockedMessageSenders extends TdFunction {
  String get tlType => 'getBlockedMessageSenders';

  Type get tdReturnType => MessageSenders;

  string? extra;
  int? client_id;
  int32? offset;
  int32? limit;

  GetBlockedMessageSenders({
    string? this.extra,
    int? this.client_id,
    int32? this.offset,
    int32? this.limit,
  });

  GetBlockedMessageSenders.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddContact extends TdFunction {
  String get tlType => 'addContact';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  Contact? contact;
  Bool? share_phone_number;

  AddContact({
    string? this.extra,
    int? this.client_id,
    Contact? this.contact,
    Bool? this.share_phone_number,
  });

  AddContact.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    contact = map.containsKey('contact')
        ? TlMap.fromMap(map['contact']) as Contact
        : null;
    share_phone_number = map.containsKey('share_phone_number')
        ? map['share_phone_number']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'contact': contact?.toMap(skipNulls: skipNulls),
      'share_phone_number': share_phone_number?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ImportContacts extends TdFunction {
  String get tlType => 'importContacts';

  Type get tdReturnType => ImportedContacts;

  string? extra;
  int? client_id;
  vector<Contact>? contacts;

  ImportContacts({
    string? this.extra,
    int? this.client_id,
    vector<Contact>? this.contacts,
  });

  ImportContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('contacts') && map['contacts'] != null) {
      contacts = [];
      var someValues = map['contacts'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Contact;
        contacts?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'contacts': contacts?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetContacts extends TdFunction {
  String get tlType => 'getContacts';

  Type get tdReturnType => Users;

  string? extra;
  int? client_id;

  GetContacts({
    string? this.extra,
    int? this.client_id,
  });

  GetContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchContacts extends TdFunction {
  String get tlType => 'searchContacts';

  Type get tdReturnType => Users;

  string? extra;
  int? client_id;
  string? query;
  int32? limit;

  SearchContacts({
    string? this.extra,
    int? this.client_id,
    string? this.query,
    int32? this.limit,
  });

  SearchContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveContacts extends TdFunction {
  String get tlType => 'removeContacts';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  vector<int53>? user_ids;

  RemoveContacts({
    string? this.extra,
    int? this.client_id,
    vector<int53>? this.user_ids,
  });

  RemoveContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetImportedContactCount extends TdFunction {
  String get tlType => 'getImportedContactCount';

  Type get tdReturnType => Count;

  string? extra;
  int? client_id;

  GetImportedContactCount({
    string? this.extra,
    int? this.client_id,
  });

  GetImportedContactCount.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChangeImportedContacts extends TdFunction {
  String get tlType => 'changeImportedContacts';

  Type get tdReturnType => ImportedContacts;

  string? extra;
  int? client_id;
  vector<Contact>? contacts;

  ChangeImportedContacts({
    string? this.extra,
    int? this.client_id,
    vector<Contact>? this.contacts,
  });

  ChangeImportedContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('contacts') && map['contacts'] != null) {
      contacts = [];
      var someValues = map['contacts'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as Contact;
        contacts?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'contacts': contacts?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ClearImportedContacts extends TdFunction {
  String get tlType => 'clearImportedContacts';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  ClearImportedContacts({
    string? this.extra,
    int? this.client_id,
  });

  ClearImportedContacts.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SharePhoneNumber extends TdFunction {
  String get tlType => 'sharePhoneNumber';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? user_id;

  SharePhoneNumber({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
  });

  SharePhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetUserProfilePhotos extends TdFunction {
  String get tlType => 'getUserProfilePhotos';

  Type get tdReturnType => ChatPhotos;

  string? extra;
  int? client_id;
  int53? user_id;
  int32? offset;
  int32? limit;

  GetUserProfilePhotos({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    int32? this.offset,
    int32? this.limit,
  });

  GetUserProfilePhotos.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetStickers extends TdFunction {
  String get tlType => 'getStickers';

  Type get tdReturnType => Stickers;

  string? extra;
  int? client_id;
  string? emoji;
  int32? limit;

  GetStickers({
    string? this.extra,
    int? this.client_id,
    string? this.emoji,
    int32? this.limit,
  });

  GetStickers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchStickers extends TdFunction {
  String get tlType => 'searchStickers';

  Type get tdReturnType => Stickers;

  string? extra;
  int? client_id;
  string? emoji;
  int32? limit;

  SearchStickers({
    string? this.extra,
    int? this.client_id,
    string? this.emoji,
    int32? this.limit,
  });

  SearchStickers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetInstalledStickerSets extends TdFunction {
  String get tlType => 'getInstalledStickerSets';

  Type get tdReturnType => StickerSets;

  string? extra;
  int? client_id;
  Bool? is_masks;

  GetInstalledStickerSets({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_masks,
  });

  GetInstalledStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_masks = map.containsKey('is_masks') ? map['is_masks'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_masks': is_masks?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetArchivedStickerSets extends TdFunction {
  String get tlType => 'getArchivedStickerSets';

  Type get tdReturnType => StickerSets;

  string? extra;
  int? client_id;
  Bool? is_masks;
  int64? offset_sticker_set_id;
  int32? limit;

  GetArchivedStickerSets({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_masks,
    int64? this.offset_sticker_set_id,
    int32? this.limit,
  });

  GetArchivedStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_masks = map.containsKey('is_masks') ? map['is_masks'] : null;
    offset_sticker_set_id = map.containsKey('offset_sticker_set_id')
        ? map['offset_sticker_set_id']
        : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_masks': is_masks?.toMap(skipNulls: skipNulls),
      'offset_sticker_set_id':
          offset_sticker_set_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetTrendingStickerSets extends TdFunction {
  String get tlType => 'getTrendingStickerSets';

  Type get tdReturnType => StickerSets;

  string? extra;
  int? client_id;
  int32? offset;
  int32? limit;

  GetTrendingStickerSets({
    string? this.extra,
    int? this.client_id,
    int32? this.offset,
    int32? this.limit,
  });

  GetTrendingStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetAttachedStickerSets extends TdFunction {
  String get tlType => 'getAttachedStickerSets';

  Type get tdReturnType => StickerSets;

  string? extra;
  int? client_id;
  int32? file_id;

  GetAttachedStickerSets({
    string? this.extra,
    int? this.client_id,
    int32? this.file_id,
  });

  GetAttachedStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetStickerSet extends TdFunction {
  String get tlType => 'getStickerSet';

  Type get tdReturnType => StickerSet;

  string? extra;
  int? client_id;
  int64? set_id;

  GetStickerSet({
    string? this.extra,
    int? this.client_id,
    int64? this.set_id,
  });

  GetStickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    set_id = map.containsKey('set_id') ? map['set_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'set_id': set_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchStickerSet extends TdFunction {
  String get tlType => 'searchStickerSet';

  Type get tdReturnType => StickerSet;

  string? extra;
  int? client_id;
  string? name;

  SearchStickerSet({
    string? this.extra,
    int? this.client_id,
    string? this.name,
  });

  SearchStickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchInstalledStickerSets extends TdFunction {
  String get tlType => 'searchInstalledStickerSets';

  Type get tdReturnType => StickerSets;

  string? extra;
  int? client_id;
  Bool? is_masks;
  string? query;
  int32? limit;

  SearchInstalledStickerSets({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_masks,
    string? this.query,
    int32? this.limit,
  });

  SearchInstalledStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_masks = map.containsKey('is_masks') ? map['is_masks'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_masks': is_masks?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchStickerSets extends TdFunction {
  String get tlType => 'searchStickerSets';

  Type get tdReturnType => StickerSets;

  string? extra;
  int? client_id;
  string? query;

  SearchStickerSets({
    string? this.extra,
    int? this.client_id,
    string? this.query,
  });

  SearchStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChangeStickerSet extends TdFunction {
  String get tlType => 'changeStickerSet';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? set_id;
  Bool? is_installed;
  Bool? is_archived;

  ChangeStickerSet({
    string? this.extra,
    int? this.client_id,
    int64? this.set_id,
    Bool? this.is_installed,
    Bool? this.is_archived,
  });

  ChangeStickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    set_id = map.containsKey('set_id') ? map['set_id'] : null;
    is_installed = map.containsKey('is_installed') ? map['is_installed'] : null;
    is_archived = map.containsKey('is_archived') ? map['is_archived'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'set_id': set_id?.toMap(skipNulls: skipNulls),
      'is_installed': is_installed?.toMap(skipNulls: skipNulls),
      'is_archived': is_archived?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ViewTrendingStickerSets extends TdFunction {
  String get tlType => 'viewTrendingStickerSets';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  vector<int64>? sticker_set_ids;

  ViewTrendingStickerSets({
    string? this.extra,
    int? this.client_id,
    vector<int64>? this.sticker_set_ids,
  });

  ViewTrendingStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('sticker_set_ids') && map['sticker_set_ids'] != null) {
      sticker_set_ids = [];
      var someValues = map['sticker_set_ids'];
      for (var someValue in someValues) {
        sticker_set_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker_set_ids': sticker_set_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReorderInstalledStickerSets extends TdFunction {
  String get tlType => 'reorderInstalledStickerSets';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  Bool? is_masks;
  vector<int64>? sticker_set_ids;

  ReorderInstalledStickerSets({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_masks,
    vector<int64>? this.sticker_set_ids,
  });

  ReorderInstalledStickerSets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_masks = map.containsKey('is_masks') ? map['is_masks'] : null;
    if (map.containsKey('sticker_set_ids') && map['sticker_set_ids'] != null) {
      sticker_set_ids = [];
      var someValues = map['sticker_set_ids'];
      for (var someValue in someValues) {
        sticker_set_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_masks': is_masks?.toMap(skipNulls: skipNulls),
      'sticker_set_ids': sticker_set_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetRecentStickers extends TdFunction {
  String get tlType => 'getRecentStickers';

  Type get tdReturnType => Stickers;

  string? extra;
  int? client_id;
  Bool? is_attached;

  GetRecentStickers({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_attached,
  });

  GetRecentStickers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_attached = map.containsKey('is_attached') ? map['is_attached'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_attached': is_attached?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddRecentSticker extends TdFunction {
  String get tlType => 'addRecentSticker';

  Type get tdReturnType => Stickers;

  string? extra;
  int? client_id;
  Bool? is_attached;
  InputFile? sticker;

  AddRecentSticker({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_attached,
    InputFile? this.sticker,
  });

  AddRecentSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_attached = map.containsKey('is_attached') ? map['is_attached'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_attached': is_attached?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveRecentSticker extends TdFunction {
  String get tlType => 'removeRecentSticker';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  Bool? is_attached;
  InputFile? sticker;

  RemoveRecentSticker({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_attached,
    InputFile? this.sticker,
  });

  RemoveRecentSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_attached = map.containsKey('is_attached') ? map['is_attached'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_attached': is_attached?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ClearRecentStickers extends TdFunction {
  String get tlType => 'clearRecentStickers';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  Bool? is_attached;

  ClearRecentStickers({
    string? this.extra,
    int? this.client_id,
    Bool? this.is_attached,
  });

  ClearRecentStickers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    is_attached = map.containsKey('is_attached') ? map['is_attached'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'is_attached': is_attached?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetFavoriteStickers extends TdFunction {
  String get tlType => 'getFavoriteStickers';

  Type get tdReturnType => Stickers;

  string? extra;
  int? client_id;

  GetFavoriteStickers({
    string? this.extra,
    int? this.client_id,
  });

  GetFavoriteStickers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddFavoriteSticker extends TdFunction {
  String get tlType => 'addFavoriteSticker';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  InputFile? sticker;

  AddFavoriteSticker({
    string? this.extra,
    int? this.client_id,
    InputFile? this.sticker,
  });

  AddFavoriteSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveFavoriteSticker extends TdFunction {
  String get tlType => 'removeFavoriteSticker';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  InputFile? sticker;

  RemoveFavoriteSticker({
    string? this.extra,
    int? this.client_id,
    InputFile? this.sticker,
  });

  RemoveFavoriteSticker.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetStickerEmojis extends TdFunction {
  String get tlType => 'getStickerEmojis';

  Type get tdReturnType => Emojis;

  string? extra;
  int? client_id;
  InputFile? sticker;

  GetStickerEmojis({
    string? this.extra,
    int? this.client_id,
    InputFile? this.sticker,
  });

  GetStickerEmojis.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchEmojis extends TdFunction {
  String get tlType => 'searchEmojis';

  Type get tdReturnType => Emojis;

  string? extra;
  int? client_id;
  string? text;
  Bool? exact_match;
  vector<string>? input_language_codes;

  SearchEmojis({
    string? this.extra,
    int? this.client_id,
    string? this.text,
    Bool? this.exact_match,
    vector<string>? this.input_language_codes,
  });

  SearchEmojis.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text') ? map['text'] : null;
    exact_match = map.containsKey('exact_match') ? map['exact_match'] : null;
    if (map.containsKey('input_language_codes') &&
        map['input_language_codes'] != null) {
      input_language_codes = [];
      var someValues = map['input_language_codes'];
      for (var someValue in someValues) {
        input_language_codes?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
      'exact_match': exact_match?.toMap(skipNulls: skipNulls),
      'input_language_codes': input_language_codes?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetAnimatedEmoji extends TdFunction {
  String get tlType => 'getAnimatedEmoji';

  Type get tdReturnType => AnimatedEmoji;

  string? extra;
  int? client_id;
  string? emoji;

  GetAnimatedEmoji({
    string? this.extra,
    int? this.client_id,
    string? this.emoji,
  });

  GetAnimatedEmoji.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    emoji = map.containsKey('emoji') ? map['emoji'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'emoji': emoji?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetEmojiSuggestionsUrl extends TdFunction {
  String get tlType => 'getEmojiSuggestionsUrl';

  Type get tdReturnType => HttpUrl;

  string? extra;
  int? client_id;
  string? language_code;

  GetEmojiSuggestionsUrl({
    string? this.extra,
    int? this.client_id,
    string? this.language_code,
  });

  GetEmojiSuggestionsUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_code =
        map.containsKey('language_code') ? map['language_code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_code': language_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSavedAnimations extends TdFunction {
  String get tlType => 'getSavedAnimations';

  Type get tdReturnType => Animations;

  string? extra;
  int? client_id;

  GetSavedAnimations({
    string? this.extra,
    int? this.client_id,
  });

  GetSavedAnimations.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddSavedAnimation extends TdFunction {
  String get tlType => 'addSavedAnimation';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  InputFile? animation;

  AddSavedAnimation({
    string? this.extra,
    int? this.client_id,
    InputFile? this.animation,
  });

  AddSavedAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveSavedAnimation extends TdFunction {
  String get tlType => 'removeSavedAnimation';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  InputFile? animation;

  RemoveSavedAnimation({
    string? this.extra,
    int? this.client_id,
    InputFile? this.animation,
  });

  RemoveSavedAnimation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    animation = map.containsKey('animation')
        ? TlMap.fromMap(map['animation']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'animation': animation?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetRecentInlineBots extends TdFunction {
  String get tlType => 'getRecentInlineBots';

  Type get tdReturnType => Users;

  string? extra;
  int? client_id;

  GetRecentInlineBots({
    string? this.extra,
    int? this.client_id,
  });

  GetRecentInlineBots.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchHashtags extends TdFunction {
  String get tlType => 'searchHashtags';

  Type get tdReturnType => Hashtags;

  string? extra;
  int? client_id;
  string? prefix;
  int32? limit;

  SearchHashtags({
    string? this.extra,
    int? this.client_id,
    string? this.prefix,
    int32? this.limit,
  });

  SearchHashtags.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    prefix = map.containsKey('prefix') ? map['prefix'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'prefix': prefix?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveRecentHashtag extends TdFunction {
  String get tlType => 'removeRecentHashtag';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? hashtag;

  RemoveRecentHashtag({
    string? this.extra,
    int? this.client_id,
    string? this.hashtag,
  });

  RemoveRecentHashtag.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    hashtag = map.containsKey('hashtag') ? map['hashtag'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'hashtag': hashtag?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetWebPagePreview extends TdFunction {
  String get tlType => 'getWebPagePreview';

  Type get tdReturnType => WebPage;

  string? extra;
  int? client_id;
  FormattedText? text;

  GetWebPagePreview({
    string? this.extra,
    int? this.client_id,
    FormattedText? this.text,
  });

  GetWebPagePreview.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    text = map.containsKey('text')
        ? TlMap.fromMap(map['text']) as FormattedText
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetWebPageInstantView extends TdFunction {
  String get tlType => 'getWebPageInstantView';

  Type get tdReturnType => WebPageInstantView;

  string? extra;
  int? client_id;
  string? url;
  Bool? force_full;

  GetWebPageInstantView({
    string? this.extra,
    int? this.client_id,
    string? this.url,
    Bool? this.force_full,
  });

  GetWebPageInstantView.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    url = map.containsKey('url') ? map['url'] : null;
    force_full = map.containsKey('force_full') ? map['force_full'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'url': url?.toMap(skipNulls: skipNulls),
      'force_full': force_full?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetProfilePhoto extends TdFunction {
  String get tlType => 'setProfilePhoto';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  InputChatPhoto? photo;

  SetProfilePhoto({
    string? this.extra,
    int? this.client_id,
    InputChatPhoto? this.photo,
  });

  SetProfilePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    photo = map.containsKey('photo')
        ? TlMap.fromMap(map['photo']) as InputChatPhoto
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'photo': photo?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteProfilePhoto extends TdFunction {
  String get tlType => 'deleteProfilePhoto';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? profile_photo_id;

  DeleteProfilePhoto({
    string? this.extra,
    int? this.client_id,
    int64? this.profile_photo_id,
  });

  DeleteProfilePhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    profile_photo_id =
        map.containsKey('profile_photo_id') ? map['profile_photo_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'profile_photo_id': profile_photo_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetName extends TdFunction {
  String get tlType => 'setName';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? first_name;
  string? last_name;

  SetName({
    string? this.extra,
    int? this.client_id,
    string? this.first_name,
    string? this.last_name,
  });

  SetName.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    first_name = map.containsKey('first_name') ? map['first_name'] : null;
    last_name = map.containsKey('last_name') ? map['last_name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'first_name': first_name?.toMap(skipNulls: skipNulls),
      'last_name': last_name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetBio extends TdFunction {
  String get tlType => 'setBio';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? bio;

  SetBio({
    string? this.extra,
    int? this.client_id,
    string? this.bio,
  });

  SetBio.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bio = map.containsKey('bio') ? map['bio'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bio': bio?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetUsername extends TdFunction {
  String get tlType => 'setUsername';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? username;

  SetUsername({
    string? this.extra,
    int? this.client_id,
    string? this.username,
  });

  SetUsername.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    username = map.containsKey('username') ? map['username'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetLocation extends TdFunction {
  String get tlType => 'setLocation';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  Location? location;

  SetLocation({
    string? this.extra,
    int? this.client_id,
    Location? this.location,
  });

  SetLocation.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ChangePhoneNumber extends TdFunction {
  String get tlType => 'changePhoneNumber';

  Type get tdReturnType => AuthenticationCodeInfo;

  string? extra;
  int? client_id;
  string? phone_number;
  PhoneNumberAuthenticationSettings? settings;

  ChangePhoneNumber({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number,
    PhoneNumberAuthenticationSettings? this.settings,
  });

  ChangePhoneNumber.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
    settings = map.containsKey('settings')
        ? TlMap.fromMap(map['settings']) as PhoneNumberAuthenticationSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
      'settings': settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResendChangePhoneNumberCode extends TdFunction {
  String get tlType => 'resendChangePhoneNumberCode';

  Type get tdReturnType => AuthenticationCodeInfo;

  string? extra;
  int? client_id;

  ResendChangePhoneNumberCode({
    string? this.extra,
    int? this.client_id,
  });

  ResendChangePhoneNumberCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckChangePhoneNumberCode extends TdFunction {
  String get tlType => 'checkChangePhoneNumberCode';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? code;

  CheckChangePhoneNumberCode({
    string? this.extra,
    int? this.client_id,
    string? this.code,
  });

  CheckChangePhoneNumberCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code = map.containsKey('code') ? map['code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code': code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetCommands extends TdFunction {
  String get tlType => 'setCommands';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  BotCommandScope? scope;
  string? language_code;
  vector<BotCommand>? commands;

  SetCommands({
    string? this.extra,
    int? this.client_id,
    BotCommandScope? this.scope,
    string? this.language_code,
    vector<BotCommand>? this.commands,
  });

  SetCommands.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    scope = map.containsKey('scope')
        ? TlMap.fromMap(map['scope']) as BotCommandScope
        : null;
    language_code =
        map.containsKey('language_code') ? map['language_code'] : null;
    if (map.containsKey('commands') && map['commands'] != null) {
      commands = [];
      var someValues = map['commands'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as BotCommand;
        commands?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
      'language_code': language_code?.toMap(skipNulls: skipNulls),
      'commands': commands?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteCommands extends TdFunction {
  String get tlType => 'deleteCommands';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  BotCommandScope? scope;
  string? language_code;

  DeleteCommands({
    string? this.extra,
    int? this.client_id,
    BotCommandScope? this.scope,
    string? this.language_code,
  });

  DeleteCommands.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    scope = map.containsKey('scope')
        ? TlMap.fromMap(map['scope']) as BotCommandScope
        : null;
    language_code =
        map.containsKey('language_code') ? map['language_code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
      'language_code': language_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetCommands extends TdFunction {
  String get tlType => 'getCommands';

  Type get tdReturnType => BotCommands;

  string? extra;
  int? client_id;
  BotCommandScope? scope;
  string? language_code;

  GetCommands({
    string? this.extra,
    int? this.client_id,
    BotCommandScope? this.scope,
    string? this.language_code,
  });

  GetCommands.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    scope = map.containsKey('scope')
        ? TlMap.fromMap(map['scope']) as BotCommandScope
        : null;
    language_code =
        map.containsKey('language_code') ? map['language_code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
      'language_code': language_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetActiveSessions extends TdFunction {
  String get tlType => 'getActiveSessions';

  Type get tdReturnType => Sessions;

  string? extra;
  int? client_id;

  GetActiveSessions({
    string? this.extra,
    int? this.client_id,
  });

  GetActiveSessions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TerminateSession extends TdFunction {
  String get tlType => 'terminateSession';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? session_id;

  TerminateSession({
    string? this.extra,
    int? this.client_id,
    int64? this.session_id,
  });

  TerminateSession.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    session_id = map.containsKey('session_id') ? map['session_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'session_id': session_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TerminateAllOtherSessions extends TdFunction {
  String get tlType => 'terminateAllOtherSessions';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  TerminateAllOtherSessions({
    string? this.extra,
    int? this.client_id,
  });

  TerminateAllOtherSessions.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleSessionCanAcceptCalls extends TdFunction {
  String get tlType => 'toggleSessionCanAcceptCalls';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? session_id;
  Bool? can_accept_calls;

  ToggleSessionCanAcceptCalls({
    string? this.extra,
    int? this.client_id,
    int64? this.session_id,
    Bool? this.can_accept_calls,
  });

  ToggleSessionCanAcceptCalls.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    session_id = map.containsKey('session_id') ? map['session_id'] : null;
    can_accept_calls =
        map.containsKey('can_accept_calls') ? map['can_accept_calls'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'session_id': session_id?.toMap(skipNulls: skipNulls),
      'can_accept_calls': can_accept_calls?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleSessionCanAcceptSecretChats extends TdFunction {
  String get tlType => 'toggleSessionCanAcceptSecretChats';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? session_id;
  Bool? can_accept_secret_chats;

  ToggleSessionCanAcceptSecretChats({
    string? this.extra,
    int? this.client_id,
    int64? this.session_id,
    Bool? this.can_accept_secret_chats,
  });

  ToggleSessionCanAcceptSecretChats.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    session_id = map.containsKey('session_id') ? map['session_id'] : null;
    can_accept_secret_chats = map.containsKey('can_accept_secret_chats')
        ? map['can_accept_secret_chats']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'session_id': session_id?.toMap(skipNulls: skipNulls),
      'can_accept_secret_chats':
          can_accept_secret_chats?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetInactiveSessionTtl extends TdFunction {
  String get tlType => 'setInactiveSessionTtl';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? inactive_session_ttl_days;

  SetInactiveSessionTtl({
    string? this.extra,
    int? this.client_id,
    int32? this.inactive_session_ttl_days,
  });

  SetInactiveSessionTtl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    inactive_session_ttl_days = map.containsKey('inactive_session_ttl_days')
        ? map['inactive_session_ttl_days']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'inactive_session_ttl_days':
          inactive_session_ttl_days?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetConnectedWebsites extends TdFunction {
  String get tlType => 'getConnectedWebsites';

  Type get tdReturnType => ConnectedWebsites;

  string? extra;
  int? client_id;

  GetConnectedWebsites({
    string? this.extra,
    int? this.client_id,
  });

  GetConnectedWebsites.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DisconnectWebsite extends TdFunction {
  String get tlType => 'disconnectWebsite';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? website_id;

  DisconnectWebsite({
    string? this.extra,
    int? this.client_id,
    int64? this.website_id,
  });

  DisconnectWebsite.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    website_id = map.containsKey('website_id') ? map['website_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'website_id': website_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DisconnectAllWebsites extends TdFunction {
  String get tlType => 'disconnectAllWebsites';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  DisconnectAllWebsites({
    string? this.extra,
    int? this.client_id,
  });

  DisconnectAllWebsites.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetSupergroupUsername extends TdFunction {
  String get tlType => 'setSupergroupUsername';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? supergroup_id;
  string? username;

  SetSupergroupUsername({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    string? this.username,
  });

  SetSupergroupUsername.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    username = map.containsKey('username') ? map['username'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'username': username?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetSupergroupStickerSet extends TdFunction {
  String get tlType => 'setSupergroupStickerSet';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? supergroup_id;
  int64? sticker_set_id;

  SetSupergroupStickerSet({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    int64? this.sticker_set_id,
  });

  SetSupergroupStickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    sticker_set_id =
        map.containsKey('sticker_set_id') ? map['sticker_set_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'sticker_set_id': sticker_set_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleSupergroupSignMessages extends TdFunction {
  String get tlType => 'toggleSupergroupSignMessages';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? supergroup_id;
  Bool? sign_messages;

  ToggleSupergroupSignMessages({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    Bool? this.sign_messages,
  });

  ToggleSupergroupSignMessages.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    sign_messages =
        map.containsKey('sign_messages') ? map['sign_messages'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'sign_messages': sign_messages?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleSupergroupIsAllHistoryAvailable extends TdFunction {
  String get tlType => 'toggleSupergroupIsAllHistoryAvailable';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? supergroup_id;
  Bool? is_all_history_available;

  ToggleSupergroupIsAllHistoryAvailable({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    Bool? this.is_all_history_available,
  });

  ToggleSupergroupIsAllHistoryAvailable.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    is_all_history_available = map.containsKey('is_all_history_available')
        ? map['is_all_history_available']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'is_all_history_available':
          is_all_history_available?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ToggleSupergroupIsBroadcastGroup extends TdFunction {
  String get tlType => 'toggleSupergroupIsBroadcastGroup';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? supergroup_id;

  ToggleSupergroupIsBroadcastGroup({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
  });

  ToggleSupergroupIsBroadcastGroup.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReportSupergroupSpam extends TdFunction {
  String get tlType => 'reportSupergroupSpam';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? supergroup_id;
  vector<int53>? message_ids;

  ReportSupergroupSpam({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    vector<int53>? this.message_ids,
  });

  ReportSupergroupSpam.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    if (map.containsKey('message_ids') && map['message_ids'] != null) {
      message_ids = [];
      var someValues = map['message_ids'];
      for (var someValue in someValues) {
        message_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'message_ids': message_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSupergroupMembers extends TdFunction {
  String get tlType => 'getSupergroupMembers';

  Type get tdReturnType => ChatMembers;

  string? extra;
  int? client_id;
  int53? supergroup_id;
  SupergroupMembersFilter? filter;
  int32? offset;
  int32? limit;

  GetSupergroupMembers({
    string? this.extra,
    int? this.client_id,
    int53? this.supergroup_id,
    SupergroupMembersFilter? this.filter,
    int32? this.offset,
    int32? this.limit,
  });

  GetSupergroupMembers.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    supergroup_id =
        map.containsKey('supergroup_id') ? map['supergroup_id'] : null;
    filter = map.containsKey('filter')
        ? TlMap.fromMap(map['filter']) as SupergroupMembersFilter
        : null;
    offset = map.containsKey('offset') ? map['offset'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'supergroup_id': supergroup_id?.toMap(skipNulls: skipNulls),
      'filter': filter?.toMap(skipNulls: skipNulls),
      'offset': offset?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CloseSecretChat extends TdFunction {
  String get tlType => 'closeSecretChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? secret_chat_id;

  CloseSecretChat({
    string? this.extra,
    int? this.client_id,
    int32? this.secret_chat_id,
  });

  CloseSecretChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    secret_chat_id =
        map.containsKey('secret_chat_id') ? map['secret_chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'secret_chat_id': secret_chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatEventLog extends TdFunction {
  String get tlType => 'getChatEventLog';

  Type get tdReturnType => ChatEvents;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? query;
  int64? from_event_id;
  int32? limit;
  ChatEventLogFilters? filters;
  vector<int53>? user_ids;

  GetChatEventLog({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.query,
    int64? this.from_event_id,
    int32? this.limit,
    ChatEventLogFilters? this.filters,
    vector<int53>? this.user_ids,
  });

  GetChatEventLog.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    query = map.containsKey('query') ? map['query'] : null;
    from_event_id =
        map.containsKey('from_event_id') ? map['from_event_id'] : null;
    limit = map.containsKey('limit') ? map['limit'] : null;
    filters = map.containsKey('filters')
        ? TlMap.fromMap(map['filters']) as ChatEventLogFilters
        : null;
    if (map.containsKey('user_ids') && map['user_ids'] != null) {
      user_ids = [];
      var someValues = map['user_ids'];
      for (var someValue in someValues) {
        user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'query': query?.toMap(skipNulls: skipNulls),
      'from_event_id': from_event_id?.toMap(skipNulls: skipNulls),
      'limit': limit?.toMap(skipNulls: skipNulls),
      'filters': filters?.toMap(skipNulls: skipNulls),
      'user_ids': user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPaymentForm extends TdFunction {
  String get tlType => 'getPaymentForm';

  Type get tdReturnType => PaymentForm;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  PaymentFormTheme? theme;

  GetPaymentForm({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    PaymentFormTheme? this.theme,
  });

  GetPaymentForm.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    theme = map.containsKey('theme')
        ? TlMap.fromMap(map['theme']) as PaymentFormTheme
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'theme': theme?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ValidateOrderInfo extends TdFunction {
  String get tlType => 'validateOrderInfo';

  Type get tdReturnType => ValidatedOrderInfo;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  OrderInfo? order_info;
  Bool? allow_save;

  ValidateOrderInfo({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    OrderInfo? this.order_info,
    Bool? this.allow_save,
  });

  ValidateOrderInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    order_info = map.containsKey('order_info')
        ? TlMap.fromMap(map['order_info']) as OrderInfo
        : null;
    allow_save = map.containsKey('allow_save') ? map['allow_save'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'order_info': order_info?.toMap(skipNulls: skipNulls),
      'allow_save': allow_save?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendPaymentForm extends TdFunction {
  String get tlType => 'sendPaymentForm';

  Type get tdReturnType => PaymentResult;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  int64? payment_form_id;
  string? order_info_id;
  string? shipping_option_id;
  InputCredentials? credentials;
  int53? tip_amount;

  SendPaymentForm({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    int64? this.payment_form_id,
    string? this.order_info_id,
    string? this.shipping_option_id,
    InputCredentials? this.credentials,
    int53? this.tip_amount,
  });

  SendPaymentForm.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    payment_form_id =
        map.containsKey('payment_form_id') ? map['payment_form_id'] : null;
    order_info_id =
        map.containsKey('order_info_id') ? map['order_info_id'] : null;
    shipping_option_id = map.containsKey('shipping_option_id')
        ? map['shipping_option_id']
        : null;
    credentials = map.containsKey('credentials')
        ? TlMap.fromMap(map['credentials']) as InputCredentials
        : null;
    tip_amount = map.containsKey('tip_amount') ? map['tip_amount'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'payment_form_id': payment_form_id?.toMap(skipNulls: skipNulls),
      'order_info_id': order_info_id?.toMap(skipNulls: skipNulls),
      'shipping_option_id': shipping_option_id?.toMap(skipNulls: skipNulls),
      'credentials': credentials?.toMap(skipNulls: skipNulls),
      'tip_amount': tip_amount?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPaymentReceipt extends TdFunction {
  String get tlType => 'getPaymentReceipt';

  Type get tdReturnType => PaymentReceipt;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;

  GetPaymentReceipt({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
  });

  GetPaymentReceipt.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSavedOrderInfo extends TdFunction {
  String get tlType => 'getSavedOrderInfo';

  Type get tdReturnType => OrderInfo;

  string? extra;
  int? client_id;

  GetSavedOrderInfo({
    string? this.extra,
    int? this.client_id,
  });

  GetSavedOrderInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteSavedOrderInfo extends TdFunction {
  String get tlType => 'deleteSavedOrderInfo';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  DeleteSavedOrderInfo({
    string? this.extra,
    int? this.client_id,
  });

  DeleteSavedOrderInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteSavedCredentials extends TdFunction {
  String get tlType => 'deleteSavedCredentials';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  DeleteSavedCredentials({
    string? this.extra,
    int? this.client_id,
  });

  DeleteSavedCredentials.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSupportUser extends TdFunction {
  String get tlType => 'getSupportUser';

  Type get tdReturnType => User;

  string? extra;
  int? client_id;

  GetSupportUser({
    string? this.extra,
    int? this.client_id,
  });

  GetSupportUser.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetBackgrounds extends TdFunction {
  String get tlType => 'getBackgrounds';

  Type get tdReturnType => Backgrounds;

  string? extra;
  int? client_id;
  Bool? for_dark_theme;

  GetBackgrounds({
    string? this.extra,
    int? this.client_id,
    Bool? this.for_dark_theme,
  });

  GetBackgrounds.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    for_dark_theme =
        map.containsKey('for_dark_theme') ? map['for_dark_theme'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'for_dark_theme': for_dark_theme?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetBackgroundUrl extends TdFunction {
  String get tlType => 'getBackgroundUrl';

  Type get tdReturnType => HttpUrl;

  string? extra;
  int? client_id;
  string? name;
  BackgroundType? type;

  GetBackgroundUrl({
    string? this.extra,
    int? this.client_id,
    string? this.name,
    BackgroundType? this.type,
  });

  GetBackgroundUrl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as BackgroundType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SearchBackground extends TdFunction {
  String get tlType => 'searchBackground';

  Type get tdReturnType => Background;

  string? extra;
  int? client_id;
  string? name;

  SearchBackground({
    string? this.extra,
    int? this.client_id,
    string? this.name,
  });

  SearchBackground.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetBackground extends TdFunction {
  String get tlType => 'setBackground';

  Type get tdReturnType => Background;

  string? extra;
  int? client_id;
  InputBackground? background;
  BackgroundType? type;
  Bool? for_dark_theme;

  SetBackground({
    string? this.extra,
    int? this.client_id,
    InputBackground? this.background,
    BackgroundType? this.type,
    Bool? this.for_dark_theme,
  });

  SetBackground.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    background = map.containsKey('background')
        ? TlMap.fromMap(map['background']) as InputBackground
        : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as BackgroundType
        : null;
    for_dark_theme =
        map.containsKey('for_dark_theme') ? map['for_dark_theme'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'background': background?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'for_dark_theme': for_dark_theme?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveBackground extends TdFunction {
  String get tlType => 'removeBackground';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? background_id;

  RemoveBackground({
    string? this.extra,
    int? this.client_id,
    int64? this.background_id,
  });

  RemoveBackground.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    background_id =
        map.containsKey('background_id') ? map['background_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'background_id': background_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResetBackgrounds extends TdFunction {
  String get tlType => 'resetBackgrounds';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  ResetBackgrounds({
    string? this.extra,
    int? this.client_id,
  });

  ResetBackgrounds.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLocalizationTargetInfo extends TdFunction {
  String get tlType => 'getLocalizationTargetInfo';

  Type get tdReturnType => LocalizationTargetInfo;

  string? extra;
  int? client_id;
  Bool? only_local;

  GetLocalizationTargetInfo({
    string? this.extra,
    int? this.client_id,
    Bool? this.only_local,
  });

  GetLocalizationTargetInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    only_local = map.containsKey('only_local') ? map['only_local'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'only_local': only_local?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLanguagePackInfo extends TdFunction {
  String get tlType => 'getLanguagePackInfo';

  Type get tdReturnType => LanguagePackInfo;

  string? extra;
  int? client_id;
  string? language_pack_id;

  GetLanguagePackInfo({
    string? this.extra,
    int? this.client_id,
    string? this.language_pack_id,
  });

  GetLanguagePackInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLanguagePackStrings extends TdFunction {
  String get tlType => 'getLanguagePackStrings';

  Type get tdReturnType => LanguagePackStrings;

  string? extra;
  int? client_id;
  string? language_pack_id;
  vector<string>? keys;

  GetLanguagePackStrings({
    string? this.extra,
    int? this.client_id,
    string? this.language_pack_id,
    vector<string>? this.keys,
  });

  GetLanguagePackStrings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
    if (map.containsKey('keys') && map['keys'] != null) {
      keys = [];
      var someValues = map['keys'];
      for (var someValue in someValues) {
        keys?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
      'keys': keys?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SynchronizeLanguagePack extends TdFunction {
  String get tlType => 'synchronizeLanguagePack';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? language_pack_id;

  SynchronizeLanguagePack({
    string? this.extra,
    int? this.client_id,
    string? this.language_pack_id,
  });

  SynchronizeLanguagePack.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddCustomServerLanguagePack extends TdFunction {
  String get tlType => 'addCustomServerLanguagePack';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? language_pack_id;

  AddCustomServerLanguagePack({
    string? this.extra,
    int? this.client_id,
    string? this.language_pack_id,
  });

  AddCustomServerLanguagePack.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetCustomLanguagePack extends TdFunction {
  String get tlType => 'setCustomLanguagePack';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  LanguagePackInfo? info;
  vector<LanguagePackString>? strings;

  SetCustomLanguagePack({
    string? this.extra,
    int? this.client_id,
    LanguagePackInfo? this.info,
    vector<LanguagePackString>? this.strings,
  });

  SetCustomLanguagePack.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    info = map.containsKey('info')
        ? TlMap.fromMap(map['info']) as LanguagePackInfo
        : null;
    if (map.containsKey('strings') && map['strings'] != null) {
      strings = [];
      var someValues = map['strings'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as LanguagePackString;
        strings?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'info': info?.toMap(skipNulls: skipNulls),
      'strings': strings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditCustomLanguagePackInfo extends TdFunction {
  String get tlType => 'editCustomLanguagePackInfo';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  LanguagePackInfo? info;

  EditCustomLanguagePackInfo({
    string? this.extra,
    int? this.client_id,
    LanguagePackInfo? this.info,
  });

  EditCustomLanguagePackInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    info = map.containsKey('info')
        ? TlMap.fromMap(map['info']) as LanguagePackInfo
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'info': info?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetCustomLanguagePackString extends TdFunction {
  String get tlType => 'setCustomLanguagePackString';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? language_pack_id;
  LanguagePackString? new_string;

  SetCustomLanguagePackString({
    string? this.extra,
    int? this.client_id,
    string? this.language_pack_id,
    LanguagePackString? this.new_string,
  });

  SetCustomLanguagePackString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
    new_string = map.containsKey('new_string')
        ? TlMap.fromMap(map['new_string']) as LanguagePackString
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
      'new_string': new_string?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteLanguagePack extends TdFunction {
  String get tlType => 'deleteLanguagePack';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? language_pack_id;

  DeleteLanguagePack({
    string? this.extra,
    int? this.client_id,
    string? this.language_pack_id,
  });

  DeleteLanguagePack.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_pack_id =
        map.containsKey('language_pack_id') ? map['language_pack_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_pack_id': language_pack_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RegisterDevice extends TdFunction {
  String get tlType => 'registerDevice';

  Type get tdReturnType => PushReceiverId;

  string? extra;
  int? client_id;
  DeviceToken? device_token;
  vector<int53>? other_user_ids;

  RegisterDevice({
    string? this.extra,
    int? this.client_id,
    DeviceToken? this.device_token,
    vector<int53>? this.other_user_ids,
  });

  RegisterDevice.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    device_token = map.containsKey('device_token')
        ? TlMap.fromMap(map['device_token']) as DeviceToken
        : null;
    if (map.containsKey('other_user_ids') && map['other_user_ids'] != null) {
      other_user_ids = [];
      var someValues = map['other_user_ids'];
      for (var someValue in someValues) {
        other_user_ids?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'device_token': device_token?.toMap(skipNulls: skipNulls),
      'other_user_ids': other_user_ids?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ProcessPushNotification extends TdFunction {
  String get tlType => 'processPushNotification';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? payload;

  ProcessPushNotification({
    string? this.extra,
    int? this.client_id,
    string? this.payload,
  });

  ProcessPushNotification.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    payload = map.containsKey('payload') ? map['payload'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'payload': payload?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPushReceiverId extends TdFunction {
  String get tlType => 'getPushReceiverId';

  Type get tdReturnType => PushReceiverId;

  string? extra;
  int? client_id;
  string? payload;

  GetPushReceiverId({
    string? this.extra,
    int? this.client_id,
    string? this.payload,
  });

  GetPushReceiverId.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    payload = map.containsKey('payload') ? map['payload'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'payload': payload?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetRecentlyVisitedTMeUrls extends TdFunction {
  String get tlType => 'getRecentlyVisitedTMeUrls';

  Type get tdReturnType => TMeUrls;

  string? extra;
  int? client_id;
  string? referrer;

  GetRecentlyVisitedTMeUrls({
    string? this.extra,
    int? this.client_id,
    string? this.referrer,
  });

  GetRecentlyVisitedTMeUrls.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    referrer = map.containsKey('referrer') ? map['referrer'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'referrer': referrer?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetUserPrivacySettingRules extends TdFunction {
  String get tlType => 'setUserPrivacySettingRules';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  UserPrivacySetting? setting;
  UserPrivacySettingRules? rules;

  SetUserPrivacySettingRules({
    string? this.extra,
    int? this.client_id,
    UserPrivacySetting? this.setting,
    UserPrivacySettingRules? this.rules,
  });

  SetUserPrivacySettingRules.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    setting = map.containsKey('setting')
        ? TlMap.fromMap(map['setting']) as UserPrivacySetting
        : null;
    rules = map.containsKey('rules')
        ? TlMap.fromMap(map['rules']) as UserPrivacySettingRules
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'setting': setting?.toMap(skipNulls: skipNulls),
      'rules': rules?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetUserPrivacySettingRules extends TdFunction {
  String get tlType => 'getUserPrivacySettingRules';

  Type get tdReturnType => UserPrivacySettingRules;

  string? extra;
  int? client_id;
  UserPrivacySetting? setting;

  GetUserPrivacySettingRules({
    string? this.extra,
    int? this.client_id,
    UserPrivacySetting? this.setting,
  });

  GetUserPrivacySettingRules.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    setting = map.containsKey('setting')
        ? TlMap.fromMap(map['setting']) as UserPrivacySetting
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'setting': setting?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetOption extends TdFunction {
  String get tlType => 'getOption';

  Type get tdReturnType => OptionValue;

  string? extra;
  int? client_id;
  string? name;

  GetOption({
    string? this.extra,
    int? this.client_id,
    string? this.name,
  });

  GetOption.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetOption extends TdFunction {
  String get tlType => 'setOption';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? name;
  OptionValue? value;

  SetOption({
    string? this.extra,
    int? this.client_id,
    string? this.name,
    OptionValue? this.value,
  });

  SetOption.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    value = map.containsKey('value')
        ? TlMap.fromMap(map['value']) as OptionValue
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'value': value?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetAccountTtl extends TdFunction {
  String get tlType => 'setAccountTtl';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  AccountTtl? ttl;

  SetAccountTtl({
    string? this.extra,
    int? this.client_id,
    AccountTtl? this.ttl,
  });

  SetAccountTtl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    ttl =
        map.containsKey('ttl') ? TlMap.fromMap(map['ttl']) as AccountTtl : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'ttl': ttl?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetAccountTtl extends TdFunction {
  String get tlType => 'getAccountTtl';

  Type get tdReturnType => AccountTtl;

  string? extra;
  int? client_id;

  GetAccountTtl({
    string? this.extra,
    int? this.client_id,
  });

  GetAccountTtl.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeleteAccount extends TdFunction {
  String get tlType => 'deleteAccount';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? reason;

  DeleteAccount({
    string? this.extra,
    int? this.client_id,
    string? this.reason,
  });

  DeleteAccount.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    reason = map.containsKey('reason') ? map['reason'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'reason': reason?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveChatActionBar extends TdFunction {
  String get tlType => 'removeChatActionBar';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;

  RemoveChatActionBar({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
  });

  RemoveChatActionBar.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReportChat extends TdFunction {
  String get tlType => 'reportChat';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  vector<int53>? message_ids;
  ChatReportReason? reason;
  string? text;

  ReportChat({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    vector<int53>? this.message_ids,
    ChatReportReason? this.reason,
    string? this.text,
  });

  ReportChat.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    if (map.containsKey('message_ids') && map['message_ids'] != null) {
      message_ids = [];
      var someValues = map['message_ids'];
      for (var someValue in someValues) {
        message_ids?.add(someValue);
      }
    }
    reason = map.containsKey('reason')
        ? TlMap.fromMap(map['reason']) as ChatReportReason
        : null;
    text = map.containsKey('text') ? map['text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_ids': message_ids?.toMap(skipNulls: skipNulls),
      'reason': reason?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ReportChatPhoto extends TdFunction {
  String get tlType => 'reportChatPhoto';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? chat_id;
  int32? file_id;
  ChatReportReason? reason;
  string? text;

  ReportChatPhoto({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int32? this.file_id,
    ChatReportReason? this.reason,
    string? this.text,
  });

  ReportChatPhoto.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    file_id = map.containsKey('file_id') ? map['file_id'] : null;
    reason = map.containsKey('reason')
        ? TlMap.fromMap(map['reason']) as ChatReportReason
        : null;
    text = map.containsKey('text') ? map['text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'file_id': file_id?.toMap(skipNulls: skipNulls),
      'reason': reason?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetChatStatistics extends TdFunction {
  String get tlType => 'getChatStatistics';

  Type get tdReturnType => ChatStatistics;

  string? extra;
  int? client_id;
  int53? chat_id;
  Bool? is_dark;

  GetChatStatistics({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    Bool? this.is_dark,
  });

  GetChatStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    is_dark = map.containsKey('is_dark') ? map['is_dark'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'is_dark': is_dark?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMessageStatistics extends TdFunction {
  String get tlType => 'getMessageStatistics';

  Type get tdReturnType => MessageStatistics;

  string? extra;
  int? client_id;
  int53? chat_id;
  int53? message_id;
  Bool? is_dark;

  GetMessageStatistics({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    int53? this.message_id,
    Bool? this.is_dark,
  });

  GetMessageStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    message_id = map.containsKey('message_id') ? map['message_id'] : null;
    is_dark = map.containsKey('is_dark') ? map['is_dark'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'message_id': message_id?.toMap(skipNulls: skipNulls),
      'is_dark': is_dark?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetStatisticalGraph extends TdFunction {
  String get tlType => 'getStatisticalGraph';

  Type get tdReturnType => StatisticalGraph;

  string? extra;
  int? client_id;
  int53? chat_id;
  string? token;
  int53? x;

  GetStatisticalGraph({
    string? this.extra,
    int? this.client_id,
    int53? this.chat_id,
    string? this.token,
    int53? this.x,
  });

  GetStatisticalGraph.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    token = map.containsKey('token') ? map['token'] : null;
    x = map.containsKey('x') ? map['x'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'token': token?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetStorageStatistics extends TdFunction {
  String get tlType => 'getStorageStatistics';

  Type get tdReturnType => StorageStatistics;

  string? extra;
  int? client_id;
  int32? chat_limit;

  GetStorageStatistics({
    string? this.extra,
    int? this.client_id,
    int32? this.chat_limit,
  });

  GetStorageStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    chat_limit = map.containsKey('chat_limit') ? map['chat_limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'chat_limit': chat_limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetStorageStatisticsFast extends TdFunction {
  String get tlType => 'getStorageStatisticsFast';

  Type get tdReturnType => StorageStatisticsFast;

  string? extra;
  int? client_id;

  GetStorageStatisticsFast({
    string? this.extra,
    int? this.client_id,
  });

  GetStorageStatisticsFast.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetDatabaseStatistics extends TdFunction {
  String get tlType => 'getDatabaseStatistics';

  Type get tdReturnType => DatabaseStatistics;

  string? extra;
  int? client_id;

  GetDatabaseStatistics({
    string? this.extra,
    int? this.client_id,
  });

  GetDatabaseStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class OptimizeStorage extends TdFunction {
  String get tlType => 'optimizeStorage';

  Type get tdReturnType => StorageStatistics;

  string? extra;
  int? client_id;
  int53? size;
  int32? ttl;
  int32? count;
  int32? immunity_delay;
  vector<FileType>? file_types;
  vector<int53>? chat_ids;
  vector<int53>? exclude_chat_ids;
  Bool? return_deleted_file_statistics;
  int32? chat_limit;

  OptimizeStorage({
    string? this.extra,
    int? this.client_id,
    int53? this.size,
    int32? this.ttl,
    int32? this.count,
    int32? this.immunity_delay,
    vector<FileType>? this.file_types,
    vector<int53>? this.chat_ids,
    vector<int53>? this.exclude_chat_ids,
    Bool? this.return_deleted_file_statistics,
    int32? this.chat_limit,
  });

  OptimizeStorage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    size = map.containsKey('size') ? map['size'] : null;
    ttl = map.containsKey('ttl') ? map['ttl'] : null;
    count = map.containsKey('count') ? map['count'] : null;
    immunity_delay =
        map.containsKey('immunity_delay') ? map['immunity_delay'] : null;
    if (map.containsKey('file_types') && map['file_types'] != null) {
      file_types = [];
      var someValues = map['file_types'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as FileType;
        file_types?.add(obj);
      }
    }
    if (map.containsKey('chat_ids') && map['chat_ids'] != null) {
      chat_ids = [];
      var someValues = map['chat_ids'];
      for (var someValue in someValues) {
        chat_ids?.add(someValue);
      }
    }
    if (map.containsKey('exclude_chat_ids') &&
        map['exclude_chat_ids'] != null) {
      exclude_chat_ids = [];
      var someValues = map['exclude_chat_ids'];
      for (var someValue in someValues) {
        exclude_chat_ids?.add(someValue);
      }
    }
    return_deleted_file_statistics =
        map.containsKey('return_deleted_file_statistics')
            ? map['return_deleted_file_statistics']
            : null;
    chat_limit = map.containsKey('chat_limit') ? map['chat_limit'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'size': size?.toMap(skipNulls: skipNulls),
      'ttl': ttl?.toMap(skipNulls: skipNulls),
      'count': count?.toMap(skipNulls: skipNulls),
      'immunity_delay': immunity_delay?.toMap(skipNulls: skipNulls),
      'file_types': file_types?.toMap(skipNulls: skipNulls),
      'chat_ids': chat_ids?.toMap(skipNulls: skipNulls),
      'exclude_chat_ids': exclude_chat_ids?.toMap(skipNulls: skipNulls),
      'return_deleted_file_statistics':
          return_deleted_file_statistics?.toMap(skipNulls: skipNulls),
      'chat_limit': chat_limit?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetNetworkType extends TdFunction {
  String get tlType => 'setNetworkType';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  NetworkType? type;

  SetNetworkType({
    string? this.extra,
    int? this.client_id,
    NetworkType? this.type,
  });

  SetNetworkType.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as NetworkType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetNetworkStatistics extends TdFunction {
  String get tlType => 'getNetworkStatistics';

  Type get tdReturnType => NetworkStatistics;

  string? extra;
  int? client_id;
  Bool? only_current;

  GetNetworkStatistics({
    string? this.extra,
    int? this.client_id,
    Bool? this.only_current,
  });

  GetNetworkStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    only_current = map.containsKey('only_current') ? map['only_current'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'only_current': only_current?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddNetworkStatistics extends TdFunction {
  String get tlType => 'addNetworkStatistics';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  NetworkStatisticsEntry? entry;

  AddNetworkStatistics({
    string? this.extra,
    int? this.client_id,
    NetworkStatisticsEntry? this.entry,
  });

  AddNetworkStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    entry = map.containsKey('entry')
        ? TlMap.fromMap(map['entry']) as NetworkStatisticsEntry
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'entry': entry?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResetNetworkStatistics extends TdFunction {
  String get tlType => 'resetNetworkStatistics';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  ResetNetworkStatistics({
    string? this.extra,
    int? this.client_id,
  });

  ResetNetworkStatistics.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetAutoDownloadSettingsPresets extends TdFunction {
  String get tlType => 'getAutoDownloadSettingsPresets';

  Type get tdReturnType => AutoDownloadSettingsPresets;

  string? extra;
  int? client_id;

  GetAutoDownloadSettingsPresets({
    string? this.extra,
    int? this.client_id,
  });

  GetAutoDownloadSettingsPresets.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetAutoDownloadSettings extends TdFunction {
  String get tlType => 'setAutoDownloadSettings';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  AutoDownloadSettings? settings;
  NetworkType? type;

  SetAutoDownloadSettings({
    string? this.extra,
    int? this.client_id,
    AutoDownloadSettings? this.settings,
    NetworkType? this.type,
  });

  SetAutoDownloadSettings.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    settings = map.containsKey('settings')
        ? TlMap.fromMap(map['settings']) as AutoDownloadSettings
        : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as NetworkType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'settings': settings?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetBankCardInfo extends TdFunction {
  String get tlType => 'getBankCardInfo';

  Type get tdReturnType => BankCardInfo;

  string? extra;
  int? client_id;
  string? bank_card_number;

  GetBankCardInfo({
    string? this.extra,
    int? this.client_id,
    string? this.bank_card_number,
  });

  GetBankCardInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bank_card_number =
        map.containsKey('bank_card_number') ? map['bank_card_number'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bank_card_number': bank_card_number?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPassportElement extends TdFunction {
  String get tlType => 'getPassportElement';

  Type get tdReturnType => PassportElement;

  string? extra;
  int? client_id;
  PassportElementType? type;
  string? password;

  GetPassportElement({
    string? this.extra,
    int? this.client_id,
    PassportElementType? this.type,
    string? this.password,
  });

  GetPassportElement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as PassportElementType
        : null;
    password = map.containsKey('password') ? map['password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetAllPassportElements extends TdFunction {
  String get tlType => 'getAllPassportElements';

  Type get tdReturnType => PassportElements;

  string? extra;
  int? client_id;
  string? password;

  GetAllPassportElements({
    string? this.extra,
    int? this.client_id,
    string? this.password,
  });

  GetAllPassportElements.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    password = map.containsKey('password') ? map['password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetPassportElement extends TdFunction {
  String get tlType => 'setPassportElement';

  Type get tdReturnType => PassportElement;

  string? extra;
  int? client_id;
  InputPassportElement? element;
  string? password;

  SetPassportElement({
    string? this.extra,
    int? this.client_id,
    InputPassportElement? this.element,
    string? this.password,
  });

  SetPassportElement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    element = map.containsKey('element')
        ? TlMap.fromMap(map['element']) as InputPassportElement
        : null;
    password = map.containsKey('password') ? map['password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'element': element?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DeletePassportElement extends TdFunction {
  String get tlType => 'deletePassportElement';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  PassportElementType? type;

  DeletePassportElement({
    string? this.extra,
    int? this.client_id,
    PassportElementType? this.type,
  });

  DeletePassportElement.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as PassportElementType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetPassportElementErrors extends TdFunction {
  String get tlType => 'setPassportElementErrors';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int53? user_id;
  vector<InputPassportElementError>? errors;

  SetPassportElementErrors({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    vector<InputPassportElementError>? this.errors,
  });

  SetPassportElementErrors.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    if (map.containsKey('errors') && map['errors'] != null) {
      errors = [];
      var someValues = map['errors'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InputPassportElementError;
        errors?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'errors': errors?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPreferredCountryLanguage extends TdFunction {
  String get tlType => 'getPreferredCountryLanguage';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  string? country_code;

  GetPreferredCountryLanguage({
    string? this.extra,
    int? this.client_id,
    string? this.country_code,
  });

  GetPreferredCountryLanguage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    country_code = map.containsKey('country_code') ? map['country_code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'country_code': country_code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendPhoneNumberVerificationCode extends TdFunction {
  String get tlType => 'sendPhoneNumberVerificationCode';

  Type get tdReturnType => AuthenticationCodeInfo;

  string? extra;
  int? client_id;
  string? phone_number;
  PhoneNumberAuthenticationSettings? settings;

  SendPhoneNumberVerificationCode({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number,
    PhoneNumberAuthenticationSettings? this.settings,
  });

  SendPhoneNumberVerificationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
    settings = map.containsKey('settings')
        ? TlMap.fromMap(map['settings']) as PhoneNumberAuthenticationSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
      'settings': settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResendPhoneNumberVerificationCode extends TdFunction {
  String get tlType => 'resendPhoneNumberVerificationCode';

  Type get tdReturnType => AuthenticationCodeInfo;

  string? extra;
  int? client_id;

  ResendPhoneNumberVerificationCode({
    string? this.extra,
    int? this.client_id,
  });

  ResendPhoneNumberVerificationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckPhoneNumberVerificationCode extends TdFunction {
  String get tlType => 'checkPhoneNumberVerificationCode';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? code;

  CheckPhoneNumberVerificationCode({
    string? this.extra,
    int? this.client_id,
    string? this.code,
  });

  CheckPhoneNumberVerificationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code = map.containsKey('code') ? map['code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code': code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendEmailAddressVerificationCode extends TdFunction {
  String get tlType => 'sendEmailAddressVerificationCode';

  Type get tdReturnType => EmailAddressAuthenticationCodeInfo;

  string? extra;
  int? client_id;
  string? email_address;

  SendEmailAddressVerificationCode({
    string? this.extra,
    int? this.client_id,
    string? this.email_address,
  });

  SendEmailAddressVerificationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    email_address =
        map.containsKey('email_address') ? map['email_address'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'email_address': email_address?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResendEmailAddressVerificationCode extends TdFunction {
  String get tlType => 'resendEmailAddressVerificationCode';

  Type get tdReturnType => EmailAddressAuthenticationCodeInfo;

  string? extra;
  int? client_id;

  ResendEmailAddressVerificationCode({
    string? this.extra,
    int? this.client_id,
  });

  ResendEmailAddressVerificationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckEmailAddressVerificationCode extends TdFunction {
  String get tlType => 'checkEmailAddressVerificationCode';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? code;

  CheckEmailAddressVerificationCode({
    string? this.extra,
    int? this.client_id,
    string? this.code,
  });

  CheckEmailAddressVerificationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code = map.containsKey('code') ? map['code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code': code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPassportAuthorizationForm extends TdFunction {
  String get tlType => 'getPassportAuthorizationForm';

  Type get tdReturnType => PassportAuthorizationForm;

  string? extra;
  int? client_id;
  int53? bot_user_id;
  string? scope;
  string? public_key;
  string? nonce;

  GetPassportAuthorizationForm({
    string? this.extra,
    int? this.client_id,
    int53? this.bot_user_id,
    string? this.scope,
    string? this.public_key,
    string? this.nonce,
  });

  GetPassportAuthorizationForm.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    bot_user_id = map.containsKey('bot_user_id') ? map['bot_user_id'] : null;
    scope = map.containsKey('scope') ? map['scope'] : null;
    public_key = map.containsKey('public_key') ? map['public_key'] : null;
    nonce = map.containsKey('nonce') ? map['nonce'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'bot_user_id': bot_user_id?.toMap(skipNulls: skipNulls),
      'scope': scope?.toMap(skipNulls: skipNulls),
      'public_key': public_key?.toMap(skipNulls: skipNulls),
      'nonce': nonce?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPassportAuthorizationFormAvailableElements extends TdFunction {
  String get tlType => 'getPassportAuthorizationFormAvailableElements';

  Type get tdReturnType => PassportElementsWithErrors;

  string? extra;
  int? client_id;
  int32? autorization_form_id;
  string? password;

  GetPassportAuthorizationFormAvailableElements({
    string? this.extra,
    int? this.client_id,
    int32? this.autorization_form_id,
    string? this.password,
  });

  GetPassportAuthorizationFormAvailableElements.fromMap(
      Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    autorization_form_id = map.containsKey('autorization_form_id')
        ? map['autorization_form_id']
        : null;
    password = map.containsKey('password') ? map['password'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'autorization_form_id': autorization_form_id?.toMap(skipNulls: skipNulls),
      'password': password?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendPassportAuthorizationForm extends TdFunction {
  String get tlType => 'sendPassportAuthorizationForm';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? autorization_form_id;
  vector<PassportElementType>? types;

  SendPassportAuthorizationForm({
    string? this.extra,
    int? this.client_id,
    int32? this.autorization_form_id,
    vector<PassportElementType>? this.types,
  });

  SendPassportAuthorizationForm.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    autorization_form_id = map.containsKey('autorization_form_id')
        ? map['autorization_form_id']
        : null;
    if (map.containsKey('types') && map['types'] != null) {
      types = [];
      var someValues = map['types'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as PassportElementType;
        types?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'autorization_form_id': autorization_form_id?.toMap(skipNulls: skipNulls),
      'types': types?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendPhoneNumberConfirmationCode extends TdFunction {
  String get tlType => 'sendPhoneNumberConfirmationCode';

  Type get tdReturnType => AuthenticationCodeInfo;

  string? extra;
  int? client_id;
  string? hash;
  string? phone_number;
  PhoneNumberAuthenticationSettings? settings;

  SendPhoneNumberConfirmationCode({
    string? this.extra,
    int? this.client_id,
    string? this.hash,
    string? this.phone_number,
    PhoneNumberAuthenticationSettings? this.settings,
  });

  SendPhoneNumberConfirmationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    hash = map.containsKey('hash') ? map['hash'] : null;
    phone_number = map.containsKey('phone_number') ? map['phone_number'] : null;
    settings = map.containsKey('settings')
        ? TlMap.fromMap(map['settings']) as PhoneNumberAuthenticationSettings
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'hash': hash?.toMap(skipNulls: skipNulls),
      'phone_number': phone_number?.toMap(skipNulls: skipNulls),
      'settings': settings?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class ResendPhoneNumberConfirmationCode extends TdFunction {
  String get tlType => 'resendPhoneNumberConfirmationCode';

  Type get tdReturnType => AuthenticationCodeInfo;

  string? extra;
  int? client_id;

  ResendPhoneNumberConfirmationCode({
    string? this.extra,
    int? this.client_id,
  });

  ResendPhoneNumberConfirmationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckPhoneNumberConfirmationCode extends TdFunction {
  String get tlType => 'checkPhoneNumberConfirmationCode';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? code;

  CheckPhoneNumberConfirmationCode({
    string? this.extra,
    int? this.client_id,
    string? this.code,
  });

  CheckPhoneNumberConfirmationCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    code = map.containsKey('code') ? map['code'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'code': code?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetBotUpdatesStatus extends TdFunction {
  String get tlType => 'setBotUpdatesStatus';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? pending_update_count;
  string? error_message;

  SetBotUpdatesStatus({
    string? this.extra,
    int? this.client_id,
    int32? this.pending_update_count,
    string? this.error_message,
  });

  SetBotUpdatesStatus.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    pending_update_count = map.containsKey('pending_update_count')
        ? map['pending_update_count']
        : null;
    error_message =
        map.containsKey('error_message') ? map['error_message'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'pending_update_count': pending_update_count?.toMap(skipNulls: skipNulls),
      'error_message': error_message?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class UploadStickerFile extends TdFunction {
  String get tlType => 'uploadStickerFile';

  Type get tdReturnType => File;

  string? extra;
  int? client_id;
  int53? user_id;
  InputSticker? sticker;

  UploadStickerFile({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    InputSticker? this.sticker,
  });

  UploadStickerFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputSticker
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetSuggestedStickerSetName extends TdFunction {
  String get tlType => 'getSuggestedStickerSetName';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;
  string? title;

  GetSuggestedStickerSetName({
    string? this.extra,
    int? this.client_id,
    string? this.title,
  });

  GetSuggestedStickerSetName.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CheckStickerSetName extends TdFunction {
  String get tlType => 'checkStickerSetName';

  Type get tdReturnType => CheckStickerSetNameResult;

  string? extra;
  int? client_id;
  string? name;

  CheckStickerSetName({
    string? this.extra,
    int? this.client_id,
    string? this.name,
  });

  CheckStickerSetName.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class CreateNewStickerSet extends TdFunction {
  String get tlType => 'createNewStickerSet';

  Type get tdReturnType => StickerSet;

  string? extra;
  int? client_id;
  int53? user_id;
  string? title;
  string? name;
  Bool? is_masks;
  vector<InputSticker>? stickers;
  string? source;

  CreateNewStickerSet({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    string? this.title,
    string? this.name,
    Bool? this.is_masks,
    vector<InputSticker>? this.stickers,
    string? this.source,
  });

  CreateNewStickerSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    title = map.containsKey('title') ? map['title'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    is_masks = map.containsKey('is_masks') ? map['is_masks'] : null;
    if (map.containsKey('stickers') && map['stickers'] != null) {
      stickers = [];
      var someValues = map['stickers'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as InputSticker;
        stickers?.add(obj);
      }
    }
    source = map.containsKey('source') ? map['source'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'title': title?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'is_masks': is_masks?.toMap(skipNulls: skipNulls),
      'stickers': stickers?.toMap(skipNulls: skipNulls),
      'source': source?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddStickerToSet extends TdFunction {
  String get tlType => 'addStickerToSet';

  Type get tdReturnType => StickerSet;

  string? extra;
  int? client_id;
  int53? user_id;
  string? name;
  InputSticker? sticker;

  AddStickerToSet({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    string? this.name,
    InputSticker? this.sticker,
  });

  AddStickerToSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputSticker
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetStickerSetThumbnail extends TdFunction {
  String get tlType => 'setStickerSetThumbnail';

  Type get tdReturnType => StickerSet;

  string? extra;
  int? client_id;
  int53? user_id;
  string? name;
  InputFile? thumbnail;

  SetStickerSetThumbnail({
    string? this.extra,
    int? this.client_id,
    int53? this.user_id,
    string? this.name,
    InputFile? this.thumbnail,
  });

  SetStickerSetThumbnail.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    user_id = map.containsKey('user_id') ? map['user_id'] : null;
    name = map.containsKey('name') ? map['name'] : null;
    thumbnail = map.containsKey('thumbnail')
        ? TlMap.fromMap(map['thumbnail']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'user_id': user_id?.toMap(skipNulls: skipNulls),
      'name': name?.toMap(skipNulls: skipNulls),
      'thumbnail': thumbnail?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetStickerPositionInSet extends TdFunction {
  String get tlType => 'setStickerPositionInSet';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  InputFile? sticker;
  int32? position;

  SetStickerPositionInSet({
    string? this.extra,
    int? this.client_id,
    InputFile? this.sticker,
    int32? this.position,
  });

  SetStickerPositionInSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
    position = map.containsKey('position') ? map['position'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
      'position': position?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveStickerFromSet extends TdFunction {
  String get tlType => 'removeStickerFromSet';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  InputFile? sticker;

  RemoveStickerFromSet({
    string? this.extra,
    int? this.client_id,
    InputFile? this.sticker,
  });

  RemoveStickerFromSet.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    sticker = map.containsKey('sticker')
        ? TlMap.fromMap(map['sticker']) as InputFile
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'sticker': sticker?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetMapThumbnailFile extends TdFunction {
  String get tlType => 'getMapThumbnailFile';

  Type get tdReturnType => File;

  string? extra;
  int? client_id;
  Location? location;
  int32? zoom;
  int32? width;
  int32? height;
  int32? scale;
  int53? chat_id;

  GetMapThumbnailFile({
    string? this.extra,
    int? this.client_id,
    Location? this.location,
    int32? this.zoom,
    int32? this.width,
    int32? this.height,
    int32? this.scale,
    int53? this.chat_id,
  });

  GetMapThumbnailFile.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    location = map.containsKey('location')
        ? TlMap.fromMap(map['location']) as Location
        : null;
    zoom = map.containsKey('zoom') ? map['zoom'] : null;
    width = map.containsKey('width') ? map['width'] : null;
    height = map.containsKey('height') ? map['height'] : null;
    scale = map.containsKey('scale') ? map['scale'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'location': location?.toMap(skipNulls: skipNulls),
      'zoom': zoom?.toMap(skipNulls: skipNulls),
      'width': width?.toMap(skipNulls: skipNulls),
      'height': height?.toMap(skipNulls: skipNulls),
      'scale': scale?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AcceptTermsOfService extends TdFunction {
  String get tlType => 'acceptTermsOfService';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? terms_of_service_id;

  AcceptTermsOfService({
    string? this.extra,
    int? this.client_id,
    string? this.terms_of_service_id,
  });

  AcceptTermsOfService.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    terms_of_service_id = map.containsKey('terms_of_service_id')
        ? map['terms_of_service_id']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'terms_of_service_id': terms_of_service_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SendCustomRequest extends TdFunction {
  String get tlType => 'sendCustomRequest';

  Type get tdReturnType => CustomRequestResult;

  string? extra;
  int? client_id;
  string? method;
  string? parameters;

  SendCustomRequest({
    string? this.extra,
    int? this.client_id,
    string? this.method,
    string? this.parameters,
  });

  SendCustomRequest.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    method = map.containsKey('method') ? map['method'] : null;
    parameters = map.containsKey('parameters') ? map['parameters'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'method': method?.toMap(skipNulls: skipNulls),
      'parameters': parameters?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AnswerCustomQuery extends TdFunction {
  String get tlType => 'answerCustomQuery';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int64? custom_query_id;
  string? data;

  AnswerCustomQuery({
    string? this.extra,
    int? this.client_id,
    int64? this.custom_query_id,
    string? this.data,
  });

  AnswerCustomQuery.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    custom_query_id =
        map.containsKey('custom_query_id') ? map['custom_query_id'] : null;
    data = map.containsKey('data') ? map['data'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'custom_query_id': custom_query_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetAlarm extends TdFunction {
  String get tlType => 'setAlarm';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  double? seconds;

  SetAlarm({
    string? this.extra,
    int? this.client_id,
    double? this.seconds,
  });

  SetAlarm.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    seconds = map.containsKey('seconds') ? map['seconds'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'seconds': seconds?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetCountries extends TdFunction {
  String get tlType => 'getCountries';

  Type get tdReturnType => Countries;

  string? extra;
  int? client_id;

  GetCountries({
    string? this.extra,
    int? this.client_id,
  });

  GetCountries.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetCountryCode extends TdFunction {
  String get tlType => 'getCountryCode';

  Type get tdReturnType => Text;

  string? extra;
  int? client_id;

  GetCountryCode({
    string? this.extra,
    int? this.client_id,
  });

  GetCountryCode.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPhoneNumberInfo extends TdFunction {
  String get tlType => 'getPhoneNumberInfo';

  Type get tdReturnType => PhoneNumberInfo;

  string? extra;
  int? client_id;
  string? phone_number_prefix;

  GetPhoneNumberInfo({
    string? this.extra,
    int? this.client_id,
    string? this.phone_number_prefix,
  });

  GetPhoneNumberInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    phone_number_prefix = map.containsKey('phone_number_prefix')
        ? map['phone_number_prefix']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'phone_number_prefix': phone_number_prefix?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetPhoneNumberInfoSync extends TdFunction {
  String get tlType => 'getPhoneNumberInfoSync';

  Type get tdReturnType => PhoneNumberInfo;

  string? extra;
  int? client_id;
  string? language_code;
  string? phone_number_prefix;

  GetPhoneNumberInfoSync({
    string? this.extra,
    int? this.client_id,
    string? this.language_code,
    string? this.phone_number_prefix,
  });

  GetPhoneNumberInfoSync.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    language_code =
        map.containsKey('language_code') ? map['language_code'] : null;
    phone_number_prefix = map.containsKey('phone_number_prefix')
        ? map['phone_number_prefix']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'language_code': language_code?.toMap(skipNulls: skipNulls),
      'phone_number_prefix': phone_number_prefix?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetApplicationDownloadLink extends TdFunction {
  String get tlType => 'getApplicationDownloadLink';

  Type get tdReturnType => HttpUrl;

  string? extra;
  int? client_id;

  GetApplicationDownloadLink({
    string? this.extra,
    int? this.client_id,
  });

  GetApplicationDownloadLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetDeepLinkInfo extends TdFunction {
  String get tlType => 'getDeepLinkInfo';

  Type get tdReturnType => DeepLinkInfo;

  string? extra;
  int? client_id;
  string? link;

  GetDeepLinkInfo({
    string? this.extra,
    int? this.client_id,
    string? this.link,
  });

  GetDeepLinkInfo.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    link = map.containsKey('link') ? map['link'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'link': link?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetApplicationConfig extends TdFunction {
  String get tlType => 'getApplicationConfig';

  Type get tdReturnType => JsonValue;

  string? extra;
  int? client_id;

  GetApplicationConfig({
    string? this.extra,
    int? this.client_id,
  });

  GetApplicationConfig.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SaveApplicationLogEvent extends TdFunction {
  String get tlType => 'saveApplicationLogEvent';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? type;
  int53? chat_id;
  JsonValue? data;

  SaveApplicationLogEvent({
    string? this.extra,
    int? this.client_id,
    string? this.type,
    int53? this.chat_id,
    JsonValue? this.data,
  });

  SaveApplicationLogEvent.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    type = map.containsKey('type') ? map['type'] : null;
    chat_id = map.containsKey('chat_id') ? map['chat_id'] : null;
    data = map.containsKey('data')
        ? TlMap.fromMap(map['data']) as JsonValue
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'chat_id': chat_id?.toMap(skipNulls: skipNulls),
      'data': data?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddProxy extends TdFunction {
  String get tlType => 'addProxy';

  Type get tdReturnType => Proxy;

  string? extra;
  int? client_id;
  string? server;
  int32? port;
  Bool? enable;
  ProxyType? type;

  AddProxy({
    string? this.extra,
    int? this.client_id,
    string? this.server,
    int32? this.port,
    Bool? this.enable,
    ProxyType? this.type,
  });

  AddProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    server = map.containsKey('server') ? map['server'] : null;
    port = map.containsKey('port') ? map['port'] : null;
    enable = map.containsKey('enable') ? map['enable'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as ProxyType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'server': server?.toMap(skipNulls: skipNulls),
      'port': port?.toMap(skipNulls: skipNulls),
      'enable': enable?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EditProxy extends TdFunction {
  String get tlType => 'editProxy';

  Type get tdReturnType => Proxy;

  string? extra;
  int? client_id;
  int32? proxy_id;
  string? server;
  int32? port;
  Bool? enable;
  ProxyType? type;

  EditProxy({
    string? this.extra,
    int? this.client_id,
    int32? this.proxy_id,
    string? this.server,
    int32? this.port,
    Bool? this.enable,
    ProxyType? this.type,
  });

  EditProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    proxy_id = map.containsKey('proxy_id') ? map['proxy_id'] : null;
    server = map.containsKey('server') ? map['server'] : null;
    port = map.containsKey('port') ? map['port'] : null;
    enable = map.containsKey('enable') ? map['enable'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as ProxyType
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'proxy_id': proxy_id?.toMap(skipNulls: skipNulls),
      'server': server?.toMap(skipNulls: skipNulls),
      'port': port?.toMap(skipNulls: skipNulls),
      'enable': enable?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class EnableProxy extends TdFunction {
  String get tlType => 'enableProxy';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? proxy_id;

  EnableProxy({
    string? this.extra,
    int? this.client_id,
    int32? this.proxy_id,
  });

  EnableProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    proxy_id = map.containsKey('proxy_id') ? map['proxy_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'proxy_id': proxy_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class DisableProxy extends TdFunction {
  String get tlType => 'disableProxy';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  DisableProxy({
    string? this.extra,
    int? this.client_id,
  });

  DisableProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class RemoveProxy extends TdFunction {
  String get tlType => 'removeProxy';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? proxy_id;

  RemoveProxy({
    string? this.extra,
    int? this.client_id,
    int32? this.proxy_id,
  });

  RemoveProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    proxy_id = map.containsKey('proxy_id') ? map['proxy_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'proxy_id': proxy_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetProxies extends TdFunction {
  String get tlType => 'getProxies';

  Type get tdReturnType => Proxies;

  string? extra;
  int? client_id;

  GetProxies({
    string? this.extra,
    int? this.client_id,
  });

  GetProxies.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetProxyLink extends TdFunction {
  String get tlType => 'getProxyLink';

  Type get tdReturnType => HttpUrl;

  string? extra;
  int? client_id;
  int32? proxy_id;

  GetProxyLink({
    string? this.extra,
    int? this.client_id,
    int32? this.proxy_id,
  });

  GetProxyLink.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    proxy_id = map.containsKey('proxy_id') ? map['proxy_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'proxy_id': proxy_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class PingProxy extends TdFunction {
  String get tlType => 'pingProxy';

  Type get tdReturnType => Seconds;

  string? extra;
  int? client_id;
  int32? proxy_id;

  PingProxy({
    string? this.extra,
    int? this.client_id,
    int32? this.proxy_id,
  });

  PingProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    proxy_id = map.containsKey('proxy_id') ? map['proxy_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'proxy_id': proxy_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetLogStream extends TdFunction {
  String get tlType => 'setLogStream';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  LogStream? log_stream;

  SetLogStream({
    string? this.extra,
    int? this.client_id,
    LogStream? this.log_stream,
  });

  SetLogStream.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    log_stream = map.containsKey('log_stream')
        ? TlMap.fromMap(map['log_stream']) as LogStream
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'log_stream': log_stream?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLogStream extends TdFunction {
  String get tlType => 'getLogStream';

  Type get tdReturnType => LogStream;

  string? extra;
  int? client_id;

  GetLogStream({
    string? this.extra,
    int? this.client_id,
  });

  GetLogStream.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetLogVerbosityLevel extends TdFunction {
  String get tlType => 'setLogVerbosityLevel';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? new_verbosity_level;

  SetLogVerbosityLevel({
    string? this.extra,
    int? this.client_id,
    int32? this.new_verbosity_level,
  });

  SetLogVerbosityLevel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    new_verbosity_level = map.containsKey('new_verbosity_level')
        ? map['new_verbosity_level']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'new_verbosity_level': new_verbosity_level?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLogVerbosityLevel extends TdFunction {
  String get tlType => 'getLogVerbosityLevel';

  Type get tdReturnType => LogVerbosityLevel;

  string? extra;
  int? client_id;

  GetLogVerbosityLevel({
    string? this.extra,
    int? this.client_id,
  });

  GetLogVerbosityLevel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLogTags extends TdFunction {
  String get tlType => 'getLogTags';

  Type get tdReturnType => LogTags;

  string? extra;
  int? client_id;

  GetLogTags({
    string? this.extra,
    int? this.client_id,
  });

  GetLogTags.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class SetLogTagVerbosityLevel extends TdFunction {
  String get tlType => 'setLogTagVerbosityLevel';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? tag;
  int32? new_verbosity_level;

  SetLogTagVerbosityLevel({
    string? this.extra,
    int? this.client_id,
    string? this.tag,
    int32? this.new_verbosity_level,
  });

  SetLogTagVerbosityLevel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    tag = map.containsKey('tag') ? map['tag'] : null;
    new_verbosity_level = map.containsKey('new_verbosity_level')
        ? map['new_verbosity_level']
        : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'tag': tag?.toMap(skipNulls: skipNulls),
      'new_verbosity_level': new_verbosity_level?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class GetLogTagVerbosityLevel extends TdFunction {
  String get tlType => 'getLogTagVerbosityLevel';

  Type get tdReturnType => LogVerbosityLevel;

  string? extra;
  int? client_id;
  string? tag;

  GetLogTagVerbosityLevel({
    string? this.extra,
    int? this.client_id,
    string? this.tag,
  });

  GetLogTagVerbosityLevel.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    tag = map.containsKey('tag') ? map['tag'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'tag': tag?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class AddLogMessage extends TdFunction {
  String get tlType => 'addLogMessage';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  int32? verbosity_level;
  string? text;

  AddLogMessage({
    string? this.extra,
    int? this.client_id,
    int32? this.verbosity_level,
    string? this.text,
  });

  AddLogMessage.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    verbosity_level =
        map.containsKey('verbosity_level') ? map['verbosity_level'] : null;
    text = map.containsKey('text') ? map['text'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'verbosity_level': verbosity_level?.toMap(skipNulls: skipNulls),
      'text': text?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestCallEmpty extends TdFunction {
  String get tlType => 'testCallEmpty';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  TestCallEmpty({
    string? this.extra,
    int? this.client_id,
  });

  TestCallEmpty.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestCallString extends TdFunction {
  String get tlType => 'testCallString';

  Type get tdReturnType => TestString;

  string? extra;
  int? client_id;
  string? x;

  TestCallString({
    string? this.extra,
    int? this.client_id,
    string? this.x,
  });

  TestCallString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    x = map.containsKey('x') ? map['x'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestCallBytes extends TdFunction {
  String get tlType => 'testCallBytes';

  Type get tdReturnType => TestBytes;

  string? extra;
  int? client_id;
  bytes? x;

  TestCallBytes({
    string? this.extra,
    int? this.client_id,
    bytes? this.x,
  });

  TestCallBytes.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    x = map.containsKey('x') ? map['x'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestCallVectorInt extends TdFunction {
  String get tlType => 'testCallVectorInt';

  Type get tdReturnType => TestVectorInt;

  string? extra;
  int? client_id;
  vector<int32>? x;

  TestCallVectorInt({
    string? this.extra,
    int? this.client_id,
    vector<int32>? this.x,
  });

  TestCallVectorInt.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('x') && map['x'] != null) {
      x = [];
      var someValues = map['x'];
      for (var someValue in someValues) {
        x?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestCallVectorIntObject extends TdFunction {
  String get tlType => 'testCallVectorIntObject';

  Type get tdReturnType => TestVectorIntObject;

  string? extra;
  int? client_id;
  vector<TestInt>? x;

  TestCallVectorIntObject({
    string? this.extra,
    int? this.client_id,
    vector<TestInt>? this.x,
  });

  TestCallVectorIntObject.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('x') && map['x'] != null) {
      x = [];
      var someValues = map['x'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as TestInt;
        x?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestCallVectorString extends TdFunction {
  String get tlType => 'testCallVectorString';

  Type get tdReturnType => TestVectorString;

  string? extra;
  int? client_id;
  vector<string>? x;

  TestCallVectorString({
    string? this.extra,
    int? this.client_id,
    vector<string>? this.x,
  });

  TestCallVectorString.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('x') && map['x'] != null) {
      x = [];
      var someValues = map['x'];
      for (var someValue in someValues) {
        x?.add(someValue);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestCallVectorStringObject extends TdFunction {
  String get tlType => 'testCallVectorStringObject';

  Type get tdReturnType => TestVectorStringObject;

  string? extra;
  int? client_id;
  vector<TestString>? x;

  TestCallVectorStringObject({
    string? this.extra,
    int? this.client_id,
    vector<TestString>? this.x,
  });

  TestCallVectorStringObject.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    if (map.containsKey('x') && map['x'] != null) {
      x = [];
      var someValues = map['x'];
      for (var someValue in someValues) {
        var obj = TlMap.fromMap(someValue) as TestString;
        x?.add(obj);
      }
    }
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestSquareInt extends TdFunction {
  String get tlType => 'testSquareInt';

  Type get tdReturnType => TestInt;

  string? extra;
  int? client_id;
  int32? x;

  TestSquareInt({
    string? this.extra,
    int? this.client_id,
    int32? this.x,
  });

  TestSquareInt.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    x = map.containsKey('x') ? map['x'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'x': x?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestNetwork extends TdFunction {
  String get tlType => 'testNetwork';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  TestNetwork({
    string? this.extra,
    int? this.client_id,
  });

  TestNetwork.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestProxy extends TdFunction {
  String get tlType => 'testProxy';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;
  string? server;
  int32? port;
  ProxyType? type;
  int32? dc_id;
  double? timeout;

  TestProxy({
    string? this.extra,
    int? this.client_id,
    string? this.server,
    int32? this.port,
    ProxyType? this.type,
    int32? this.dc_id,
    double? this.timeout,
  });

  TestProxy.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    server = map.containsKey('server') ? map['server'] : null;
    port = map.containsKey('port') ? map['port'] : null;
    type = map.containsKey('type')
        ? TlMap.fromMap(map['type']) as ProxyType
        : null;
    dc_id = map.containsKey('dc_id') ? map['dc_id'] : null;
    timeout = map.containsKey('timeout') ? map['timeout'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'server': server?.toMap(skipNulls: skipNulls),
      'port': port?.toMap(skipNulls: skipNulls),
      'type': type?.toMap(skipNulls: skipNulls),
      'dc_id': dc_id?.toMap(skipNulls: skipNulls),
      'timeout': timeout?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestGetDifference extends TdFunction {
  String get tlType => 'testGetDifference';

  Type get tdReturnType => Ok;

  string? extra;
  int? client_id;

  TestGetDifference({
    string? this.extra,
    int? this.client_id,
  });

  TestGetDifference.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestUseUpdate extends TdFunction {
  String get tlType => 'testUseUpdate';

  Type get tdReturnType => Update;

  string? extra;
  int? client_id;

  TestUseUpdate({
    string? this.extra,
    int? this.client_id,
  });

  TestUseUpdate.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

class TestReturnError extends TdFunction {
  String get tlType => 'testReturnError';

  Type get tdReturnType => Error;

  string? extra;
  int? client_id;
  Error? error;

  TestReturnError({
    string? this.extra,
    int? this.client_id,
    Error? this.error,
  });

  TestReturnError.fromMap(Map<String, dynamic> map) {
    extra = map.containsKey('@extra') ? map['@extra'] : null;
    client_id = map.containsKey('@client_id') ? map['@client_id'] : null;
    error =
        map.containsKey('error') ? TlMap.fromMap(map['error']) as Error : null;
  }

  Map<String, dynamic> toMap({skipNulls = true}) {
    Map<String, dynamic> map = {
      '@type': tlType,
      '@extra': extra?.toMap(skipNulls: skipNulls),
      '@client_id': client_id?.toMap(skipNulls: skipNulls),
      'error': error?.toMap(skipNulls: skipNulls),
    };
    if (skipNulls) {
      map.removeWhere((key, value) => value == null);
    }
    return map;
  }
}

abstract class AuthenticationCodeType extends TdObject {}

abstract class TextEntityType extends TdObject {}

abstract class AuthorizationState extends TdObject {}

abstract class InputFile extends TdObject {}

abstract class ThumbnailFormat extends TdObject {}

abstract class MaskPoint extends TdObject {}

abstract class PollType extends TdObject {}

abstract class UserType extends TdObject {}

abstract class InputChatPhoto extends TdObject {}

abstract class UserStatus extends TdObject {}

abstract class ChatMemberStatus extends TdObject {}

abstract class MessageSender extends TdObject {}

abstract class ChatMembersFilter extends TdObject {}

abstract class SupergroupMembersFilter extends TdObject {}

abstract class ChatType extends TdObject {}

abstract class SecretChatState extends TdObject {}

abstract class MessageForwardOrigin extends TdObject {}

abstract class MessageSendingState extends TdObject {}

abstract class MessageSchedulingState extends TdObject {}

abstract class MessageContent extends TdObject {}

abstract class ReplyMarkup extends TdObject {}

abstract class InternalLinkType extends TdObject {}

abstract class NotificationSettingsScope extends TdObject {}

abstract class InputMessageContent extends TdObject {}

abstract class ChatList extends TdObject {}

abstract class ChatSource extends TdObject {}

abstract class ChatActionBar extends TdObject {}

abstract class PublicChatType extends TdObject {}

abstract class KeyboardButtonType extends TdObject {}

abstract class InlineKeyboardButtonType extends TdObject {}

abstract class LoginUrlInfo extends TdObject {}

abstract class RichText extends TdObject {}

abstract class PageBlockHorizontalAlignment extends TdObject {}

abstract class PageBlockVerticalAlignment extends TdObject {}

abstract class PageBlock extends TdObject {}

abstract class InputCredentials extends TdObject {}

abstract class PassportElementType extends TdObject {}

abstract class PassportElement extends TdObject {}

abstract class InputPassportElement extends TdObject {}

abstract class PassportElementErrorSource extends TdObject {}

abstract class InputPassportElementErrorSource extends TdObject {}

abstract class DiceStickers extends TdObject {}

abstract class CallDiscardReason extends TdObject {}

abstract class SearchMessagesFilter extends TdObject {}

abstract class ChatAction extends TdObject {}

abstract class CallServerType extends TdObject {}

abstract class CallState extends TdObject {}

abstract class GroupCallVideoQuality extends TdObject {}

abstract class CallProblem extends TdObject {}

abstract class InputInlineQueryResult extends TdObject {}

abstract class InlineQueryResult extends TdObject {}

abstract class CallbackQueryPayload extends TdObject {}

abstract class ChatEventAction extends TdObject {}

abstract class LanguagePackStringValue extends TdObject {}

abstract class DeviceToken extends TdObject {}

abstract class BackgroundFill extends TdObject {}

abstract class BackgroundType extends TdObject {}

abstract class InputBackground extends TdObject {}

abstract class CanTransferOwnershipResult extends TdObject {}

abstract class CheckChatUsernameResult extends TdObject {}

abstract class CheckStickerSetNameResult extends TdObject {}

abstract class ResetPasswordResult extends TdObject {}

abstract class MessageFileType extends TdObject {}

abstract class PushMessageContent extends TdObject {}

abstract class NotificationType extends TdObject {}

abstract class NotificationGroupType extends TdObject {}

abstract class OptionValue extends TdObject {}

abstract class JsonValue extends TdObject {}

abstract class UserPrivacySettingRule extends TdObject {}

abstract class UserPrivacySetting extends TdObject {}

abstract class ChatReportReason extends TdObject {}

abstract class ProxyType extends TdObject {}

abstract class FileType extends TdObject {}

abstract class NetworkType extends TdObject {}

abstract class NetworkStatisticsEntry extends TdObject {}

abstract class ConnectionState extends TdObject {}

abstract class TopChatCategory extends TdObject {}

abstract class TMeUrlType extends TdObject {}

abstract class SuggestedAction extends TdObject {}

abstract class TextParseMode extends TdObject {}

abstract class InputSticker extends TdObject {}

abstract class StatisticalGraph extends TdObject {}

abstract class ChatStatistics extends TdObject {}

abstract class VectorPathCommand extends TdObject {}

abstract class BotCommandScope extends TdObject {}

abstract class Update extends TdObject {}

abstract class LogStream extends TdObject {}

class TlMap {
  static Map<String, dynamic Function(Map<String, dynamic>)> _tdMap = {
    'error': (map) => Error.fromMap(map),
    'ok': (map) => Ok.fromMap(map),
    'tdlibParameters': (map) => TdlibParameters.fromMap(map),
    'authenticationCodeTypeTelegramMessage': (map) =>
        AuthenticationCodeTypeTelegramMessage.fromMap(map),
    'authenticationCodeTypeSms': (map) =>
        AuthenticationCodeTypeSms.fromMap(map),
    'authenticationCodeTypeCall': (map) =>
        AuthenticationCodeTypeCall.fromMap(map),
    'authenticationCodeTypeFlashCall': (map) =>
        AuthenticationCodeTypeFlashCall.fromMap(map),
    'authenticationCodeTypeMissedCall': (map) =>
        AuthenticationCodeTypeMissedCall.fromMap(map),
    'authenticationCodeInfo': (map) => AuthenticationCodeInfo.fromMap(map),
    'emailAddressAuthenticationCodeInfo': (map) =>
        EmailAddressAuthenticationCodeInfo.fromMap(map),
    'textEntity': (map) => TextEntity.fromMap(map),
    'textEntities': (map) => TextEntities.fromMap(map),
    'formattedText': (map) => FormattedText.fromMap(map),
    'termsOfService': (map) => TermsOfService.fromMap(map),
    'authorizationStateWaitTdlibParameters': (map) =>
        AuthorizationStateWaitTdlibParameters.fromMap(map),
    'authorizationStateWaitEncryptionKey': (map) =>
        AuthorizationStateWaitEncryptionKey.fromMap(map),
    'authorizationStateWaitPhoneNumber': (map) =>
        AuthorizationStateWaitPhoneNumber.fromMap(map),
    'authorizationStateWaitCode': (map) =>
        AuthorizationStateWaitCode.fromMap(map),
    'authorizationStateWaitOtherDeviceConfirmation': (map) =>
        AuthorizationStateWaitOtherDeviceConfirmation.fromMap(map),
    'authorizationStateWaitRegistration': (map) =>
        AuthorizationStateWaitRegistration.fromMap(map),
    'authorizationStateWaitPassword': (map) =>
        AuthorizationStateWaitPassword.fromMap(map),
    'authorizationStateReady': (map) => AuthorizationStateReady.fromMap(map),
    'authorizationStateLoggingOut': (map) =>
        AuthorizationStateLoggingOut.fromMap(map),
    'authorizationStateClosing': (map) =>
        AuthorizationStateClosing.fromMap(map),
    'authorizationStateClosed': (map) => AuthorizationStateClosed.fromMap(map),
    'passwordState': (map) => PasswordState.fromMap(map),
    'recoveryEmailAddress': (map) => RecoveryEmailAddress.fromMap(map),
    'temporaryPasswordState': (map) => TemporaryPasswordState.fromMap(map),
    'localFile': (map) => LocalFile.fromMap(map),
    'remoteFile': (map) => RemoteFile.fromMap(map),
    'file': (map) => File.fromMap(map),
    'inputFileId': (map) => InputFileId.fromMap(map),
    'inputFileRemote': (map) => InputFileRemote.fromMap(map),
    'inputFileLocal': (map) => InputFileLocal.fromMap(map),
    'inputFileGenerated': (map) => InputFileGenerated.fromMap(map),
    'photoSize': (map) => PhotoSize.fromMap(map),
    'minithumbnail': (map) => Minithumbnail.fromMap(map),
    'thumbnailFormatJpeg': (map) => ThumbnailFormatJpeg.fromMap(map),
    'thumbnailFormatPng': (map) => ThumbnailFormatPng.fromMap(map),
    'thumbnailFormatWebp': (map) => ThumbnailFormatWebp.fromMap(map),
    'thumbnailFormatGif': (map) => ThumbnailFormatGif.fromMap(map),
    'thumbnailFormatTgs': (map) => ThumbnailFormatTgs.fromMap(map),
    'thumbnailFormatMpeg4': (map) => ThumbnailFormatMpeg4.fromMap(map),
    'thumbnail': (map) => Thumbnail.fromMap(map),
    'maskPointForehead': (map) => MaskPointForehead.fromMap(map),
    'maskPointEyes': (map) => MaskPointEyes.fromMap(map),
    'maskPointMouth': (map) => MaskPointMouth.fromMap(map),
    'maskPointChin': (map) => MaskPointChin.fromMap(map),
    'maskPosition': (map) => MaskPosition.fromMap(map),
    'closedVectorPath': (map) => ClosedVectorPath.fromMap(map),
    'pollOption': (map) => PollOption.fromMap(map),
    'pollTypeRegular': (map) => PollTypeRegular.fromMap(map),
    'pollTypeQuiz': (map) => PollTypeQuiz.fromMap(map),
    'animation': (map) => Animation.fromMap(map),
    'audio': (map) => Audio.fromMap(map),
    'document': (map) => Document.fromMap(map),
    'photo': (map) => Photo.fromMap(map),
    'sticker': (map) => Sticker.fromMap(map),
    'video': (map) => Video.fromMap(map),
    'videoNote': (map) => VideoNote.fromMap(map),
    'voiceNote': (map) => VoiceNote.fromMap(map),
    'animatedEmoji': (map) => AnimatedEmoji.fromMap(map),
    'contact': (map) => Contact.fromMap(map),
    'location': (map) => Location.fromMap(map),
    'venue': (map) => Venue.fromMap(map),
    'game': (map) => Game.fromMap(map),
    'poll': (map) => Poll.fromMap(map),
    'profilePhoto': (map) => ProfilePhoto.fromMap(map),
    'chatPhotoInfo': (map) => ChatPhotoInfo.fromMap(map),
    'userTypeRegular': (map) => UserTypeRegular.fromMap(map),
    'userTypeDeleted': (map) => UserTypeDeleted.fromMap(map),
    'userTypeBot': (map) => UserTypeBot.fromMap(map),
    'userTypeUnknown': (map) => UserTypeUnknown.fromMap(map),
    'botCommand': (map) => BotCommand.fromMap(map),
    'botCommands': (map) => BotCommands.fromMap(map),
    'chatLocation': (map) => ChatLocation.fromMap(map),
    'animatedChatPhoto': (map) => AnimatedChatPhoto.fromMap(map),
    'chatPhoto': (map) => ChatPhoto.fromMap(map),
    'chatPhotos': (map) => ChatPhotos.fromMap(map),
    'inputChatPhotoPrevious': (map) => InputChatPhotoPrevious.fromMap(map),
    'inputChatPhotoStatic': (map) => InputChatPhotoStatic.fromMap(map),
    'inputChatPhotoAnimation': (map) => InputChatPhotoAnimation.fromMap(map),
    'user': (map) => User.fromMap(map),
    'userFullInfo': (map) => UserFullInfo.fromMap(map),
    'users': (map) => Users.fromMap(map),
    'chatAdministrator': (map) => ChatAdministrator.fromMap(map),
    'chatAdministrators': (map) => ChatAdministrators.fromMap(map),
    'chatPermissions': (map) => ChatPermissions.fromMap(map),
    'chatMemberStatusCreator': (map) => ChatMemberStatusCreator.fromMap(map),
    'chatMemberStatusAdministrator': (map) =>
        ChatMemberStatusAdministrator.fromMap(map),
    'chatMemberStatusMember': (map) => ChatMemberStatusMember.fromMap(map),
    'chatMemberStatusRestricted': (map) =>
        ChatMemberStatusRestricted.fromMap(map),
    'chatMemberStatusLeft': (map) => ChatMemberStatusLeft.fromMap(map),
    'chatMemberStatusBanned': (map) => ChatMemberStatusBanned.fromMap(map),
    'chatMember': (map) => ChatMember.fromMap(map),
    'chatMembers': (map) => ChatMembers.fromMap(map),
    'chatMembersFilterContacts': (map) =>
        ChatMembersFilterContacts.fromMap(map),
    'chatMembersFilterAdministrators': (map) =>
        ChatMembersFilterAdministrators.fromMap(map),
    'chatMembersFilterMembers': (map) => ChatMembersFilterMembers.fromMap(map),
    'chatMembersFilterMention': (map) => ChatMembersFilterMention.fromMap(map),
    'chatMembersFilterRestricted': (map) =>
        ChatMembersFilterRestricted.fromMap(map),
    'chatMembersFilterBanned': (map) => ChatMembersFilterBanned.fromMap(map),
    'chatMembersFilterBots': (map) => ChatMembersFilterBots.fromMap(map),
    'supergroupMembersFilterRecent': (map) =>
        SupergroupMembersFilterRecent.fromMap(map),
    'supergroupMembersFilterContacts': (map) =>
        SupergroupMembersFilterContacts.fromMap(map),
    'supergroupMembersFilterAdministrators': (map) =>
        SupergroupMembersFilterAdministrators.fromMap(map),
    'supergroupMembersFilterSearch': (map) =>
        SupergroupMembersFilterSearch.fromMap(map),
    'supergroupMembersFilterRestricted': (map) =>
        SupergroupMembersFilterRestricted.fromMap(map),
    'supergroupMembersFilterBanned': (map) =>
        SupergroupMembersFilterBanned.fromMap(map),
    'supergroupMembersFilterMention': (map) =>
        SupergroupMembersFilterMention.fromMap(map),
    'supergroupMembersFilterBots': (map) =>
        SupergroupMembersFilterBots.fromMap(map),
    'chatInviteLink': (map) => ChatInviteLink.fromMap(map),
    'chatInviteLinks': (map) => ChatInviteLinks.fromMap(map),
    'chatInviteLinkCount': (map) => ChatInviteLinkCount.fromMap(map),
    'chatInviteLinkCounts': (map) => ChatInviteLinkCounts.fromMap(map),
    'chatInviteLinkMember': (map) => ChatInviteLinkMember.fromMap(map),
    'chatInviteLinkMembers': (map) => ChatInviteLinkMembers.fromMap(map),
    'chatInviteLinkInfo': (map) => ChatInviteLinkInfo.fromMap(map),
    'chatJoinRequest': (map) => ChatJoinRequest.fromMap(map),
    'chatJoinRequests': (map) => ChatJoinRequests.fromMap(map),
    'chatJoinRequestsInfo': (map) => ChatJoinRequestsInfo.fromMap(map),
    'basicGroup': (map) => BasicGroup.fromMap(map),
    'basicGroupFullInfo': (map) => BasicGroupFullInfo.fromMap(map),
    'supergroup': (map) => Supergroup.fromMap(map),
    'supergroupFullInfo': (map) => SupergroupFullInfo.fromMap(map),
    'secretChatStatePending': (map) => SecretChatStatePending.fromMap(map),
    'secretChatStateReady': (map) => SecretChatStateReady.fromMap(map),
    'secretChatStateClosed': (map) => SecretChatStateClosed.fromMap(map),
    'secretChat': (map) => SecretChat.fromMap(map),
    'messageSenderUser': (map) => MessageSenderUser.fromMap(map),
    'messageSenderChat': (map) => MessageSenderChat.fromMap(map),
    'messageSenders': (map) => MessageSenders.fromMap(map),
    'messageForwardOriginUser': (map) => MessageForwardOriginUser.fromMap(map),
    'messageForwardOriginChat': (map) => MessageForwardOriginChat.fromMap(map),
    'messageForwardOriginHiddenUser': (map) =>
        MessageForwardOriginHiddenUser.fromMap(map),
    'messageForwardOriginChannel': (map) =>
        MessageForwardOriginChannel.fromMap(map),
    'messageForwardOriginMessageImport': (map) =>
        MessageForwardOriginMessageImport.fromMap(map),
    'messageForwardInfo': (map) => MessageForwardInfo.fromMap(map),
    'messageReplyInfo': (map) => MessageReplyInfo.fromMap(map),
    'messageInteractionInfo': (map) => MessageInteractionInfo.fromMap(map),
    'messageSendingStatePending': (map) =>
        MessageSendingStatePending.fromMap(map),
    'messageSendingStateFailed': (map) =>
        MessageSendingStateFailed.fromMap(map),
    'message': (map) => Message.fromMap(map),
    'messages': (map) => Messages.fromMap(map),
    'foundMessages': (map) => FoundMessages.fromMap(map),
    'messagePosition': (map) => MessagePosition.fromMap(map),
    'messagePositions': (map) => MessagePositions.fromMap(map),
    'messageCalendarDay': (map) => MessageCalendarDay.fromMap(map),
    'messageCalendar': (map) => MessageCalendar.fromMap(map),
    'sponsoredMessage': (map) => SponsoredMessage.fromMap(map),
    'notificationSettingsScopePrivateChats': (map) =>
        NotificationSettingsScopePrivateChats.fromMap(map),
    'notificationSettingsScopeGroupChats': (map) =>
        NotificationSettingsScopeGroupChats.fromMap(map),
    'notificationSettingsScopeChannelChats': (map) =>
        NotificationSettingsScopeChannelChats.fromMap(map),
    'chatNotificationSettings': (map) => ChatNotificationSettings.fromMap(map),
    'scopeNotificationSettings': (map) =>
        ScopeNotificationSettings.fromMap(map),
    'draftMessage': (map) => DraftMessage.fromMap(map),
    'chatTypePrivate': (map) => ChatTypePrivate.fromMap(map),
    'chatTypeBasicGroup': (map) => ChatTypeBasicGroup.fromMap(map),
    'chatTypeSupergroup': (map) => ChatTypeSupergroup.fromMap(map),
    'chatTypeSecret': (map) => ChatTypeSecret.fromMap(map),
    'chatFilter': (map) => ChatFilter.fromMap(map),
    'chatFilterInfo': (map) => ChatFilterInfo.fromMap(map),
    'recommendedChatFilter': (map) => RecommendedChatFilter.fromMap(map),
    'recommendedChatFilters': (map) => RecommendedChatFilters.fromMap(map),
    'chatListMain': (map) => ChatListMain.fromMap(map),
    'chatListArchive': (map) => ChatListArchive.fromMap(map),
    'chatListFilter': (map) => ChatListFilter.fromMap(map),
    'chatLists': (map) => ChatLists.fromMap(map),
    'chatSourceMtprotoProxy': (map) => ChatSourceMtprotoProxy.fromMap(map),
    'chatSourcePublicServiceAnnouncement': (map) =>
        ChatSourcePublicServiceAnnouncement.fromMap(map),
    'chatPosition': (map) => ChatPosition.fromMap(map),
    'videoChat': (map) => VideoChat.fromMap(map),
    'chat': (map) => Chat.fromMap(map),
    'chats': (map) => Chats.fromMap(map),
    'chatNearby': (map) => ChatNearby.fromMap(map),
    'chatsNearby': (map) => ChatsNearby.fromMap(map),
    'publicChatTypeHasUsername': (map) =>
        PublicChatTypeHasUsername.fromMap(map),
    'publicChatTypeIsLocationBased': (map) =>
        PublicChatTypeIsLocationBased.fromMap(map),
    'chatActionBarReportSpam': (map) => ChatActionBarReportSpam.fromMap(map),
    'chatActionBarReportUnrelatedLocation': (map) =>
        ChatActionBarReportUnrelatedLocation.fromMap(map),
    'chatActionBarInviteMembers': (map) =>
        ChatActionBarInviteMembers.fromMap(map),
    'chatActionBarReportAddBlock': (map) =>
        ChatActionBarReportAddBlock.fromMap(map),
    'chatActionBarAddContact': (map) => ChatActionBarAddContact.fromMap(map),
    'chatActionBarSharePhoneNumber': (map) =>
        ChatActionBarSharePhoneNumber.fromMap(map),
    'chatActionBarJoinRequest': (map) => ChatActionBarJoinRequest.fromMap(map),
    'keyboardButtonTypeText': (map) => KeyboardButtonTypeText.fromMap(map),
    'keyboardButtonTypeRequestPhoneNumber': (map) =>
        KeyboardButtonTypeRequestPhoneNumber.fromMap(map),
    'keyboardButtonTypeRequestLocation': (map) =>
        KeyboardButtonTypeRequestLocation.fromMap(map),
    'keyboardButtonTypeRequestPoll': (map) =>
        KeyboardButtonTypeRequestPoll.fromMap(map),
    'keyboardButton': (map) => KeyboardButton.fromMap(map),
    'inlineKeyboardButtonTypeUrl': (map) =>
        InlineKeyboardButtonTypeUrl.fromMap(map),
    'inlineKeyboardButtonTypeLoginUrl': (map) =>
        InlineKeyboardButtonTypeLoginUrl.fromMap(map),
    'inlineKeyboardButtonTypeCallback': (map) =>
        InlineKeyboardButtonTypeCallback.fromMap(map),
    'inlineKeyboardButtonTypeCallbackWithPassword': (map) =>
        InlineKeyboardButtonTypeCallbackWithPassword.fromMap(map),
    'inlineKeyboardButtonTypeCallbackGame': (map) =>
        InlineKeyboardButtonTypeCallbackGame.fromMap(map),
    'inlineKeyboardButtonTypeSwitchInline': (map) =>
        InlineKeyboardButtonTypeSwitchInline.fromMap(map),
    'inlineKeyboardButtonTypeBuy': (map) =>
        InlineKeyboardButtonTypeBuy.fromMap(map),
    'inlineKeyboardButtonTypeUser': (map) =>
        InlineKeyboardButtonTypeUser.fromMap(map),
    'inlineKeyboardButton': (map) => InlineKeyboardButton.fromMap(map),
    'replyMarkupRemoveKeyboard': (map) =>
        ReplyMarkupRemoveKeyboard.fromMap(map),
    'replyMarkupForceReply': (map) => ReplyMarkupForceReply.fromMap(map),
    'replyMarkupShowKeyboard': (map) => ReplyMarkupShowKeyboard.fromMap(map),
    'replyMarkupInlineKeyboard': (map) =>
        ReplyMarkupInlineKeyboard.fromMap(map),
    'loginUrlInfoOpen': (map) => LoginUrlInfoOpen.fromMap(map),
    'loginUrlInfoRequestConfirmation': (map) =>
        LoginUrlInfoRequestConfirmation.fromMap(map),
    'messageThreadInfo': (map) => MessageThreadInfo.fromMap(map),
    'richTextPlain': (map) => RichTextPlain.fromMap(map),
    'richTextBold': (map) => RichTextBold.fromMap(map),
    'richTextItalic': (map) => RichTextItalic.fromMap(map),
    'richTextUnderline': (map) => RichTextUnderline.fromMap(map),
    'richTextStrikethrough': (map) => RichTextStrikethrough.fromMap(map),
    'richTextFixed': (map) => RichTextFixed.fromMap(map),
    'richTextUrl': (map) => RichTextUrl.fromMap(map),
    'richTextEmailAddress': (map) => RichTextEmailAddress.fromMap(map),
    'richTextSubscript': (map) => RichTextSubscript.fromMap(map),
    'richTextSuperscript': (map) => RichTextSuperscript.fromMap(map),
    'richTextMarked': (map) => RichTextMarked.fromMap(map),
    'richTextPhoneNumber': (map) => RichTextPhoneNumber.fromMap(map),
    'richTextIcon': (map) => RichTextIcon.fromMap(map),
    'richTextReference': (map) => RichTextReference.fromMap(map),
    'richTextAnchor': (map) => RichTextAnchor.fromMap(map),
    'richTextAnchorLink': (map) => RichTextAnchorLink.fromMap(map),
    'richTexts': (map) => RichTexts.fromMap(map),
    'pageBlockCaption': (map) => PageBlockCaption.fromMap(map),
    'pageBlockListItem': (map) => PageBlockListItem.fromMap(map),
    'pageBlockHorizontalAlignmentLeft': (map) =>
        PageBlockHorizontalAlignmentLeft.fromMap(map),
    'pageBlockHorizontalAlignmentCenter': (map) =>
        PageBlockHorizontalAlignmentCenter.fromMap(map),
    'pageBlockHorizontalAlignmentRight': (map) =>
        PageBlockHorizontalAlignmentRight.fromMap(map),
    'pageBlockVerticalAlignmentTop': (map) =>
        PageBlockVerticalAlignmentTop.fromMap(map),
    'pageBlockVerticalAlignmentMiddle': (map) =>
        PageBlockVerticalAlignmentMiddle.fromMap(map),
    'pageBlockVerticalAlignmentBottom': (map) =>
        PageBlockVerticalAlignmentBottom.fromMap(map),
    'pageBlockTableCell': (map) => PageBlockTableCell.fromMap(map),
    'pageBlockRelatedArticle': (map) => PageBlockRelatedArticle.fromMap(map),
    'pageBlockTitle': (map) => PageBlockTitle.fromMap(map),
    'pageBlockSubtitle': (map) => PageBlockSubtitle.fromMap(map),
    'pageBlockAuthorDate': (map) => PageBlockAuthorDate.fromMap(map),
    'pageBlockHeader': (map) => PageBlockHeader.fromMap(map),
    'pageBlockSubheader': (map) => PageBlockSubheader.fromMap(map),
    'pageBlockKicker': (map) => PageBlockKicker.fromMap(map),
    'pageBlockParagraph': (map) => PageBlockParagraph.fromMap(map),
    'pageBlockPreformatted': (map) => PageBlockPreformatted.fromMap(map),
    'pageBlockFooter': (map) => PageBlockFooter.fromMap(map),
    'pageBlockDivider': (map) => PageBlockDivider.fromMap(map),
    'pageBlockAnchor': (map) => PageBlockAnchor.fromMap(map),
    'pageBlockList': (map) => PageBlockList.fromMap(map),
    'pageBlockBlockQuote': (map) => PageBlockBlockQuote.fromMap(map),
    'pageBlockPullQuote': (map) => PageBlockPullQuote.fromMap(map),
    'pageBlockAnimation': (map) => PageBlockAnimation.fromMap(map),
    'pageBlockAudio': (map) => PageBlockAudio.fromMap(map),
    'pageBlockPhoto': (map) => PageBlockPhoto.fromMap(map),
    'pageBlockVideo': (map) => PageBlockVideo.fromMap(map),
    'pageBlockVoiceNote': (map) => PageBlockVoiceNote.fromMap(map),
    'pageBlockCover': (map) => PageBlockCover.fromMap(map),
    'pageBlockEmbedded': (map) => PageBlockEmbedded.fromMap(map),
    'pageBlockEmbeddedPost': (map) => PageBlockEmbeddedPost.fromMap(map),
    'pageBlockCollage': (map) => PageBlockCollage.fromMap(map),
    'pageBlockSlideshow': (map) => PageBlockSlideshow.fromMap(map),
    'pageBlockChatLink': (map) => PageBlockChatLink.fromMap(map),
    'pageBlockTable': (map) => PageBlockTable.fromMap(map),
    'pageBlockDetails': (map) => PageBlockDetails.fromMap(map),
    'pageBlockRelatedArticles': (map) => PageBlockRelatedArticles.fromMap(map),
    'pageBlockMap': (map) => PageBlockMap.fromMap(map),
    'webPageInstantView': (map) => WebPageInstantView.fromMap(map),
    'webPage': (map) => WebPage.fromMap(map),
    'countryInfo': (map) => CountryInfo.fromMap(map),
    'countries': (map) => Countries.fromMap(map),
    'phoneNumberInfo': (map) => PhoneNumberInfo.fromMap(map),
    'bankCardActionOpenUrl': (map) => BankCardActionOpenUrl.fromMap(map),
    'bankCardInfo': (map) => BankCardInfo.fromMap(map),
    'address': (map) => Address.fromMap(map),
    'labeledPricePart': (map) => LabeledPricePart.fromMap(map),
    'invoice': (map) => Invoice.fromMap(map),
    'orderInfo': (map) => OrderInfo.fromMap(map),
    'shippingOption': (map) => ShippingOption.fromMap(map),
    'savedCredentials': (map) => SavedCredentials.fromMap(map),
    'inputCredentialsSaved': (map) => InputCredentialsSaved.fromMap(map),
    'inputCredentialsNew': (map) => InputCredentialsNew.fromMap(map),
    'inputCredentialsApplePay': (map) => InputCredentialsApplePay.fromMap(map),
    'inputCredentialsGooglePay': (map) =>
        InputCredentialsGooglePay.fromMap(map),
    'paymentsProviderStripe': (map) => PaymentsProviderStripe.fromMap(map),
    'paymentFormTheme': (map) => PaymentFormTheme.fromMap(map),
    'paymentForm': (map) => PaymentForm.fromMap(map),
    'validatedOrderInfo': (map) => ValidatedOrderInfo.fromMap(map),
    'paymentResult': (map) => PaymentResult.fromMap(map),
    'paymentReceipt': (map) => PaymentReceipt.fromMap(map),
    'datedFile': (map) => DatedFile.fromMap(map),
    'passportElementTypePersonalDetails': (map) =>
        PassportElementTypePersonalDetails.fromMap(map),
    'passportElementTypePassport': (map) =>
        PassportElementTypePassport.fromMap(map),
    'passportElementTypeDriverLicense': (map) =>
        PassportElementTypeDriverLicense.fromMap(map),
    'passportElementTypeIdentityCard': (map) =>
        PassportElementTypeIdentityCard.fromMap(map),
    'passportElementTypeInternalPassport': (map) =>
        PassportElementTypeInternalPassport.fromMap(map),
    'passportElementTypeAddress': (map) =>
        PassportElementTypeAddress.fromMap(map),
    'passportElementTypeUtilityBill': (map) =>
        PassportElementTypeUtilityBill.fromMap(map),
    'passportElementTypeBankStatement': (map) =>
        PassportElementTypeBankStatement.fromMap(map),
    'passportElementTypeRentalAgreement': (map) =>
        PassportElementTypeRentalAgreement.fromMap(map),
    'passportElementTypePassportRegistration': (map) =>
        PassportElementTypePassportRegistration.fromMap(map),
    'passportElementTypeTemporaryRegistration': (map) =>
        PassportElementTypeTemporaryRegistration.fromMap(map),
    'passportElementTypePhoneNumber': (map) =>
        PassportElementTypePhoneNumber.fromMap(map),
    'passportElementTypeEmailAddress': (map) =>
        PassportElementTypeEmailAddress.fromMap(map),
    'date': (map) => Date.fromMap(map),
    'personalDetails': (map) => PersonalDetails.fromMap(map),
    'identityDocument': (map) => IdentityDocument.fromMap(map),
    'inputIdentityDocument': (map) => InputIdentityDocument.fromMap(map),
    'personalDocument': (map) => PersonalDocument.fromMap(map),
    'inputPersonalDocument': (map) => InputPersonalDocument.fromMap(map),
    'passportElementPersonalDetails': (map) =>
        PassportElementPersonalDetails.fromMap(map),
    'passportElementPassport': (map) => PassportElementPassport.fromMap(map),
    'passportElementDriverLicense': (map) =>
        PassportElementDriverLicense.fromMap(map),
    'passportElementIdentityCard': (map) =>
        PassportElementIdentityCard.fromMap(map),
    'passportElementInternalPassport': (map) =>
        PassportElementInternalPassport.fromMap(map),
    'passportElementAddress': (map) => PassportElementAddress.fromMap(map),
    'passportElementUtilityBill': (map) =>
        PassportElementUtilityBill.fromMap(map),
    'passportElementBankStatement': (map) =>
        PassportElementBankStatement.fromMap(map),
    'passportElementRentalAgreement': (map) =>
        PassportElementRentalAgreement.fromMap(map),
    'passportElementPassportRegistration': (map) =>
        PassportElementPassportRegistration.fromMap(map),
    'passportElementTemporaryRegistration': (map) =>
        PassportElementTemporaryRegistration.fromMap(map),
    'passportElementPhoneNumber': (map) =>
        PassportElementPhoneNumber.fromMap(map),
    'passportElementEmailAddress': (map) =>
        PassportElementEmailAddress.fromMap(map),
    'inputPassportElementPersonalDetails': (map) =>
        InputPassportElementPersonalDetails.fromMap(map),
    'inputPassportElementPassport': (map) =>
        InputPassportElementPassport.fromMap(map),
    'inputPassportElementDriverLicense': (map) =>
        InputPassportElementDriverLicense.fromMap(map),
    'inputPassportElementIdentityCard': (map) =>
        InputPassportElementIdentityCard.fromMap(map),
    'inputPassportElementInternalPassport': (map) =>
        InputPassportElementInternalPassport.fromMap(map),
    'inputPassportElementAddress': (map) =>
        InputPassportElementAddress.fromMap(map),
    'inputPassportElementUtilityBill': (map) =>
        InputPassportElementUtilityBill.fromMap(map),
    'inputPassportElementBankStatement': (map) =>
        InputPassportElementBankStatement.fromMap(map),
    'inputPassportElementRentalAgreement': (map) =>
        InputPassportElementRentalAgreement.fromMap(map),
    'inputPassportElementPassportRegistration': (map) =>
        InputPassportElementPassportRegistration.fromMap(map),
    'inputPassportElementTemporaryRegistration': (map) =>
        InputPassportElementTemporaryRegistration.fromMap(map),
    'inputPassportElementPhoneNumber': (map) =>
        InputPassportElementPhoneNumber.fromMap(map),
    'inputPassportElementEmailAddress': (map) =>
        InputPassportElementEmailAddress.fromMap(map),
    'passportElements': (map) => PassportElements.fromMap(map),
    'passportElementErrorSourceUnspecified': (map) =>
        PassportElementErrorSourceUnspecified.fromMap(map),
    'passportElementErrorSourceDataField': (map) =>
        PassportElementErrorSourceDataField.fromMap(map),
    'passportElementErrorSourceFrontSide': (map) =>
        PassportElementErrorSourceFrontSide.fromMap(map),
    'passportElementErrorSourceReverseSide': (map) =>
        PassportElementErrorSourceReverseSide.fromMap(map),
    'passportElementErrorSourceSelfie': (map) =>
        PassportElementErrorSourceSelfie.fromMap(map),
    'passportElementErrorSourceTranslationFile': (map) =>
        PassportElementErrorSourceTranslationFile.fromMap(map),
    'passportElementErrorSourceTranslationFiles': (map) =>
        PassportElementErrorSourceTranslationFiles.fromMap(map),
    'passportElementErrorSourceFile': (map) =>
        PassportElementErrorSourceFile.fromMap(map),
    'passportElementErrorSourceFiles': (map) =>
        PassportElementErrorSourceFiles.fromMap(map),
    'passportElementError': (map) => PassportElementError.fromMap(map),
    'passportSuitableElement': (map) => PassportSuitableElement.fromMap(map),
    'passportRequiredElement': (map) => PassportRequiredElement.fromMap(map),
    'passportAuthorizationForm': (map) =>
        PassportAuthorizationForm.fromMap(map),
    'passportElementsWithErrors': (map) =>
        PassportElementsWithErrors.fromMap(map),
    'encryptedCredentials': (map) => EncryptedCredentials.fromMap(map),
    'encryptedPassportElement': (map) => EncryptedPassportElement.fromMap(map),
    'inputPassportElementErrorSourceUnspecified': (map) =>
        InputPassportElementErrorSourceUnspecified.fromMap(map),
    'inputPassportElementErrorSourceDataField': (map) =>
        InputPassportElementErrorSourceDataField.fromMap(map),
    'inputPassportElementErrorSourceFrontSide': (map) =>
        InputPassportElementErrorSourceFrontSide.fromMap(map),
    'inputPassportElementErrorSourceReverseSide': (map) =>
        InputPassportElementErrorSourceReverseSide.fromMap(map),
    'inputPassportElementErrorSourceSelfie': (map) =>
        InputPassportElementErrorSourceSelfie.fromMap(map),
    'inputPassportElementErrorSourceTranslationFile': (map) =>
        InputPassportElementErrorSourceTranslationFile.fromMap(map),
    'inputPassportElementErrorSourceTranslationFiles': (map) =>
        InputPassportElementErrorSourceTranslationFiles.fromMap(map),
    'inputPassportElementErrorSourceFile': (map) =>
        InputPassportElementErrorSourceFile.fromMap(map),
    'inputPassportElementErrorSourceFiles': (map) =>
        InputPassportElementErrorSourceFiles.fromMap(map),
    'inputPassportElementError': (map) =>
        InputPassportElementError.fromMap(map),
    'messageText': (map) => MessageText.fromMap(map),
    'messageAnimation': (map) => MessageAnimation.fromMap(map),
    'messageAudio': (map) => MessageAudio.fromMap(map),
    'messageDocument': (map) => MessageDocument.fromMap(map),
    'messagePhoto': (map) => MessagePhoto.fromMap(map),
    'messageExpiredPhoto': (map) => MessageExpiredPhoto.fromMap(map),
    'messageSticker': (map) => MessageSticker.fromMap(map),
    'messageVideo': (map) => MessageVideo.fromMap(map),
    'messageExpiredVideo': (map) => MessageExpiredVideo.fromMap(map),
    'messageVideoNote': (map) => MessageVideoNote.fromMap(map),
    'messageVoiceNote': (map) => MessageVoiceNote.fromMap(map),
    'messageLocation': (map) => MessageLocation.fromMap(map),
    'messageVenue': (map) => MessageVenue.fromMap(map),
    'messageContact': (map) => MessageContact.fromMap(map),
    'messageAnimatedEmoji': (map) => MessageAnimatedEmoji.fromMap(map),
    'messageDice': (map) => MessageDice.fromMap(map),
    'messageGame': (map) => MessageGame.fromMap(map),
    'messagePoll': (map) => MessagePoll.fromMap(map),
    'messageInvoice': (map) => MessageInvoice.fromMap(map),
    'messageCall': (map) => MessageCall.fromMap(map),
    'messageVideoChatScheduled': (map) =>
        MessageVideoChatScheduled.fromMap(map),
    'messageVideoChatStarted': (map) => MessageVideoChatStarted.fromMap(map),
    'messageVideoChatEnded': (map) => MessageVideoChatEnded.fromMap(map),
    'messageInviteVideoChatParticipants': (map) =>
        MessageInviteVideoChatParticipants.fromMap(map),
    'messageBasicGroupChatCreate': (map) =>
        MessageBasicGroupChatCreate.fromMap(map),
    'messageSupergroupChatCreate': (map) =>
        MessageSupergroupChatCreate.fromMap(map),
    'messageChatChangeTitle': (map) => MessageChatChangeTitle.fromMap(map),
    'messageChatChangePhoto': (map) => MessageChatChangePhoto.fromMap(map),
    'messageChatDeletePhoto': (map) => MessageChatDeletePhoto.fromMap(map),
    'messageChatAddMembers': (map) => MessageChatAddMembers.fromMap(map),
    'messageChatJoinByLink': (map) => MessageChatJoinByLink.fromMap(map),
    'messageChatJoinByRequest': (map) => MessageChatJoinByRequest.fromMap(map),
    'messageChatDeleteMember': (map) => MessageChatDeleteMember.fromMap(map),
    'messageChatUpgradeTo': (map) => MessageChatUpgradeTo.fromMap(map),
    'messageChatUpgradeFrom': (map) => MessageChatUpgradeFrom.fromMap(map),
    'messagePinMessage': (map) => MessagePinMessage.fromMap(map),
    'messageScreenshotTaken': (map) => MessageScreenshotTaken.fromMap(map),
    'messageChatSetTheme': (map) => MessageChatSetTheme.fromMap(map),
    'messageChatSetTtl': (map) => MessageChatSetTtl.fromMap(map),
    'messageCustomServiceAction': (map) =>
        MessageCustomServiceAction.fromMap(map),
    'messageGameScore': (map) => MessageGameScore.fromMap(map),
    'messagePaymentSuccessful': (map) => MessagePaymentSuccessful.fromMap(map),
    'messagePaymentSuccessfulBot': (map) =>
        MessagePaymentSuccessfulBot.fromMap(map),
    'messageContactRegistered': (map) => MessageContactRegistered.fromMap(map),
    'messageWebsiteConnected': (map) => MessageWebsiteConnected.fromMap(map),
    'messagePassportDataSent': (map) => MessagePassportDataSent.fromMap(map),
    'messagePassportDataReceived': (map) =>
        MessagePassportDataReceived.fromMap(map),
    'messageProximityAlertTriggered': (map) =>
        MessageProximityAlertTriggered.fromMap(map),
    'messageUnsupported': (map) => MessageUnsupported.fromMap(map),
    'textEntityTypeMention': (map) => TextEntityTypeMention.fromMap(map),
    'textEntityTypeHashtag': (map) => TextEntityTypeHashtag.fromMap(map),
    'textEntityTypeCashtag': (map) => TextEntityTypeCashtag.fromMap(map),
    'textEntityTypeBotCommand': (map) => TextEntityTypeBotCommand.fromMap(map),
    'textEntityTypeUrl': (map) => TextEntityTypeUrl.fromMap(map),
    'textEntityTypeEmailAddress': (map) =>
        TextEntityTypeEmailAddress.fromMap(map),
    'textEntityTypePhoneNumber': (map) =>
        TextEntityTypePhoneNumber.fromMap(map),
    'textEntityTypeBankCardNumber': (map) =>
        TextEntityTypeBankCardNumber.fromMap(map),
    'textEntityTypeBold': (map) => TextEntityTypeBold.fromMap(map),
    'textEntityTypeItalic': (map) => TextEntityTypeItalic.fromMap(map),
    'textEntityTypeUnderline': (map) => TextEntityTypeUnderline.fromMap(map),
    'textEntityTypeStrikethrough': (map) =>
        TextEntityTypeStrikethrough.fromMap(map),
    'textEntityTypeCode': (map) => TextEntityTypeCode.fromMap(map),
    'textEntityTypePre': (map) => TextEntityTypePre.fromMap(map),
    'textEntityTypePreCode': (map) => TextEntityTypePreCode.fromMap(map),
    'textEntityTypeTextUrl': (map) => TextEntityTypeTextUrl.fromMap(map),
    'textEntityTypeMentionName': (map) =>
        TextEntityTypeMentionName.fromMap(map),
    'textEntityTypeMediaTimestamp': (map) =>
        TextEntityTypeMediaTimestamp.fromMap(map),
    'inputThumbnail': (map) => InputThumbnail.fromMap(map),
    'messageSchedulingStateSendAtDate': (map) =>
        MessageSchedulingStateSendAtDate.fromMap(map),
    'messageSchedulingStateSendWhenOnline': (map) =>
        MessageSchedulingStateSendWhenOnline.fromMap(map),
    'messageSendOptions': (map) => MessageSendOptions.fromMap(map),
    'messageCopyOptions': (map) => MessageCopyOptions.fromMap(map),
    'inputMessageText': (map) => InputMessageText.fromMap(map),
    'inputMessageAnimation': (map) => InputMessageAnimation.fromMap(map),
    'inputMessageAudio': (map) => InputMessageAudio.fromMap(map),
    'inputMessageDocument': (map) => InputMessageDocument.fromMap(map),
    'inputMessagePhoto': (map) => InputMessagePhoto.fromMap(map),
    'inputMessageSticker': (map) => InputMessageSticker.fromMap(map),
    'inputMessageVideo': (map) => InputMessageVideo.fromMap(map),
    'inputMessageVideoNote': (map) => InputMessageVideoNote.fromMap(map),
    'inputMessageVoiceNote': (map) => InputMessageVoiceNote.fromMap(map),
    'inputMessageLocation': (map) => InputMessageLocation.fromMap(map),
    'inputMessageVenue': (map) => InputMessageVenue.fromMap(map),
    'inputMessageContact': (map) => InputMessageContact.fromMap(map),
    'inputMessageDice': (map) => InputMessageDice.fromMap(map),
    'inputMessageGame': (map) => InputMessageGame.fromMap(map),
    'inputMessageInvoice': (map) => InputMessageInvoice.fromMap(map),
    'inputMessagePoll': (map) => InputMessagePoll.fromMap(map),
    'inputMessageForwarded': (map) => InputMessageForwarded.fromMap(map),
    'searchMessagesFilterEmpty': (map) =>
        SearchMessagesFilterEmpty.fromMap(map),
    'searchMessagesFilterAnimation': (map) =>
        SearchMessagesFilterAnimation.fromMap(map),
    'searchMessagesFilterAudio': (map) =>
        SearchMessagesFilterAudio.fromMap(map),
    'searchMessagesFilterDocument': (map) =>
        SearchMessagesFilterDocument.fromMap(map),
    'searchMessagesFilterPhoto': (map) =>
        SearchMessagesFilterPhoto.fromMap(map),
    'searchMessagesFilterVideo': (map) =>
        SearchMessagesFilterVideo.fromMap(map),
    'searchMessagesFilterVoiceNote': (map) =>
        SearchMessagesFilterVoiceNote.fromMap(map),
    'searchMessagesFilterPhotoAndVideo': (map) =>
        SearchMessagesFilterPhotoAndVideo.fromMap(map),
    'searchMessagesFilterUrl': (map) => SearchMessagesFilterUrl.fromMap(map),
    'searchMessagesFilterChatPhoto': (map) =>
        SearchMessagesFilterChatPhoto.fromMap(map),
    'searchMessagesFilterVideoNote': (map) =>
        SearchMessagesFilterVideoNote.fromMap(map),
    'searchMessagesFilterVoiceAndVideoNote': (map) =>
        SearchMessagesFilterVoiceAndVideoNote.fromMap(map),
    'searchMessagesFilterMention': (map) =>
        SearchMessagesFilterMention.fromMap(map),
    'searchMessagesFilterUnreadMention': (map) =>
        SearchMessagesFilterUnreadMention.fromMap(map),
    'searchMessagesFilterFailedToSend': (map) =>
        SearchMessagesFilterFailedToSend.fromMap(map),
    'searchMessagesFilterPinned': (map) =>
        SearchMessagesFilterPinned.fromMap(map),
    'chatActionTyping': (map) => ChatActionTyping.fromMap(map),
    'chatActionRecordingVideo': (map) => ChatActionRecordingVideo.fromMap(map),
    'chatActionUploadingVideo': (map) => ChatActionUploadingVideo.fromMap(map),
    'chatActionRecordingVoiceNote': (map) =>
        ChatActionRecordingVoiceNote.fromMap(map),
    'chatActionUploadingVoiceNote': (map) =>
        ChatActionUploadingVoiceNote.fromMap(map),
    'chatActionUploadingPhoto': (map) => ChatActionUploadingPhoto.fromMap(map),
    'chatActionUploadingDocument': (map) =>
        ChatActionUploadingDocument.fromMap(map),
    'chatActionChoosingSticker': (map) =>
        ChatActionChoosingSticker.fromMap(map),
    'chatActionChoosingLocation': (map) =>
        ChatActionChoosingLocation.fromMap(map),
    'chatActionChoosingContact': (map) =>
        ChatActionChoosingContact.fromMap(map),
    'chatActionStartPlayingGame': (map) =>
        ChatActionStartPlayingGame.fromMap(map),
    'chatActionRecordingVideoNote': (map) =>
        ChatActionRecordingVideoNote.fromMap(map),
    'chatActionUploadingVideoNote': (map) =>
        ChatActionUploadingVideoNote.fromMap(map),
    'chatActionWatchingAnimations': (map) =>
        ChatActionWatchingAnimations.fromMap(map),
    'chatActionCancel': (map) => ChatActionCancel.fromMap(map),
    'userStatusEmpty': (map) => UserStatusEmpty.fromMap(map),
    'userStatusOnline': (map) => UserStatusOnline.fromMap(map),
    'userStatusOffline': (map) => UserStatusOffline.fromMap(map),
    'userStatusRecently': (map) => UserStatusRecently.fromMap(map),
    'userStatusLastWeek': (map) => UserStatusLastWeek.fromMap(map),
    'userStatusLastMonth': (map) => UserStatusLastMonth.fromMap(map),
    'stickers': (map) => Stickers.fromMap(map),
    'emojis': (map) => Emojis.fromMap(map),
    'stickerSet': (map) => StickerSet.fromMap(map),
    'stickerSetInfo': (map) => StickerSetInfo.fromMap(map),
    'stickerSets': (map) => StickerSets.fromMap(map),
    'callDiscardReasonEmpty': (map) => CallDiscardReasonEmpty.fromMap(map),
    'callDiscardReasonMissed': (map) => CallDiscardReasonMissed.fromMap(map),
    'callDiscardReasonDeclined': (map) =>
        CallDiscardReasonDeclined.fromMap(map),
    'callDiscardReasonDisconnected': (map) =>
        CallDiscardReasonDisconnected.fromMap(map),
    'callDiscardReasonHungUp': (map) => CallDiscardReasonHungUp.fromMap(map),
    'callProtocol': (map) => CallProtocol.fromMap(map),
    'callServerTypeTelegramReflector': (map) =>
        CallServerTypeTelegramReflector.fromMap(map),
    'callServerTypeWebrtc': (map) => CallServerTypeWebrtc.fromMap(map),
    'callServer': (map) => CallServer.fromMap(map),
    'callId': (map) => CallId.fromMap(map),
    'groupCallId': (map) => GroupCallId.fromMap(map),
    'callStatePending': (map) => CallStatePending.fromMap(map),
    'callStateExchangingKeys': (map) => CallStateExchangingKeys.fromMap(map),
    'callStateReady': (map) => CallStateReady.fromMap(map),
    'callStateHangingUp': (map) => CallStateHangingUp.fromMap(map),
    'callStateDiscarded': (map) => CallStateDiscarded.fromMap(map),
    'callStateError': (map) => CallStateError.fromMap(map),
    'groupCallVideoQualityThumbnail': (map) =>
        GroupCallVideoQualityThumbnail.fromMap(map),
    'groupCallVideoQualityMedium': (map) =>
        GroupCallVideoQualityMedium.fromMap(map),
    'groupCallVideoQualityFull': (map) =>
        GroupCallVideoQualityFull.fromMap(map),
    'groupCallRecentSpeaker': (map) => GroupCallRecentSpeaker.fromMap(map),
    'groupCall': (map) => GroupCall.fromMap(map),
    'groupCallVideoSourceGroup': (map) =>
        GroupCallVideoSourceGroup.fromMap(map),
    'groupCallParticipantVideoInfo': (map) =>
        GroupCallParticipantVideoInfo.fromMap(map),
    'groupCallParticipant': (map) => GroupCallParticipant.fromMap(map),
    'callProblemEcho': (map) => CallProblemEcho.fromMap(map),
    'callProblemNoise': (map) => CallProblemNoise.fromMap(map),
    'callProblemInterruptions': (map) => CallProblemInterruptions.fromMap(map),
    'callProblemDistortedSpeech': (map) =>
        CallProblemDistortedSpeech.fromMap(map),
    'callProblemSilentLocal': (map) => CallProblemSilentLocal.fromMap(map),
    'callProblemSilentRemote': (map) => CallProblemSilentRemote.fromMap(map),
    'callProblemDropped': (map) => CallProblemDropped.fromMap(map),
    'callProblemDistortedVideo': (map) =>
        CallProblemDistortedVideo.fromMap(map),
    'callProblemPixelatedVideo': (map) =>
        CallProblemPixelatedVideo.fromMap(map),
    'call': (map) => Call.fromMap(map),
    'phoneNumberAuthenticationSettings': (map) =>
        PhoneNumberAuthenticationSettings.fromMap(map),
    'animations': (map) => Animations.fromMap(map),
    'diceStickersRegular': (map) => DiceStickersRegular.fromMap(map),
    'diceStickersSlotMachine': (map) => DiceStickersSlotMachine.fromMap(map),
    'importedContacts': (map) => ImportedContacts.fromMap(map),
    'httpUrl': (map) => HttpUrl.fromMap(map),
    'inputInlineQueryResultAnimation': (map) =>
        InputInlineQueryResultAnimation.fromMap(map),
    'inputInlineQueryResultArticle': (map) =>
        InputInlineQueryResultArticle.fromMap(map),
    'inputInlineQueryResultAudio': (map) =>
        InputInlineQueryResultAudio.fromMap(map),
    'inputInlineQueryResultContact': (map) =>
        InputInlineQueryResultContact.fromMap(map),
    'inputInlineQueryResultDocument': (map) =>
        InputInlineQueryResultDocument.fromMap(map),
    'inputInlineQueryResultGame': (map) =>
        InputInlineQueryResultGame.fromMap(map),
    'inputInlineQueryResultLocation': (map) =>
        InputInlineQueryResultLocation.fromMap(map),
    'inputInlineQueryResultPhoto': (map) =>
        InputInlineQueryResultPhoto.fromMap(map),
    'inputInlineQueryResultSticker': (map) =>
        InputInlineQueryResultSticker.fromMap(map),
    'inputInlineQueryResultVenue': (map) =>
        InputInlineQueryResultVenue.fromMap(map),
    'inputInlineQueryResultVideo': (map) =>
        InputInlineQueryResultVideo.fromMap(map),
    'inputInlineQueryResultVoiceNote': (map) =>
        InputInlineQueryResultVoiceNote.fromMap(map),
    'inlineQueryResultArticle': (map) => InlineQueryResultArticle.fromMap(map),
    'inlineQueryResultContact': (map) => InlineQueryResultContact.fromMap(map),
    'inlineQueryResultLocation': (map) =>
        InlineQueryResultLocation.fromMap(map),
    'inlineQueryResultVenue': (map) => InlineQueryResultVenue.fromMap(map),
    'inlineQueryResultGame': (map) => InlineQueryResultGame.fromMap(map),
    'inlineQueryResultAnimation': (map) =>
        InlineQueryResultAnimation.fromMap(map),
    'inlineQueryResultAudio': (map) => InlineQueryResultAudio.fromMap(map),
    'inlineQueryResultDocument': (map) =>
        InlineQueryResultDocument.fromMap(map),
    'inlineQueryResultPhoto': (map) => InlineQueryResultPhoto.fromMap(map),
    'inlineQueryResultSticker': (map) => InlineQueryResultSticker.fromMap(map),
    'inlineQueryResultVideo': (map) => InlineQueryResultVideo.fromMap(map),
    'inlineQueryResultVoiceNote': (map) =>
        InlineQueryResultVoiceNote.fromMap(map),
    'inlineQueryResults': (map) => InlineQueryResults.fromMap(map),
    'callbackQueryPayloadData': (map) => CallbackQueryPayloadData.fromMap(map),
    'callbackQueryPayloadDataWithPassword': (map) =>
        CallbackQueryPayloadDataWithPassword.fromMap(map),
    'callbackQueryPayloadGame': (map) => CallbackQueryPayloadGame.fromMap(map),
    'callbackQueryAnswer': (map) => CallbackQueryAnswer.fromMap(map),
    'customRequestResult': (map) => CustomRequestResult.fromMap(map),
    'gameHighScore': (map) => GameHighScore.fromMap(map),
    'gameHighScores': (map) => GameHighScores.fromMap(map),
    'chatEventMessageEdited': (map) => ChatEventMessageEdited.fromMap(map),
    'chatEventMessageDeleted': (map) => ChatEventMessageDeleted.fromMap(map),
    'chatEventPollStopped': (map) => ChatEventPollStopped.fromMap(map),
    'chatEventMessagePinned': (map) => ChatEventMessagePinned.fromMap(map),
    'chatEventMessageUnpinned': (map) => ChatEventMessageUnpinned.fromMap(map),
    'chatEventMemberJoined': (map) => ChatEventMemberJoined.fromMap(map),
    'chatEventMemberJoinedByInviteLink': (map) =>
        ChatEventMemberJoinedByInviteLink.fromMap(map),
    'chatEventMemberJoinedByRequest': (map) =>
        ChatEventMemberJoinedByRequest.fromMap(map),
    'chatEventMemberLeft': (map) => ChatEventMemberLeft.fromMap(map),
    'chatEventMemberInvited': (map) => ChatEventMemberInvited.fromMap(map),
    'chatEventMemberPromoted': (map) => ChatEventMemberPromoted.fromMap(map),
    'chatEventMemberRestricted': (map) =>
        ChatEventMemberRestricted.fromMap(map),
    'chatEventTitleChanged': (map) => ChatEventTitleChanged.fromMap(map),
    'chatEventPermissionsChanged': (map) =>
        ChatEventPermissionsChanged.fromMap(map),
    'chatEventDescriptionChanged': (map) =>
        ChatEventDescriptionChanged.fromMap(map),
    'chatEventUsernameChanged': (map) => ChatEventUsernameChanged.fromMap(map),
    'chatEventPhotoChanged': (map) => ChatEventPhotoChanged.fromMap(map),
    'chatEventInvitesToggled': (map) => ChatEventInvitesToggled.fromMap(map),
    'chatEventLinkedChatChanged': (map) =>
        ChatEventLinkedChatChanged.fromMap(map),
    'chatEventSlowModeDelayChanged': (map) =>
        ChatEventSlowModeDelayChanged.fromMap(map),
    'chatEventMessageTtlChanged': (map) =>
        ChatEventMessageTtlChanged.fromMap(map),
    'chatEventSignMessagesToggled': (map) =>
        ChatEventSignMessagesToggled.fromMap(map),
    'chatEventHasProtectedContentToggled': (map) =>
        ChatEventHasProtectedContentToggled.fromMap(map),
    'chatEventStickerSetChanged': (map) =>
        ChatEventStickerSetChanged.fromMap(map),
    'chatEventLocationChanged': (map) => ChatEventLocationChanged.fromMap(map),
    'chatEventIsAllHistoryAvailableToggled': (map) =>
        ChatEventIsAllHistoryAvailableToggled.fromMap(map),
    'chatEventInviteLinkEdited': (map) =>
        ChatEventInviteLinkEdited.fromMap(map),
    'chatEventInviteLinkRevoked': (map) =>
        ChatEventInviteLinkRevoked.fromMap(map),
    'chatEventInviteLinkDeleted': (map) =>
        ChatEventInviteLinkDeleted.fromMap(map),
    'chatEventVideoChatCreated': (map) =>
        ChatEventVideoChatCreated.fromMap(map),
    'chatEventVideoChatEnded': (map) => ChatEventVideoChatEnded.fromMap(map),
    'chatEventVideoChatParticipantIsMutedToggled': (map) =>
        ChatEventVideoChatParticipantIsMutedToggled.fromMap(map),
    'chatEventVideoChatParticipantVolumeLevelChanged': (map) =>
        ChatEventVideoChatParticipantVolumeLevelChanged.fromMap(map),
    'chatEventVideoChatMuteNewParticipantsToggled': (map) =>
        ChatEventVideoChatMuteNewParticipantsToggled.fromMap(map),
    'chatEvent': (map) => ChatEvent.fromMap(map),
    'chatEvents': (map) => ChatEvents.fromMap(map),
    'chatEventLogFilters': (map) => ChatEventLogFilters.fromMap(map),
    'languagePackStringValueOrdinary': (map) =>
        LanguagePackStringValueOrdinary.fromMap(map),
    'languagePackStringValuePluralized': (map) =>
        LanguagePackStringValuePluralized.fromMap(map),
    'languagePackStringValueDeleted': (map) =>
        LanguagePackStringValueDeleted.fromMap(map),
    'languagePackString': (map) => LanguagePackString.fromMap(map),
    'languagePackStrings': (map) => LanguagePackStrings.fromMap(map),
    'languagePackInfo': (map) => LanguagePackInfo.fromMap(map),
    'localizationTargetInfo': (map) => LocalizationTargetInfo.fromMap(map),
    'deviceTokenFirebaseCloudMessaging': (map) =>
        DeviceTokenFirebaseCloudMessaging.fromMap(map),
    'deviceTokenApplePush': (map) => DeviceTokenApplePush.fromMap(map),
    'deviceTokenApplePushVoIP': (map) => DeviceTokenApplePushVoIP.fromMap(map),
    'deviceTokenWindowsPush': (map) => DeviceTokenWindowsPush.fromMap(map),
    'deviceTokenMicrosoftPush': (map) => DeviceTokenMicrosoftPush.fromMap(map),
    'deviceTokenMicrosoftPushVoIP': (map) =>
        DeviceTokenMicrosoftPushVoIP.fromMap(map),
    'deviceTokenWebPush': (map) => DeviceTokenWebPush.fromMap(map),
    'deviceTokenSimplePush': (map) => DeviceTokenSimplePush.fromMap(map),
    'deviceTokenUbuntuPush': (map) => DeviceTokenUbuntuPush.fromMap(map),
    'deviceTokenBlackBerryPush': (map) =>
        DeviceTokenBlackBerryPush.fromMap(map),
    'deviceTokenTizenPush': (map) => DeviceTokenTizenPush.fromMap(map),
    'pushReceiverId': (map) => PushReceiverId.fromMap(map),
    'backgroundFillSolid': (map) => BackgroundFillSolid.fromMap(map),
    'backgroundFillGradient': (map) => BackgroundFillGradient.fromMap(map),
    'backgroundFillFreeformGradient': (map) =>
        BackgroundFillFreeformGradient.fromMap(map),
    'backgroundTypeWallpaper': (map) => BackgroundTypeWallpaper.fromMap(map),
    'backgroundTypePattern': (map) => BackgroundTypePattern.fromMap(map),
    'backgroundTypeFill': (map) => BackgroundTypeFill.fromMap(map),
    'background': (map) => Background.fromMap(map),
    'backgrounds': (map) => Backgrounds.fromMap(map),
    'inputBackgroundLocal': (map) => InputBackgroundLocal.fromMap(map),
    'inputBackgroundRemote': (map) => InputBackgroundRemote.fromMap(map),
    'themeSettings': (map) => ThemeSettings.fromMap(map),
    'chatTheme': (map) => ChatTheme.fromMap(map),
    'hashtags': (map) => Hashtags.fromMap(map),
    'canTransferOwnershipResultOk': (map) =>
        CanTransferOwnershipResultOk.fromMap(map),
    'canTransferOwnershipResultPasswordNeeded': (map) =>
        CanTransferOwnershipResultPasswordNeeded.fromMap(map),
    'canTransferOwnershipResultPasswordTooFresh': (map) =>
        CanTransferOwnershipResultPasswordTooFresh.fromMap(map),
    'canTransferOwnershipResultSessionTooFresh': (map) =>
        CanTransferOwnershipResultSessionTooFresh.fromMap(map),
    'checkChatUsernameResultOk': (map) =>
        CheckChatUsernameResultOk.fromMap(map),
    'checkChatUsernameResultUsernameInvalid': (map) =>
        CheckChatUsernameResultUsernameInvalid.fromMap(map),
    'checkChatUsernameResultUsernameOccupied': (map) =>
        CheckChatUsernameResultUsernameOccupied.fromMap(map),
    'checkChatUsernameResultPublicChatsTooMuch': (map) =>
        CheckChatUsernameResultPublicChatsTooMuch.fromMap(map),
    'checkChatUsernameResultPublicGroupsUnavailable': (map) =>
        CheckChatUsernameResultPublicGroupsUnavailable.fromMap(map),
    'checkStickerSetNameResultOk': (map) =>
        CheckStickerSetNameResultOk.fromMap(map),
    'checkStickerSetNameResultNameInvalid': (map) =>
        CheckStickerSetNameResultNameInvalid.fromMap(map),
    'checkStickerSetNameResultNameOccupied': (map) =>
        CheckStickerSetNameResultNameOccupied.fromMap(map),
    'resetPasswordResultOk': (map) => ResetPasswordResultOk.fromMap(map),
    'resetPasswordResultPending': (map) =>
        ResetPasswordResultPending.fromMap(map),
    'resetPasswordResultDeclined': (map) =>
        ResetPasswordResultDeclined.fromMap(map),
    'messageFileTypePrivate': (map) => MessageFileTypePrivate.fromMap(map),
    'messageFileTypeGroup': (map) => MessageFileTypeGroup.fromMap(map),
    'messageFileTypeUnknown': (map) => MessageFileTypeUnknown.fromMap(map),
    'pushMessageContentHidden': (map) => PushMessageContentHidden.fromMap(map),
    'pushMessageContentAnimation': (map) =>
        PushMessageContentAnimation.fromMap(map),
    'pushMessageContentAudio': (map) => PushMessageContentAudio.fromMap(map),
    'pushMessageContentContact': (map) =>
        PushMessageContentContact.fromMap(map),
    'pushMessageContentContactRegistered': (map) =>
        PushMessageContentContactRegistered.fromMap(map),
    'pushMessageContentDocument': (map) =>
        PushMessageContentDocument.fromMap(map),
    'pushMessageContentGame': (map) => PushMessageContentGame.fromMap(map),
    'pushMessageContentGameScore': (map) =>
        PushMessageContentGameScore.fromMap(map),
    'pushMessageContentInvoice': (map) =>
        PushMessageContentInvoice.fromMap(map),
    'pushMessageContentLocation': (map) =>
        PushMessageContentLocation.fromMap(map),
    'pushMessageContentPhoto': (map) => PushMessageContentPhoto.fromMap(map),
    'pushMessageContentPoll': (map) => PushMessageContentPoll.fromMap(map),
    'pushMessageContentScreenshotTaken': (map) =>
        PushMessageContentScreenshotTaken.fromMap(map),
    'pushMessageContentSticker': (map) =>
        PushMessageContentSticker.fromMap(map),
    'pushMessageContentText': (map) => PushMessageContentText.fromMap(map),
    'pushMessageContentVideo': (map) => PushMessageContentVideo.fromMap(map),
    'pushMessageContentVideoNote': (map) =>
        PushMessageContentVideoNote.fromMap(map),
    'pushMessageContentVoiceNote': (map) =>
        PushMessageContentVoiceNote.fromMap(map),
    'pushMessageContentBasicGroupChatCreate': (map) =>
        PushMessageContentBasicGroupChatCreate.fromMap(map),
    'pushMessageContentChatAddMembers': (map) =>
        PushMessageContentChatAddMembers.fromMap(map),
    'pushMessageContentChatChangePhoto': (map) =>
        PushMessageContentChatChangePhoto.fromMap(map),
    'pushMessageContentChatChangeTitle': (map) =>
        PushMessageContentChatChangeTitle.fromMap(map),
    'pushMessageContentChatSetTheme': (map) =>
        PushMessageContentChatSetTheme.fromMap(map),
    'pushMessageContentChatDeleteMember': (map) =>
        PushMessageContentChatDeleteMember.fromMap(map),
    'pushMessageContentChatJoinByLink': (map) =>
        PushMessageContentChatJoinByLink.fromMap(map),
    'pushMessageContentChatJoinByRequest': (map) =>
        PushMessageContentChatJoinByRequest.fromMap(map),
    'pushMessageContentMessageForwards': (map) =>
        PushMessageContentMessageForwards.fromMap(map),
    'pushMessageContentMediaAlbum': (map) =>
        PushMessageContentMediaAlbum.fromMap(map),
    'notificationTypeNewMessage': (map) =>
        NotificationTypeNewMessage.fromMap(map),
    'notificationTypeNewSecretChat': (map) =>
        NotificationTypeNewSecretChat.fromMap(map),
    'notificationTypeNewCall': (map) => NotificationTypeNewCall.fromMap(map),
    'notificationTypeNewPushMessage': (map) =>
        NotificationTypeNewPushMessage.fromMap(map),
    'notificationGroupTypeMessages': (map) =>
        NotificationGroupTypeMessages.fromMap(map),
    'notificationGroupTypeMentions': (map) =>
        NotificationGroupTypeMentions.fromMap(map),
    'notificationGroupTypeSecretChat': (map) =>
        NotificationGroupTypeSecretChat.fromMap(map),
    'notificationGroupTypeCalls': (map) =>
        NotificationGroupTypeCalls.fromMap(map),
    'notification': (map) => Notification.fromMap(map),
    'notificationGroup': (map) => NotificationGroup.fromMap(map),
    'optionValueBoolean': (map) => OptionValueBoolean.fromMap(map),
    'optionValueEmpty': (map) => OptionValueEmpty.fromMap(map),
    'optionValueInteger': (map) => OptionValueInteger.fromMap(map),
    'optionValueString': (map) => OptionValueString.fromMap(map),
    'jsonObjectMember': (map) => JsonObjectMember.fromMap(map),
    'jsonValueNull': (map) => JsonValueNull.fromMap(map),
    'jsonValueBoolean': (map) => JsonValueBoolean.fromMap(map),
    'jsonValueNumber': (map) => JsonValueNumber.fromMap(map),
    'jsonValueString': (map) => JsonValueString.fromMap(map),
    'jsonValueArray': (map) => JsonValueArray.fromMap(map),
    'jsonValueObject': (map) => JsonValueObject.fromMap(map),
    'userPrivacySettingRuleAllowAll': (map) =>
        UserPrivacySettingRuleAllowAll.fromMap(map),
    'userPrivacySettingRuleAllowContacts': (map) =>
        UserPrivacySettingRuleAllowContacts.fromMap(map),
    'userPrivacySettingRuleAllowUsers': (map) =>
        UserPrivacySettingRuleAllowUsers.fromMap(map),
    'userPrivacySettingRuleAllowChatMembers': (map) =>
        UserPrivacySettingRuleAllowChatMembers.fromMap(map),
    'userPrivacySettingRuleRestrictAll': (map) =>
        UserPrivacySettingRuleRestrictAll.fromMap(map),
    'userPrivacySettingRuleRestrictContacts': (map) =>
        UserPrivacySettingRuleRestrictContacts.fromMap(map),
    'userPrivacySettingRuleRestrictUsers': (map) =>
        UserPrivacySettingRuleRestrictUsers.fromMap(map),
    'userPrivacySettingRuleRestrictChatMembers': (map) =>
        UserPrivacySettingRuleRestrictChatMembers.fromMap(map),
    'userPrivacySettingRules': (map) => UserPrivacySettingRules.fromMap(map),
    'userPrivacySettingShowStatus': (map) =>
        UserPrivacySettingShowStatus.fromMap(map),
    'userPrivacySettingShowProfilePhoto': (map) =>
        UserPrivacySettingShowProfilePhoto.fromMap(map),
    'userPrivacySettingShowLinkInForwardedMessages': (map) =>
        UserPrivacySettingShowLinkInForwardedMessages.fromMap(map),
    'userPrivacySettingShowPhoneNumber': (map) =>
        UserPrivacySettingShowPhoneNumber.fromMap(map),
    'userPrivacySettingAllowChatInvites': (map) =>
        UserPrivacySettingAllowChatInvites.fromMap(map),
    'userPrivacySettingAllowCalls': (map) =>
        UserPrivacySettingAllowCalls.fromMap(map),
    'userPrivacySettingAllowPeerToPeerCalls': (map) =>
        UserPrivacySettingAllowPeerToPeerCalls.fromMap(map),
    'userPrivacySettingAllowFindingByPhoneNumber': (map) =>
        UserPrivacySettingAllowFindingByPhoneNumber.fromMap(map),
    'accountTtl': (map) => AccountTtl.fromMap(map),
    'session': (map) => Session.fromMap(map),
    'sessions': (map) => Sessions.fromMap(map),
    'connectedWebsite': (map) => ConnectedWebsite.fromMap(map),
    'connectedWebsites': (map) => ConnectedWebsites.fromMap(map),
    'chatReportReasonSpam': (map) => ChatReportReasonSpam.fromMap(map),
    'chatReportReasonViolence': (map) => ChatReportReasonViolence.fromMap(map),
    'chatReportReasonPornography': (map) =>
        ChatReportReasonPornography.fromMap(map),
    'chatReportReasonChildAbuse': (map) =>
        ChatReportReasonChildAbuse.fromMap(map),
    'chatReportReasonCopyright': (map) =>
        ChatReportReasonCopyright.fromMap(map),
    'chatReportReasonUnrelatedLocation': (map) =>
        ChatReportReasonUnrelatedLocation.fromMap(map),
    'chatReportReasonFake': (map) => ChatReportReasonFake.fromMap(map),
    'chatReportReasonCustom': (map) => ChatReportReasonCustom.fromMap(map),
    'internalLinkTypeActiveSessions': (map) =>
        InternalLinkTypeActiveSessions.fromMap(map),
    'internalLinkTypeAuthenticationCode': (map) =>
        InternalLinkTypeAuthenticationCode.fromMap(map),
    'internalLinkTypeBackground': (map) =>
        InternalLinkTypeBackground.fromMap(map),
    'internalLinkTypeBotStart': (map) => InternalLinkTypeBotStart.fromMap(map),
    'internalLinkTypeBotStartInGroup': (map) =>
        InternalLinkTypeBotStartInGroup.fromMap(map),
    'internalLinkTypeChangePhoneNumber': (map) =>
        InternalLinkTypeChangePhoneNumber.fromMap(map),
    'internalLinkTypeChatInvite': (map) =>
        InternalLinkTypeChatInvite.fromMap(map),
    'internalLinkTypeFilterSettings': (map) =>
        InternalLinkTypeFilterSettings.fromMap(map),
    'internalLinkTypeGame': (map) => InternalLinkTypeGame.fromMap(map),
    'internalLinkTypeLanguagePack': (map) =>
        InternalLinkTypeLanguagePack.fromMap(map),
    'internalLinkTypeMessage': (map) => InternalLinkTypeMessage.fromMap(map),
    'internalLinkTypeMessageDraft': (map) =>
        InternalLinkTypeMessageDraft.fromMap(map),
    'internalLinkTypePassportDataRequest': (map) =>
        InternalLinkTypePassportDataRequest.fromMap(map),
    'internalLinkTypePhoneNumberConfirmation': (map) =>
        InternalLinkTypePhoneNumberConfirmation.fromMap(map),
    'internalLinkTypeProxy': (map) => InternalLinkTypeProxy.fromMap(map),
    'internalLinkTypePublicChat': (map) =>
        InternalLinkTypePublicChat.fromMap(map),
    'internalLinkTypeQrCodeAuthentication': (map) =>
        InternalLinkTypeQrCodeAuthentication.fromMap(map),
    'internalLinkTypeSettings': (map) => InternalLinkTypeSettings.fromMap(map),
    'internalLinkTypeStickerSet': (map) =>
        InternalLinkTypeStickerSet.fromMap(map),
    'internalLinkTypeTheme': (map) => InternalLinkTypeTheme.fromMap(map),
    'internalLinkTypeThemeSettings': (map) =>
        InternalLinkTypeThemeSettings.fromMap(map),
    'internalLinkTypeUnknownDeepLink': (map) =>
        InternalLinkTypeUnknownDeepLink.fromMap(map),
    'internalLinkTypeUnsupportedProxy': (map) =>
        InternalLinkTypeUnsupportedProxy.fromMap(map),
    'internalLinkTypeVideoChat': (map) =>
        InternalLinkTypeVideoChat.fromMap(map),
    'messageLink': (map) => MessageLink.fromMap(map),
    'messageLinkInfo': (map) => MessageLinkInfo.fromMap(map),
    'filePart': (map) => FilePart.fromMap(map),
    'fileTypeNone': (map) => FileTypeNone.fromMap(map),
    'fileTypeAnimation': (map) => FileTypeAnimation.fromMap(map),
    'fileTypeAudio': (map) => FileTypeAudio.fromMap(map),
    'fileTypeDocument': (map) => FileTypeDocument.fromMap(map),
    'fileTypePhoto': (map) => FileTypePhoto.fromMap(map),
    'fileTypeProfilePhoto': (map) => FileTypeProfilePhoto.fromMap(map),
    'fileTypeSecret': (map) => FileTypeSecret.fromMap(map),
    'fileTypeSecretThumbnail': (map) => FileTypeSecretThumbnail.fromMap(map),
    'fileTypeSecure': (map) => FileTypeSecure.fromMap(map),
    'fileTypeSticker': (map) => FileTypeSticker.fromMap(map),
    'fileTypeThumbnail': (map) => FileTypeThumbnail.fromMap(map),
    'fileTypeUnknown': (map) => FileTypeUnknown.fromMap(map),
    'fileTypeVideo': (map) => FileTypeVideo.fromMap(map),
    'fileTypeVideoNote': (map) => FileTypeVideoNote.fromMap(map),
    'fileTypeVoiceNote': (map) => FileTypeVoiceNote.fromMap(map),
    'fileTypeWallpaper': (map) => FileTypeWallpaper.fromMap(map),
    'storageStatisticsByFileType': (map) =>
        StorageStatisticsByFileType.fromMap(map),
    'storageStatisticsByChat': (map) => StorageStatisticsByChat.fromMap(map),
    'storageStatistics': (map) => StorageStatistics.fromMap(map),
    'storageStatisticsFast': (map) => StorageStatisticsFast.fromMap(map),
    'databaseStatistics': (map) => DatabaseStatistics.fromMap(map),
    'networkTypeNone': (map) => NetworkTypeNone.fromMap(map),
    'networkTypeMobile': (map) => NetworkTypeMobile.fromMap(map),
    'networkTypeMobileRoaming': (map) => NetworkTypeMobileRoaming.fromMap(map),
    'networkTypeWiFi': (map) => NetworkTypeWiFi.fromMap(map),
    'networkTypeOther': (map) => NetworkTypeOther.fromMap(map),
    'networkStatisticsEntryFile': (map) =>
        NetworkStatisticsEntryFile.fromMap(map),
    'networkStatisticsEntryCall': (map) =>
        NetworkStatisticsEntryCall.fromMap(map),
    'networkStatistics': (map) => NetworkStatistics.fromMap(map),
    'autoDownloadSettings': (map) => AutoDownloadSettings.fromMap(map),
    'autoDownloadSettingsPresets': (map) =>
        AutoDownloadSettingsPresets.fromMap(map),
    'connectionStateWaitingForNetwork': (map) =>
        ConnectionStateWaitingForNetwork.fromMap(map),
    'connectionStateConnectingToProxy': (map) =>
        ConnectionStateConnectingToProxy.fromMap(map),
    'connectionStateConnecting': (map) =>
        ConnectionStateConnecting.fromMap(map),
    'connectionStateUpdating': (map) => ConnectionStateUpdating.fromMap(map),
    'connectionStateReady': (map) => ConnectionStateReady.fromMap(map),
    'topChatCategoryUsers': (map) => TopChatCategoryUsers.fromMap(map),
    'topChatCategoryBots': (map) => TopChatCategoryBots.fromMap(map),
    'topChatCategoryGroups': (map) => TopChatCategoryGroups.fromMap(map),
    'topChatCategoryChannels': (map) => TopChatCategoryChannels.fromMap(map),
    'topChatCategoryInlineBots': (map) =>
        TopChatCategoryInlineBots.fromMap(map),
    'topChatCategoryCalls': (map) => TopChatCategoryCalls.fromMap(map),
    'topChatCategoryForwardChats': (map) =>
        TopChatCategoryForwardChats.fromMap(map),
    'tMeUrlTypeUser': (map) => TMeUrlTypeUser.fromMap(map),
    'tMeUrlTypeSupergroup': (map) => TMeUrlTypeSupergroup.fromMap(map),
    'tMeUrlTypeChatInvite': (map) => TMeUrlTypeChatInvite.fromMap(map),
    'tMeUrlTypeStickerSet': (map) => TMeUrlTypeStickerSet.fromMap(map),
    'tMeUrl': (map) => TMeUrl.fromMap(map),
    'tMeUrls': (map) => TMeUrls.fromMap(map),
    'suggestedActionEnableArchiveAndMuteNewChats': (map) =>
        SuggestedActionEnableArchiveAndMuteNewChats.fromMap(map),
    'suggestedActionCheckPassword': (map) =>
        SuggestedActionCheckPassword.fromMap(map),
    'suggestedActionCheckPhoneNumber': (map) =>
        SuggestedActionCheckPhoneNumber.fromMap(map),
    'suggestedActionViewChecksHint': (map) =>
        SuggestedActionViewChecksHint.fromMap(map),
    'suggestedActionConvertToBroadcastGroup': (map) =>
        SuggestedActionConvertToBroadcastGroup.fromMap(map),
    'suggestedActionSetPassword': (map) =>
        SuggestedActionSetPassword.fromMap(map),
    'count': (map) => Count.fromMap(map),
    'text': (map) => Text.fromMap(map),
    'seconds': (map) => Seconds.fromMap(map),
    'deepLinkInfo': (map) => DeepLinkInfo.fromMap(map),
    'textParseModeMarkdown': (map) => TextParseModeMarkdown.fromMap(map),
    'textParseModeHTML': (map) => TextParseModeHTML.fromMap(map),
    'proxyTypeSocks5': (map) => ProxyTypeSocks5.fromMap(map),
    'proxyTypeHttp': (map) => ProxyTypeHttp.fromMap(map),
    'proxyTypeMtproto': (map) => ProxyTypeMtproto.fromMap(map),
    'proxy': (map) => Proxy.fromMap(map),
    'proxies': (map) => Proxies.fromMap(map),
    'inputStickerStatic': (map) => InputStickerStatic.fromMap(map),
    'inputStickerAnimated': (map) => InputStickerAnimated.fromMap(map),
    'dateRange': (map) => DateRange.fromMap(map),
    'statisticalValue': (map) => StatisticalValue.fromMap(map),
    'statisticalGraphData': (map) => StatisticalGraphData.fromMap(map),
    'statisticalGraphAsync': (map) => StatisticalGraphAsync.fromMap(map),
    'statisticalGraphError': (map) => StatisticalGraphError.fromMap(map),
    'chatStatisticsMessageInteractionInfo': (map) =>
        ChatStatisticsMessageInteractionInfo.fromMap(map),
    'chatStatisticsMessageSenderInfo': (map) =>
        ChatStatisticsMessageSenderInfo.fromMap(map),
    'chatStatisticsAdministratorActionsInfo': (map) =>
        ChatStatisticsAdministratorActionsInfo.fromMap(map),
    'chatStatisticsInviterInfo': (map) =>
        ChatStatisticsInviterInfo.fromMap(map),
    'chatStatisticsSupergroup': (map) => ChatStatisticsSupergroup.fromMap(map),
    'chatStatisticsChannel': (map) => ChatStatisticsChannel.fromMap(map),
    'messageStatistics': (map) => MessageStatistics.fromMap(map),
    'point': (map) => Point.fromMap(map),
    'vectorPathCommandLine': (map) => VectorPathCommandLine.fromMap(map),
    'vectorPathCommandCubicBezierCurve': (map) =>
        VectorPathCommandCubicBezierCurve.fromMap(map),
    'botCommandScopeDefault': (map) => BotCommandScopeDefault.fromMap(map),
    'botCommandScopeAllPrivateChats': (map) =>
        BotCommandScopeAllPrivateChats.fromMap(map),
    'botCommandScopeAllGroupChats': (map) =>
        BotCommandScopeAllGroupChats.fromMap(map),
    'botCommandScopeAllChatAdministrators': (map) =>
        BotCommandScopeAllChatAdministrators.fromMap(map),
    'botCommandScopeChat': (map) => BotCommandScopeChat.fromMap(map),
    'botCommandScopeChatAdministrators': (map) =>
        BotCommandScopeChatAdministrators.fromMap(map),
    'botCommandScopeChatMember': (map) =>
        BotCommandScopeChatMember.fromMap(map),
    'updateAuthorizationState': (map) => UpdateAuthorizationState.fromMap(map),
    'updateNewMessage': (map) => UpdateNewMessage.fromMap(map),
    'updateMessageSendAcknowledged': (map) =>
        UpdateMessageSendAcknowledged.fromMap(map),
    'updateMessageSendSucceeded': (map) =>
        UpdateMessageSendSucceeded.fromMap(map),
    'updateMessageSendFailed': (map) => UpdateMessageSendFailed.fromMap(map),
    'updateMessageContent': (map) => UpdateMessageContent.fromMap(map),
    'updateMessageEdited': (map) => UpdateMessageEdited.fromMap(map),
    'updateMessageIsPinned': (map) => UpdateMessageIsPinned.fromMap(map),
    'updateMessageInteractionInfo': (map) =>
        UpdateMessageInteractionInfo.fromMap(map),
    'updateMessageContentOpened': (map) =>
        UpdateMessageContentOpened.fromMap(map),
    'updateMessageMentionRead': (map) => UpdateMessageMentionRead.fromMap(map),
    'updateMessageLiveLocationViewed': (map) =>
        UpdateMessageLiveLocationViewed.fromMap(map),
    'updateNewChat': (map) => UpdateNewChat.fromMap(map),
    'updateChatTitle': (map) => UpdateChatTitle.fromMap(map),
    'updateChatPhoto': (map) => UpdateChatPhoto.fromMap(map),
    'updateChatPermissions': (map) => UpdateChatPermissions.fromMap(map),
    'updateChatLastMessage': (map) => UpdateChatLastMessage.fromMap(map),
    'updateChatPosition': (map) => UpdateChatPosition.fromMap(map),
    'updateChatReadInbox': (map) => UpdateChatReadInbox.fromMap(map),
    'updateChatReadOutbox': (map) => UpdateChatReadOutbox.fromMap(map),
    'updateChatActionBar': (map) => UpdateChatActionBar.fromMap(map),
    'updateChatDraftMessage': (map) => UpdateChatDraftMessage.fromMap(map),
    'updateChatMessageSender': (map) => UpdateChatMessageSender.fromMap(map),
    'updateChatMessageTtl': (map) => UpdateChatMessageTtl.fromMap(map),
    'updateChatNotificationSettings': (map) =>
        UpdateChatNotificationSettings.fromMap(map),
    'updateChatPendingJoinRequests': (map) =>
        UpdateChatPendingJoinRequests.fromMap(map),
    'updateChatReplyMarkup': (map) => UpdateChatReplyMarkup.fromMap(map),
    'updateChatTheme': (map) => UpdateChatTheme.fromMap(map),
    'updateChatUnreadMentionCount': (map) =>
        UpdateChatUnreadMentionCount.fromMap(map),
    'updateChatVideoChat': (map) => UpdateChatVideoChat.fromMap(map),
    'updateChatDefaultDisableNotification': (map) =>
        UpdateChatDefaultDisableNotification.fromMap(map),
    'updateChatHasProtectedContent': (map) =>
        UpdateChatHasProtectedContent.fromMap(map),
    'updateChatHasScheduledMessages': (map) =>
        UpdateChatHasScheduledMessages.fromMap(map),
    'updateChatIsBlocked': (map) => UpdateChatIsBlocked.fromMap(map),
    'updateChatIsMarkedAsUnread': (map) =>
        UpdateChatIsMarkedAsUnread.fromMap(map),
    'updateChatFilters': (map) => UpdateChatFilters.fromMap(map),
    'updateChatOnlineMemberCount': (map) =>
        UpdateChatOnlineMemberCount.fromMap(map),
    'updateScopeNotificationSettings': (map) =>
        UpdateScopeNotificationSettings.fromMap(map),
    'updateNotification': (map) => UpdateNotification.fromMap(map),
    'updateNotificationGroup': (map) => UpdateNotificationGroup.fromMap(map),
    'updateActiveNotifications': (map) =>
        UpdateActiveNotifications.fromMap(map),
    'updateHavePendingNotifications': (map) =>
        UpdateHavePendingNotifications.fromMap(map),
    'updateDeleteMessages': (map) => UpdateDeleteMessages.fromMap(map),
    'updateChatAction': (map) => UpdateChatAction.fromMap(map),
    'updateUserStatus': (map) => UpdateUserStatus.fromMap(map),
    'updateUser': (map) => UpdateUser.fromMap(map),
    'updateBasicGroup': (map) => UpdateBasicGroup.fromMap(map),
    'updateSupergroup': (map) => UpdateSupergroup.fromMap(map),
    'updateSecretChat': (map) => UpdateSecretChat.fromMap(map),
    'updateUserFullInfo': (map) => UpdateUserFullInfo.fromMap(map),
    'updateBasicGroupFullInfo': (map) => UpdateBasicGroupFullInfo.fromMap(map),
    'updateSupergroupFullInfo': (map) => UpdateSupergroupFullInfo.fromMap(map),
    'updateServiceNotification': (map) =>
        UpdateServiceNotification.fromMap(map),
    'updateFile': (map) => UpdateFile.fromMap(map),
    'updateFileGenerationStart': (map) =>
        UpdateFileGenerationStart.fromMap(map),
    'updateFileGenerationStop': (map) => UpdateFileGenerationStop.fromMap(map),
    'updateCall': (map) => UpdateCall.fromMap(map),
    'updateGroupCall': (map) => UpdateGroupCall.fromMap(map),
    'updateGroupCallParticipant': (map) =>
        UpdateGroupCallParticipant.fromMap(map),
    'updateNewCallSignalingData': (map) =>
        UpdateNewCallSignalingData.fromMap(map),
    'updateUserPrivacySettingRules': (map) =>
        UpdateUserPrivacySettingRules.fromMap(map),
    'updateUnreadMessageCount': (map) => UpdateUnreadMessageCount.fromMap(map),
    'updateUnreadChatCount': (map) => UpdateUnreadChatCount.fromMap(map),
    'updateOption': (map) => UpdateOption.fromMap(map),
    'updateStickerSet': (map) => UpdateStickerSet.fromMap(map),
    'updateInstalledStickerSets': (map) =>
        UpdateInstalledStickerSets.fromMap(map),
    'updateTrendingStickerSets': (map) =>
        UpdateTrendingStickerSets.fromMap(map),
    'updateRecentStickers': (map) => UpdateRecentStickers.fromMap(map),
    'updateFavoriteStickers': (map) => UpdateFavoriteStickers.fromMap(map),
    'updateSavedAnimations': (map) => UpdateSavedAnimations.fromMap(map),
    'updateSelectedBackground': (map) => UpdateSelectedBackground.fromMap(map),
    'updateChatThemes': (map) => UpdateChatThemes.fromMap(map),
    'updateLanguagePackStrings': (map) =>
        UpdateLanguagePackStrings.fromMap(map),
    'updateConnectionState': (map) => UpdateConnectionState.fromMap(map),
    'updateTermsOfService': (map) => UpdateTermsOfService.fromMap(map),
    'updateUsersNearby': (map) => UpdateUsersNearby.fromMap(map),
    'updateDiceEmojis': (map) => UpdateDiceEmojis.fromMap(map),
    'updateAnimatedEmojiMessageClicked': (map) =>
        UpdateAnimatedEmojiMessageClicked.fromMap(map),
    'updateAnimationSearchParameters': (map) =>
        UpdateAnimationSearchParameters.fromMap(map),
    'updateSuggestedActions': (map) => UpdateSuggestedActions.fromMap(map),
    'updateNewInlineQuery': (map) => UpdateNewInlineQuery.fromMap(map),
    'updateNewChosenInlineResult': (map) =>
        UpdateNewChosenInlineResult.fromMap(map),
    'updateNewCallbackQuery': (map) => UpdateNewCallbackQuery.fromMap(map),
    'updateNewInlineCallbackQuery': (map) =>
        UpdateNewInlineCallbackQuery.fromMap(map),
    'updateNewShippingQuery': (map) => UpdateNewShippingQuery.fromMap(map),
    'updateNewPreCheckoutQuery': (map) =>
        UpdateNewPreCheckoutQuery.fromMap(map),
    'updateNewCustomEvent': (map) => UpdateNewCustomEvent.fromMap(map),
    'updateNewCustomQuery': (map) => UpdateNewCustomQuery.fromMap(map),
    'updatePoll': (map) => UpdatePoll.fromMap(map),
    'updatePollAnswer': (map) => UpdatePollAnswer.fromMap(map),
    'updateChatMember': (map) => UpdateChatMember.fromMap(map),
    'updateNewChatJoinRequest': (map) => UpdateNewChatJoinRequest.fromMap(map),
    'updates': (map) => Updates.fromMap(map),
    'logStreamDefault': (map) => LogStreamDefault.fromMap(map),
    'logStreamFile': (map) => LogStreamFile.fromMap(map),
    'logStreamEmpty': (map) => LogStreamEmpty.fromMap(map),
    'logVerbosityLevel': (map) => LogVerbosityLevel.fromMap(map),
    'logTags': (map) => LogTags.fromMap(map),
    'testInt': (map) => TestInt.fromMap(map),
    'testString': (map) => TestString.fromMap(map),
    'testBytes': (map) => TestBytes.fromMap(map),
    'testVectorInt': (map) => TestVectorInt.fromMap(map),
    'testVectorIntObject': (map) => TestVectorIntObject.fromMap(map),
    'testVectorString': (map) => TestVectorString.fromMap(map),
    'testVectorStringObject': (map) => TestVectorStringObject.fromMap(map),
    'getAuthorizationState': (map) => GetAuthorizationState.fromMap(map),
    'setTdlibParameters': (map) => SetTdlibParameters.fromMap(map),
    'checkDatabaseEncryptionKey': (map) =>
        CheckDatabaseEncryptionKey.fromMap(map),
    'setAuthenticationPhoneNumber': (map) =>
        SetAuthenticationPhoneNumber.fromMap(map),
    'resendAuthenticationCode': (map) => ResendAuthenticationCode.fromMap(map),
    'checkAuthenticationCode': (map) => CheckAuthenticationCode.fromMap(map),
    'requestQrCodeAuthentication': (map) =>
        RequestQrCodeAuthentication.fromMap(map),
    'registerUser': (map) => RegisterUser.fromMap(map),
    'checkAuthenticationPassword': (map) =>
        CheckAuthenticationPassword.fromMap(map),
    'requestAuthenticationPasswordRecovery': (map) =>
        RequestAuthenticationPasswordRecovery.fromMap(map),
    'checkAuthenticationPasswordRecoveryCode': (map) =>
        CheckAuthenticationPasswordRecoveryCode.fromMap(map),
    'recoverAuthenticationPassword': (map) =>
        RecoverAuthenticationPassword.fromMap(map),
    'checkAuthenticationBotToken': (map) =>
        CheckAuthenticationBotToken.fromMap(map),
    'logOut': (map) => LogOut.fromMap(map),
    'close': (map) => Close.fromMap(map),
    'destroy': (map) => Destroy.fromMap(map),
    'confirmQrCodeAuthentication': (map) =>
        ConfirmQrCodeAuthentication.fromMap(map),
    'getCurrentState': (map) => GetCurrentState.fromMap(map),
    'setDatabaseEncryptionKey': (map) => SetDatabaseEncryptionKey.fromMap(map),
    'getPasswordState': (map) => GetPasswordState.fromMap(map),
    'setPassword': (map) => SetPassword.fromMap(map),
    'getRecoveryEmailAddress': (map) => GetRecoveryEmailAddress.fromMap(map),
    'setRecoveryEmailAddress': (map) => SetRecoveryEmailAddress.fromMap(map),
    'checkRecoveryEmailAddressCode': (map) =>
        CheckRecoveryEmailAddressCode.fromMap(map),
    'resendRecoveryEmailAddressCode': (map) =>
        ResendRecoveryEmailAddressCode.fromMap(map),
    'requestPasswordRecovery': (map) => RequestPasswordRecovery.fromMap(map),
    'checkPasswordRecoveryCode': (map) =>
        CheckPasswordRecoveryCode.fromMap(map),
    'recoverPassword': (map) => RecoverPassword.fromMap(map),
    'resetPassword': (map) => ResetPassword.fromMap(map),
    'cancelPasswordReset': (map) => CancelPasswordReset.fromMap(map),
    'createTemporaryPassword': (map) => CreateTemporaryPassword.fromMap(map),
    'getTemporaryPasswordState': (map) =>
        GetTemporaryPasswordState.fromMap(map),
    'getMe': (map) => GetMe.fromMap(map),
    'getUser': (map) => GetUser.fromMap(map),
    'getUserFullInfo': (map) => GetUserFullInfo.fromMap(map),
    'getBasicGroup': (map) => GetBasicGroup.fromMap(map),
    'getBasicGroupFullInfo': (map) => GetBasicGroupFullInfo.fromMap(map),
    'getSupergroup': (map) => GetSupergroup.fromMap(map),
    'getSupergroupFullInfo': (map) => GetSupergroupFullInfo.fromMap(map),
    'getSecretChat': (map) => GetSecretChat.fromMap(map),
    'getChat': (map) => GetChat.fromMap(map),
    'getMessage': (map) => GetMessage.fromMap(map),
    'getMessageLocally': (map) => GetMessageLocally.fromMap(map),
    'getRepliedMessage': (map) => GetRepliedMessage.fromMap(map),
    'getChatPinnedMessage': (map) => GetChatPinnedMessage.fromMap(map),
    'getCallbackQueryMessage': (map) => GetCallbackQueryMessage.fromMap(map),
    'getMessages': (map) => GetMessages.fromMap(map),
    'getMessageThread': (map) => GetMessageThread.fromMap(map),
    'getMessageViewers': (map) => GetMessageViewers.fromMap(map),
    'getFile': (map) => GetFile.fromMap(map),
    'getRemoteFile': (map) => GetRemoteFile.fromMap(map),
    'loadChats': (map) => LoadChats.fromMap(map),
    'getChats': (map) => GetChats.fromMap(map),
    'searchPublicChat': (map) => SearchPublicChat.fromMap(map),
    'searchPublicChats': (map) => SearchPublicChats.fromMap(map),
    'searchChats': (map) => SearchChats.fromMap(map),
    'searchChatsOnServer': (map) => SearchChatsOnServer.fromMap(map),
    'searchChatsNearby': (map) => SearchChatsNearby.fromMap(map),
    'getTopChats': (map) => GetTopChats.fromMap(map),
    'removeTopChat': (map) => RemoveTopChat.fromMap(map),
    'addRecentlyFoundChat': (map) => AddRecentlyFoundChat.fromMap(map),
    'removeRecentlyFoundChat': (map) => RemoveRecentlyFoundChat.fromMap(map),
    'clearRecentlyFoundChats': (map) => ClearRecentlyFoundChats.fromMap(map),
    'getRecentlyOpenedChats': (map) => GetRecentlyOpenedChats.fromMap(map),
    'checkChatUsername': (map) => CheckChatUsername.fromMap(map),
    'getCreatedPublicChats': (map) => GetCreatedPublicChats.fromMap(map),
    'checkCreatedPublicChatsLimit': (map) =>
        CheckCreatedPublicChatsLimit.fromMap(map),
    'getSuitableDiscussionChats': (map) =>
        GetSuitableDiscussionChats.fromMap(map),
    'getInactiveSupergroupChats': (map) =>
        GetInactiveSupergroupChats.fromMap(map),
    'getGroupsInCommon': (map) => GetGroupsInCommon.fromMap(map),
    'getChatHistory': (map) => GetChatHistory.fromMap(map),
    'getMessageThreadHistory': (map) => GetMessageThreadHistory.fromMap(map),
    'deleteChatHistory': (map) => DeleteChatHistory.fromMap(map),
    'deleteChat': (map) => DeleteChat.fromMap(map),
    'searchChatMessages': (map) => SearchChatMessages.fromMap(map),
    'searchMessages': (map) => SearchMessages.fromMap(map),
    'searchSecretMessages': (map) => SearchSecretMessages.fromMap(map),
    'searchCallMessages': (map) => SearchCallMessages.fromMap(map),
    'deleteAllCallMessages': (map) => DeleteAllCallMessages.fromMap(map),
    'searchChatRecentLocationMessages': (map) =>
        SearchChatRecentLocationMessages.fromMap(map),
    'getActiveLiveLocationMessages': (map) =>
        GetActiveLiveLocationMessages.fromMap(map),
    'getChatMessageByDate': (map) => GetChatMessageByDate.fromMap(map),
    'getChatSparseMessagePositions': (map) =>
        GetChatSparseMessagePositions.fromMap(map),
    'getChatMessageCalendar': (map) => GetChatMessageCalendar.fromMap(map),
    'getChatMessageCount': (map) => GetChatMessageCount.fromMap(map),
    'getChatScheduledMessages': (map) => GetChatScheduledMessages.fromMap(map),
    'getMessagePublicForwards': (map) => GetMessagePublicForwards.fromMap(map),
    'getChatSponsoredMessage': (map) => GetChatSponsoredMessage.fromMap(map),
    'removeNotification': (map) => RemoveNotification.fromMap(map),
    'removeNotificationGroup': (map) => RemoveNotificationGroup.fromMap(map),
    'getMessageLink': (map) => GetMessageLink.fromMap(map),
    'getMessageEmbeddingCode': (map) => GetMessageEmbeddingCode.fromMap(map),
    'getMessageLinkInfo': (map) => GetMessageLinkInfo.fromMap(map),
    'getChatAvailableMessageSenders': (map) =>
        GetChatAvailableMessageSenders.fromMap(map),
    'setChatMessageSender': (map) => SetChatMessageSender.fromMap(map),
    'sendMessage': (map) => SendMessage.fromMap(map),
    'sendMessageAlbum': (map) => SendMessageAlbum.fromMap(map),
    'sendBotStartMessage': (map) => SendBotStartMessage.fromMap(map),
    'sendInlineQueryResultMessage': (map) =>
        SendInlineQueryResultMessage.fromMap(map),
    'forwardMessages': (map) => ForwardMessages.fromMap(map),
    'resendMessages': (map) => ResendMessages.fromMap(map),
    'sendChatScreenshotTakenNotification': (map) =>
        SendChatScreenshotTakenNotification.fromMap(map),
    'addLocalMessage': (map) => AddLocalMessage.fromMap(map),
    'deleteMessages': (map) => DeleteMessages.fromMap(map),
    'deleteChatMessagesBySender': (map) =>
        DeleteChatMessagesBySender.fromMap(map),
    'deleteChatMessagesByDate': (map) => DeleteChatMessagesByDate.fromMap(map),
    'editMessageText': (map) => EditMessageText.fromMap(map),
    'editMessageLiveLocation': (map) => EditMessageLiveLocation.fromMap(map),
    'editMessageMedia': (map) => EditMessageMedia.fromMap(map),
    'editMessageCaption': (map) => EditMessageCaption.fromMap(map),
    'editMessageReplyMarkup': (map) => EditMessageReplyMarkup.fromMap(map),
    'editInlineMessageText': (map) => EditInlineMessageText.fromMap(map),
    'editInlineMessageLiveLocation': (map) =>
        EditInlineMessageLiveLocation.fromMap(map),
    'editInlineMessageMedia': (map) => EditInlineMessageMedia.fromMap(map),
    'editInlineMessageCaption': (map) => EditInlineMessageCaption.fromMap(map),
    'editInlineMessageReplyMarkup': (map) =>
        EditInlineMessageReplyMarkup.fromMap(map),
    'editMessageSchedulingState': (map) =>
        EditMessageSchedulingState.fromMap(map),
    'getTextEntities': (map) => GetTextEntities.fromMap(map),
    'parseTextEntities': (map) => ParseTextEntities.fromMap(map),
    'parseMarkdown': (map) => ParseMarkdown.fromMap(map),
    'getMarkdownText': (map) => GetMarkdownText.fromMap(map),
    'getFileMimeType': (map) => GetFileMimeType.fromMap(map),
    'getFileExtension': (map) => GetFileExtension.fromMap(map),
    'cleanFileName': (map) => CleanFileName.fromMap(map),
    'getLanguagePackString': (map) => GetLanguagePackString.fromMap(map),
    'getJsonValue': (map) => GetJsonValue.fromMap(map),
    'getJsonString': (map) => GetJsonString.fromMap(map),
    'setPollAnswer': (map) => SetPollAnswer.fromMap(map),
    'getPollVoters': (map) => GetPollVoters.fromMap(map),
    'stopPoll': (map) => StopPoll.fromMap(map),
    'hideSuggestedAction': (map) => HideSuggestedAction.fromMap(map),
    'getLoginUrlInfo': (map) => GetLoginUrlInfo.fromMap(map),
    'getLoginUrl': (map) => GetLoginUrl.fromMap(map),
    'getInlineQueryResults': (map) => GetInlineQueryResults.fromMap(map),
    'answerInlineQuery': (map) => AnswerInlineQuery.fromMap(map),
    'getCallbackQueryAnswer': (map) => GetCallbackQueryAnswer.fromMap(map),
    'answerCallbackQuery': (map) => AnswerCallbackQuery.fromMap(map),
    'answerShippingQuery': (map) => AnswerShippingQuery.fromMap(map),
    'answerPreCheckoutQuery': (map) => AnswerPreCheckoutQuery.fromMap(map),
    'setGameScore': (map) => SetGameScore.fromMap(map),
    'setInlineGameScore': (map) => SetInlineGameScore.fromMap(map),
    'getGameHighScores': (map) => GetGameHighScores.fromMap(map),
    'getInlineGameHighScores': (map) => GetInlineGameHighScores.fromMap(map),
    'deleteChatReplyMarkup': (map) => DeleteChatReplyMarkup.fromMap(map),
    'sendChatAction': (map) => SendChatAction.fromMap(map),
    'openChat': (map) => OpenChat.fromMap(map),
    'closeChat': (map) => CloseChat.fromMap(map),
    'viewMessages': (map) => ViewMessages.fromMap(map),
    'openMessageContent': (map) => OpenMessageContent.fromMap(map),
    'clickAnimatedEmojiMessage': (map) =>
        ClickAnimatedEmojiMessage.fromMap(map),
    'getInternalLinkType': (map) => GetInternalLinkType.fromMap(map),
    'getExternalLinkInfo': (map) => GetExternalLinkInfo.fromMap(map),
    'getExternalLink': (map) => GetExternalLink.fromMap(map),
    'readAllChatMentions': (map) => ReadAllChatMentions.fromMap(map),
    'createPrivateChat': (map) => CreatePrivateChat.fromMap(map),
    'createBasicGroupChat': (map) => CreateBasicGroupChat.fromMap(map),
    'createSupergroupChat': (map) => CreateSupergroupChat.fromMap(map),
    'createSecretChat': (map) => CreateSecretChat.fromMap(map),
    'createNewBasicGroupChat': (map) => CreateNewBasicGroupChat.fromMap(map),
    'createNewSupergroupChat': (map) => CreateNewSupergroupChat.fromMap(map),
    'createNewSecretChat': (map) => CreateNewSecretChat.fromMap(map),
    'upgradeBasicGroupChatToSupergroupChat': (map) =>
        UpgradeBasicGroupChatToSupergroupChat.fromMap(map),
    'getChatListsToAddChat': (map) => GetChatListsToAddChat.fromMap(map),
    'addChatToList': (map) => AddChatToList.fromMap(map),
    'getChatFilter': (map) => GetChatFilter.fromMap(map),
    'createChatFilter': (map) => CreateChatFilter.fromMap(map),
    'editChatFilter': (map) => EditChatFilter.fromMap(map),
    'deleteChatFilter': (map) => DeleteChatFilter.fromMap(map),
    'reorderChatFilters': (map) => ReorderChatFilters.fromMap(map),
    'getRecommendedChatFilters': (map) =>
        GetRecommendedChatFilters.fromMap(map),
    'getChatFilterDefaultIconName': (map) =>
        GetChatFilterDefaultIconName.fromMap(map),
    'setChatTitle': (map) => SetChatTitle.fromMap(map),
    'setChatPhoto': (map) => SetChatPhoto.fromMap(map),
    'setChatMessageTtl': (map) => SetChatMessageTtl.fromMap(map),
    'setChatPermissions': (map) => SetChatPermissions.fromMap(map),
    'setChatTheme': (map) => SetChatTheme.fromMap(map),
    'setChatDraftMessage': (map) => SetChatDraftMessage.fromMap(map),
    'setChatNotificationSettings': (map) =>
        SetChatNotificationSettings.fromMap(map),
    'toggleChatHasProtectedContent': (map) =>
        ToggleChatHasProtectedContent.fromMap(map),
    'toggleChatIsMarkedAsUnread': (map) =>
        ToggleChatIsMarkedAsUnread.fromMap(map),
    'toggleChatDefaultDisableNotification': (map) =>
        ToggleChatDefaultDisableNotification.fromMap(map),
    'setChatClientData': (map) => SetChatClientData.fromMap(map),
    'setChatDescription': (map) => SetChatDescription.fromMap(map),
    'setChatDiscussionGroup': (map) => SetChatDiscussionGroup.fromMap(map),
    'setChatLocation': (map) => SetChatLocation.fromMap(map),
    'setChatSlowModeDelay': (map) => SetChatSlowModeDelay.fromMap(map),
    'pinChatMessage': (map) => PinChatMessage.fromMap(map),
    'unpinChatMessage': (map) => UnpinChatMessage.fromMap(map),
    'unpinAllChatMessages': (map) => UnpinAllChatMessages.fromMap(map),
    'joinChat': (map) => JoinChat.fromMap(map),
    'leaveChat': (map) => LeaveChat.fromMap(map),
    'addChatMember': (map) => AddChatMember.fromMap(map),
    'addChatMembers': (map) => AddChatMembers.fromMap(map),
    'setChatMemberStatus': (map) => SetChatMemberStatus.fromMap(map),
    'banChatMember': (map) => BanChatMember.fromMap(map),
    'canTransferOwnership': (map) => CanTransferOwnership.fromMap(map),
    'transferChatOwnership': (map) => TransferChatOwnership.fromMap(map),
    'getChatMember': (map) => GetChatMember.fromMap(map),
    'searchChatMembers': (map) => SearchChatMembers.fromMap(map),
    'getChatAdministrators': (map) => GetChatAdministrators.fromMap(map),
    'clearAllDraftMessages': (map) => ClearAllDraftMessages.fromMap(map),
    'getChatNotificationSettingsExceptions': (map) =>
        GetChatNotificationSettingsExceptions.fromMap(map),
    'getScopeNotificationSettings': (map) =>
        GetScopeNotificationSettings.fromMap(map),
    'setScopeNotificationSettings': (map) =>
        SetScopeNotificationSettings.fromMap(map),
    'resetAllNotificationSettings': (map) =>
        ResetAllNotificationSettings.fromMap(map),
    'toggleChatIsPinned': (map) => ToggleChatIsPinned.fromMap(map),
    'setPinnedChats': (map) => SetPinnedChats.fromMap(map),
    'downloadFile': (map) => DownloadFile.fromMap(map),
    'getFileDownloadedPrefixSize': (map) =>
        GetFileDownloadedPrefixSize.fromMap(map),
    'cancelDownloadFile': (map) => CancelDownloadFile.fromMap(map),
    'getSuggestedFileName': (map) => GetSuggestedFileName.fromMap(map),
    'uploadFile': (map) => UploadFile.fromMap(map),
    'cancelUploadFile': (map) => CancelUploadFile.fromMap(map),
    'writeGeneratedFilePart': (map) => WriteGeneratedFilePart.fromMap(map),
    'setFileGenerationProgress': (map) =>
        SetFileGenerationProgress.fromMap(map),
    'finishFileGeneration': (map) => FinishFileGeneration.fromMap(map),
    'readFilePart': (map) => ReadFilePart.fromMap(map),
    'deleteFile': (map) => DeleteFile.fromMap(map),
    'getMessageFileType': (map) => GetMessageFileType.fromMap(map),
    'getMessageImportConfirmationText': (map) =>
        GetMessageImportConfirmationText.fromMap(map),
    'importMessages': (map) => ImportMessages.fromMap(map),
    'replacePrimaryChatInviteLink': (map) =>
        ReplacePrimaryChatInviteLink.fromMap(map),
    'createChatInviteLink': (map) => CreateChatInviteLink.fromMap(map),
    'editChatInviteLink': (map) => EditChatInviteLink.fromMap(map),
    'getChatInviteLink': (map) => GetChatInviteLink.fromMap(map),
    'getChatInviteLinkCounts': (map) => GetChatInviteLinkCounts.fromMap(map),
    'getChatInviteLinks': (map) => GetChatInviteLinks.fromMap(map),
    'getChatInviteLinkMembers': (map) => GetChatInviteLinkMembers.fromMap(map),
    'revokeChatInviteLink': (map) => RevokeChatInviteLink.fromMap(map),
    'deleteRevokedChatInviteLink': (map) =>
        DeleteRevokedChatInviteLink.fromMap(map),
    'deleteAllRevokedChatInviteLinks': (map) =>
        DeleteAllRevokedChatInviteLinks.fromMap(map),
    'checkChatInviteLink': (map) => CheckChatInviteLink.fromMap(map),
    'joinChatByInviteLink': (map) => JoinChatByInviteLink.fromMap(map),
    'getChatJoinRequests': (map) => GetChatJoinRequests.fromMap(map),
    'processChatJoinRequest': (map) => ProcessChatJoinRequest.fromMap(map),
    'processChatJoinRequests': (map) => ProcessChatJoinRequests.fromMap(map),
    'createCall': (map) => CreateCall.fromMap(map),
    'acceptCall': (map) => AcceptCall.fromMap(map),
    'sendCallSignalingData': (map) => SendCallSignalingData.fromMap(map),
    'discardCall': (map) => DiscardCall.fromMap(map),
    'sendCallRating': (map) => SendCallRating.fromMap(map),
    'sendCallDebugInformation': (map) => SendCallDebugInformation.fromMap(map),
    'getVideoChatAvailableParticipants': (map) =>
        GetVideoChatAvailableParticipants.fromMap(map),
    'setVideoChatDefaultParticipant': (map) =>
        SetVideoChatDefaultParticipant.fromMap(map),
    'createVideoChat': (map) => CreateVideoChat.fromMap(map),
    'getGroupCall': (map) => GetGroupCall.fromMap(map),
    'startScheduledGroupCall': (map) => StartScheduledGroupCall.fromMap(map),
    'toggleGroupCallEnabledStartNotification': (map) =>
        ToggleGroupCallEnabledStartNotification.fromMap(map),
    'joinGroupCall': (map) => JoinGroupCall.fromMap(map),
    'startGroupCallScreenSharing': (map) =>
        StartGroupCallScreenSharing.fromMap(map),
    'toggleGroupCallScreenSharingIsPaused': (map) =>
        ToggleGroupCallScreenSharingIsPaused.fromMap(map),
    'endGroupCallScreenSharing': (map) =>
        EndGroupCallScreenSharing.fromMap(map),
    'setGroupCallTitle': (map) => SetGroupCallTitle.fromMap(map),
    'toggleGroupCallMuteNewParticipants': (map) =>
        ToggleGroupCallMuteNewParticipants.fromMap(map),
    'inviteGroupCallParticipants': (map) =>
        InviteGroupCallParticipants.fromMap(map),
    'getGroupCallInviteLink': (map) => GetGroupCallInviteLink.fromMap(map),
    'revokeGroupCallInviteLink': (map) =>
        RevokeGroupCallInviteLink.fromMap(map),
    'startGroupCallRecording': (map) => StartGroupCallRecording.fromMap(map),
    'endGroupCallRecording': (map) => EndGroupCallRecording.fromMap(map),
    'toggleGroupCallIsMyVideoPaused': (map) =>
        ToggleGroupCallIsMyVideoPaused.fromMap(map),
    'toggleGroupCallIsMyVideoEnabled': (map) =>
        ToggleGroupCallIsMyVideoEnabled.fromMap(map),
    'setGroupCallParticipantIsSpeaking': (map) =>
        SetGroupCallParticipantIsSpeaking.fromMap(map),
    'toggleGroupCallParticipantIsMuted': (map) =>
        ToggleGroupCallParticipantIsMuted.fromMap(map),
    'setGroupCallParticipantVolumeLevel': (map) =>
        SetGroupCallParticipantVolumeLevel.fromMap(map),
    'toggleGroupCallParticipantIsHandRaised': (map) =>
        ToggleGroupCallParticipantIsHandRaised.fromMap(map),
    'loadGroupCallParticipants': (map) =>
        LoadGroupCallParticipants.fromMap(map),
    'leaveGroupCall': (map) => LeaveGroupCall.fromMap(map),
    'endGroupCall': (map) => EndGroupCall.fromMap(map),
    'getGroupCallStreamSegment': (map) =>
        GetGroupCallStreamSegment.fromMap(map),
    'toggleMessageSenderIsBlocked': (map) =>
        ToggleMessageSenderIsBlocked.fromMap(map),
    'blockMessageSenderFromReplies': (map) =>
        BlockMessageSenderFromReplies.fromMap(map),
    'getBlockedMessageSenders': (map) => GetBlockedMessageSenders.fromMap(map),
    'addContact': (map) => AddContact.fromMap(map),
    'importContacts': (map) => ImportContacts.fromMap(map),
    'getContacts': (map) => GetContacts.fromMap(map),
    'searchContacts': (map) => SearchContacts.fromMap(map),
    'removeContacts': (map) => RemoveContacts.fromMap(map),
    'getImportedContactCount': (map) => GetImportedContactCount.fromMap(map),
    'changeImportedContacts': (map) => ChangeImportedContacts.fromMap(map),
    'clearImportedContacts': (map) => ClearImportedContacts.fromMap(map),
    'sharePhoneNumber': (map) => SharePhoneNumber.fromMap(map),
    'getUserProfilePhotos': (map) => GetUserProfilePhotos.fromMap(map),
    'getStickers': (map) => GetStickers.fromMap(map),
    'searchStickers': (map) => SearchStickers.fromMap(map),
    'getInstalledStickerSets': (map) => GetInstalledStickerSets.fromMap(map),
    'getArchivedStickerSets': (map) => GetArchivedStickerSets.fromMap(map),
    'getTrendingStickerSets': (map) => GetTrendingStickerSets.fromMap(map),
    'getAttachedStickerSets': (map) => GetAttachedStickerSets.fromMap(map),
    'getStickerSet': (map) => GetStickerSet.fromMap(map),
    'searchStickerSet': (map) => SearchStickerSet.fromMap(map),
    'searchInstalledStickerSets': (map) =>
        SearchInstalledStickerSets.fromMap(map),
    'searchStickerSets': (map) => SearchStickerSets.fromMap(map),
    'changeStickerSet': (map) => ChangeStickerSet.fromMap(map),
    'viewTrendingStickerSets': (map) => ViewTrendingStickerSets.fromMap(map),
    'reorderInstalledStickerSets': (map) =>
        ReorderInstalledStickerSets.fromMap(map),
    'getRecentStickers': (map) => GetRecentStickers.fromMap(map),
    'addRecentSticker': (map) => AddRecentSticker.fromMap(map),
    'removeRecentSticker': (map) => RemoveRecentSticker.fromMap(map),
    'clearRecentStickers': (map) => ClearRecentStickers.fromMap(map),
    'getFavoriteStickers': (map) => GetFavoriteStickers.fromMap(map),
    'addFavoriteSticker': (map) => AddFavoriteSticker.fromMap(map),
    'removeFavoriteSticker': (map) => RemoveFavoriteSticker.fromMap(map),
    'getStickerEmojis': (map) => GetStickerEmojis.fromMap(map),
    'searchEmojis': (map) => SearchEmojis.fromMap(map),
    'getAnimatedEmoji': (map) => GetAnimatedEmoji.fromMap(map),
    'getEmojiSuggestionsUrl': (map) => GetEmojiSuggestionsUrl.fromMap(map),
    'getSavedAnimations': (map) => GetSavedAnimations.fromMap(map),
    'addSavedAnimation': (map) => AddSavedAnimation.fromMap(map),
    'removeSavedAnimation': (map) => RemoveSavedAnimation.fromMap(map),
    'getRecentInlineBots': (map) => GetRecentInlineBots.fromMap(map),
    'searchHashtags': (map) => SearchHashtags.fromMap(map),
    'removeRecentHashtag': (map) => RemoveRecentHashtag.fromMap(map),
    'getWebPagePreview': (map) => GetWebPagePreview.fromMap(map),
    'getWebPageInstantView': (map) => GetWebPageInstantView.fromMap(map),
    'setProfilePhoto': (map) => SetProfilePhoto.fromMap(map),
    'deleteProfilePhoto': (map) => DeleteProfilePhoto.fromMap(map),
    'setName': (map) => SetName.fromMap(map),
    'setBio': (map) => SetBio.fromMap(map),
    'setUsername': (map) => SetUsername.fromMap(map),
    'setLocation': (map) => SetLocation.fromMap(map),
    'changePhoneNumber': (map) => ChangePhoneNumber.fromMap(map),
    'resendChangePhoneNumberCode': (map) =>
        ResendChangePhoneNumberCode.fromMap(map),
    'checkChangePhoneNumberCode': (map) =>
        CheckChangePhoneNumberCode.fromMap(map),
    'setCommands': (map) => SetCommands.fromMap(map),
    'deleteCommands': (map) => DeleteCommands.fromMap(map),
    'getCommands': (map) => GetCommands.fromMap(map),
    'getActiveSessions': (map) => GetActiveSessions.fromMap(map),
    'terminateSession': (map) => TerminateSession.fromMap(map),
    'terminateAllOtherSessions': (map) =>
        TerminateAllOtherSessions.fromMap(map),
    'toggleSessionCanAcceptCalls': (map) =>
        ToggleSessionCanAcceptCalls.fromMap(map),
    'toggleSessionCanAcceptSecretChats': (map) =>
        ToggleSessionCanAcceptSecretChats.fromMap(map),
    'setInactiveSessionTtl': (map) => SetInactiveSessionTtl.fromMap(map),
    'getConnectedWebsites': (map) => GetConnectedWebsites.fromMap(map),
    'disconnectWebsite': (map) => DisconnectWebsite.fromMap(map),
    'disconnectAllWebsites': (map) => DisconnectAllWebsites.fromMap(map),
    'setSupergroupUsername': (map) => SetSupergroupUsername.fromMap(map),
    'setSupergroupStickerSet': (map) => SetSupergroupStickerSet.fromMap(map),
    'toggleSupergroupSignMessages': (map) =>
        ToggleSupergroupSignMessages.fromMap(map),
    'toggleSupergroupIsAllHistoryAvailable': (map) =>
        ToggleSupergroupIsAllHistoryAvailable.fromMap(map),
    'toggleSupergroupIsBroadcastGroup': (map) =>
        ToggleSupergroupIsBroadcastGroup.fromMap(map),
    'reportSupergroupSpam': (map) => ReportSupergroupSpam.fromMap(map),
    'getSupergroupMembers': (map) => GetSupergroupMembers.fromMap(map),
    'closeSecretChat': (map) => CloseSecretChat.fromMap(map),
    'getChatEventLog': (map) => GetChatEventLog.fromMap(map),
    'getPaymentForm': (map) => GetPaymentForm.fromMap(map),
    'validateOrderInfo': (map) => ValidateOrderInfo.fromMap(map),
    'sendPaymentForm': (map) => SendPaymentForm.fromMap(map),
    'getPaymentReceipt': (map) => GetPaymentReceipt.fromMap(map),
    'getSavedOrderInfo': (map) => GetSavedOrderInfo.fromMap(map),
    'deleteSavedOrderInfo': (map) => DeleteSavedOrderInfo.fromMap(map),
    'deleteSavedCredentials': (map) => DeleteSavedCredentials.fromMap(map),
    'getSupportUser': (map) => GetSupportUser.fromMap(map),
    'getBackgrounds': (map) => GetBackgrounds.fromMap(map),
    'getBackgroundUrl': (map) => GetBackgroundUrl.fromMap(map),
    'searchBackground': (map) => SearchBackground.fromMap(map),
    'setBackground': (map) => SetBackground.fromMap(map),
    'removeBackground': (map) => RemoveBackground.fromMap(map),
    'resetBackgrounds': (map) => ResetBackgrounds.fromMap(map),
    'getLocalizationTargetInfo': (map) =>
        GetLocalizationTargetInfo.fromMap(map),
    'getLanguagePackInfo': (map) => GetLanguagePackInfo.fromMap(map),
    'getLanguagePackStrings': (map) => GetLanguagePackStrings.fromMap(map),
    'synchronizeLanguagePack': (map) => SynchronizeLanguagePack.fromMap(map),
    'addCustomServerLanguagePack': (map) =>
        AddCustomServerLanguagePack.fromMap(map),
    'setCustomLanguagePack': (map) => SetCustomLanguagePack.fromMap(map),
    'editCustomLanguagePackInfo': (map) =>
        EditCustomLanguagePackInfo.fromMap(map),
    'setCustomLanguagePackString': (map) =>
        SetCustomLanguagePackString.fromMap(map),
    'deleteLanguagePack': (map) => DeleteLanguagePack.fromMap(map),
    'registerDevice': (map) => RegisterDevice.fromMap(map),
    'processPushNotification': (map) => ProcessPushNotification.fromMap(map),
    'getPushReceiverId': (map) => GetPushReceiverId.fromMap(map),
    'getRecentlyVisitedTMeUrls': (map) =>
        GetRecentlyVisitedTMeUrls.fromMap(map),
    'setUserPrivacySettingRules': (map) =>
        SetUserPrivacySettingRules.fromMap(map),
    'getUserPrivacySettingRules': (map) =>
        GetUserPrivacySettingRules.fromMap(map),
    'getOption': (map) => GetOption.fromMap(map),
    'setOption': (map) => SetOption.fromMap(map),
    'setAccountTtl': (map) => SetAccountTtl.fromMap(map),
    'getAccountTtl': (map) => GetAccountTtl.fromMap(map),
    'deleteAccount': (map) => DeleteAccount.fromMap(map),
    'removeChatActionBar': (map) => RemoveChatActionBar.fromMap(map),
    'reportChat': (map) => ReportChat.fromMap(map),
    'reportChatPhoto': (map) => ReportChatPhoto.fromMap(map),
    'getChatStatistics': (map) => GetChatStatistics.fromMap(map),
    'getMessageStatistics': (map) => GetMessageStatistics.fromMap(map),
    'getStatisticalGraph': (map) => GetStatisticalGraph.fromMap(map),
    'getStorageStatistics': (map) => GetStorageStatistics.fromMap(map),
    'getStorageStatisticsFast': (map) => GetStorageStatisticsFast.fromMap(map),
    'getDatabaseStatistics': (map) => GetDatabaseStatistics.fromMap(map),
    'optimizeStorage': (map) => OptimizeStorage.fromMap(map),
    'setNetworkType': (map) => SetNetworkType.fromMap(map),
    'getNetworkStatistics': (map) => GetNetworkStatistics.fromMap(map),
    'addNetworkStatistics': (map) => AddNetworkStatistics.fromMap(map),
    'resetNetworkStatistics': (map) => ResetNetworkStatistics.fromMap(map),
    'getAutoDownloadSettingsPresets': (map) =>
        GetAutoDownloadSettingsPresets.fromMap(map),
    'setAutoDownloadSettings': (map) => SetAutoDownloadSettings.fromMap(map),
    'getBankCardInfo': (map) => GetBankCardInfo.fromMap(map),
    'getPassportElement': (map) => GetPassportElement.fromMap(map),
    'getAllPassportElements': (map) => GetAllPassportElements.fromMap(map),
    'setPassportElement': (map) => SetPassportElement.fromMap(map),
    'deletePassportElement': (map) => DeletePassportElement.fromMap(map),
    'setPassportElementErrors': (map) => SetPassportElementErrors.fromMap(map),
    'getPreferredCountryLanguage': (map) =>
        GetPreferredCountryLanguage.fromMap(map),
    'sendPhoneNumberVerificationCode': (map) =>
        SendPhoneNumberVerificationCode.fromMap(map),
    'resendPhoneNumberVerificationCode': (map) =>
        ResendPhoneNumberVerificationCode.fromMap(map),
    'checkPhoneNumberVerificationCode': (map) =>
        CheckPhoneNumberVerificationCode.fromMap(map),
    'sendEmailAddressVerificationCode': (map) =>
        SendEmailAddressVerificationCode.fromMap(map),
    'resendEmailAddressVerificationCode': (map) =>
        ResendEmailAddressVerificationCode.fromMap(map),
    'checkEmailAddressVerificationCode': (map) =>
        CheckEmailAddressVerificationCode.fromMap(map),
    'getPassportAuthorizationForm': (map) =>
        GetPassportAuthorizationForm.fromMap(map),
    'getPassportAuthorizationFormAvailableElements': (map) =>
        GetPassportAuthorizationFormAvailableElements.fromMap(map),
    'sendPassportAuthorizationForm': (map) =>
        SendPassportAuthorizationForm.fromMap(map),
    'sendPhoneNumberConfirmationCode': (map) =>
        SendPhoneNumberConfirmationCode.fromMap(map),
    'resendPhoneNumberConfirmationCode': (map) =>
        ResendPhoneNumberConfirmationCode.fromMap(map),
    'checkPhoneNumberConfirmationCode': (map) =>
        CheckPhoneNumberConfirmationCode.fromMap(map),
    'setBotUpdatesStatus': (map) => SetBotUpdatesStatus.fromMap(map),
    'uploadStickerFile': (map) => UploadStickerFile.fromMap(map),
    'getSuggestedStickerSetName': (map) =>
        GetSuggestedStickerSetName.fromMap(map),
    'checkStickerSetName': (map) => CheckStickerSetName.fromMap(map),
    'createNewStickerSet': (map) => CreateNewStickerSet.fromMap(map),
    'addStickerToSet': (map) => AddStickerToSet.fromMap(map),
    'setStickerSetThumbnail': (map) => SetStickerSetThumbnail.fromMap(map),
    'setStickerPositionInSet': (map) => SetStickerPositionInSet.fromMap(map),
    'removeStickerFromSet': (map) => RemoveStickerFromSet.fromMap(map),
    'getMapThumbnailFile': (map) => GetMapThumbnailFile.fromMap(map),
    'acceptTermsOfService': (map) => AcceptTermsOfService.fromMap(map),
    'sendCustomRequest': (map) => SendCustomRequest.fromMap(map),
    'answerCustomQuery': (map) => AnswerCustomQuery.fromMap(map),
    'setAlarm': (map) => SetAlarm.fromMap(map),
    'getCountries': (map) => GetCountries.fromMap(map),
    'getCountryCode': (map) => GetCountryCode.fromMap(map),
    'getPhoneNumberInfo': (map) => GetPhoneNumberInfo.fromMap(map),
    'getPhoneNumberInfoSync': (map) => GetPhoneNumberInfoSync.fromMap(map),
    'getApplicationDownloadLink': (map) =>
        GetApplicationDownloadLink.fromMap(map),
    'getDeepLinkInfo': (map) => GetDeepLinkInfo.fromMap(map),
    'getApplicationConfig': (map) => GetApplicationConfig.fromMap(map),
    'saveApplicationLogEvent': (map) => SaveApplicationLogEvent.fromMap(map),
    'addProxy': (map) => AddProxy.fromMap(map),
    'editProxy': (map) => EditProxy.fromMap(map),
    'enableProxy': (map) => EnableProxy.fromMap(map),
    'disableProxy': (map) => DisableProxy.fromMap(map),
    'removeProxy': (map) => RemoveProxy.fromMap(map),
    'getProxies': (map) => GetProxies.fromMap(map),
    'getProxyLink': (map) => GetProxyLink.fromMap(map),
    'pingProxy': (map) => PingProxy.fromMap(map),
    'setLogStream': (map) => SetLogStream.fromMap(map),
    'getLogStream': (map) => GetLogStream.fromMap(map),
    'setLogVerbosityLevel': (map) => SetLogVerbosityLevel.fromMap(map),
    'getLogVerbosityLevel': (map) => GetLogVerbosityLevel.fromMap(map),
    'getLogTags': (map) => GetLogTags.fromMap(map),
    'setLogTagVerbosityLevel': (map) => SetLogTagVerbosityLevel.fromMap(map),
    'getLogTagVerbosityLevel': (map) => GetLogTagVerbosityLevel.fromMap(map),
    'addLogMessage': (map) => AddLogMessage.fromMap(map),
    'testCallEmpty': (map) => TestCallEmpty.fromMap(map),
    'testCallString': (map) => TestCallString.fromMap(map),
    'testCallBytes': (map) => TestCallBytes.fromMap(map),
    'testCallVectorInt': (map) => TestCallVectorInt.fromMap(map),
    'testCallVectorIntObject': (map) => TestCallVectorIntObject.fromMap(map),
    'testCallVectorString': (map) => TestCallVectorString.fromMap(map),
    'testCallVectorStringObject': (map) =>
        TestCallVectorStringObject.fromMap(map),
    'testSquareInt': (map) => TestSquareInt.fromMap(map),
    'testNetwork': (map) => TestNetwork.fromMap(map),
    'testProxy': (map) => TestProxy.fromMap(map),
    'testGetDifference': (map) => TestGetDifference.fromMap(map),
    'testUseUpdate': (map) => TestUseUpdate.fromMap(map),
    'testReturnError': (map) => TestReturnError.fromMap(map),
  };

  static TlObject? fromMap(Map<String, dynamic> map) {
    return _tdMap.containsKey(map['@type']) ? _tdMap[map['@type']]!(map) : null;
  }
}
